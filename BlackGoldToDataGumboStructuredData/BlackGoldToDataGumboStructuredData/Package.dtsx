<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="1/29/2019 1:46:39 PM"
  DTS:CreationName="SSIS.Package.3"
  DTS:CreatorComputerName="CAL0-79ZKL12"
  DTS:CreatorName="ENSIGN\greg.duggleby"
  DTS:DTSID="{406CDCDD-C537-4D90-B57D-90ABD863EEA7}"
  DTS:EnableConfig="True"
  DTS:ExecutableType="SSIS.Package.3"
  DTS:LastModifiedProductVersion="11.0.3436.0"
  DTS:LocaleID="1033"
  DTS:MaxErrorCount="6"
  DTS:ObjectName="Package"
  DTS:PackageType="5"
  DTS:VersionBuild="668"
  DTS:VersionGUID="{0FCF844C-6B7E-4193-80C6-77DC38F617CF}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">6</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[CAL0-PP-SQC1V10\PROD10.Blackgold_PROD1]"
      DTS:CreationName="OLEDB"
      DTS:DelayValidation="True"
      DTS:DTSID="{B09DFF4B-1666-40D6-850C-21EC437987D1}"
      DTS:ObjectName="CAL0-PP-SQC1V10\PROD10.Blackgold_PROD1">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::strBGConnectionString]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=CAL0-PP-SQC1V10\PROD10;User ID=_blackGoldRead;Initial Catalog=Blackgold_PROD;Provider=SQLNCLI11.1;Auto Translate=False;">
          <DTS:Password
            DTS:Name="Password"
            Sensitive="1"
            Encrypted="1">AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAAmu8HpQTcI0y/b5Yyy1EmrAAAAAAIAAAARABUAFMAAAADZgAAwAAAABAAAACNtf1uBBCZhzJ7/IJ80EtKAAAAAASAAACgAAAAEAAAAOirHxgzYBJqKYW1H2Todd8YAAAA6kMAhfaksNEFKNaUFi6Av+7oj8JVzQFMFAAAAJNyXMAjQLgmZvfOS1REqyA9H/HU</DTS:Password>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[DataGumboSSIS.log]"
      DTS:CreationName="FILE"
      DTS:DTSID="{0FC3D171-3017-4D13-988F-CF1C1FC747F6}"
      DTS:ObjectName="DataGumboSSIS.log">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::strLogFilePath] + "\\DataGumboSSIS_" 
+  (DT_WSTR, 4)DATEPART( "YYYY", GETDATE()) + "_"
+  (DT_WSTR, 2)DATEPART( "MM", GETDATE()) + "_"
+  (DT_WSTR, 2)DATEPART( "DD", GETDATE()) + "_"
+  (DT_WSTR, 2)DATEPART( "HH", GETDATE()) + ".log"</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:FileUsageType="1"
          DTS:ConnectionString="\\CAL0-VU-ASIS01\SSIS\DataGumbo\Logs\DataGumboSSIS_2020_4_20_10.log" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[SMTP Connection Manager]"
      DTS:CreationName="SMTP"
      DTS:DTSID="{4CE84D4F-0D35-4217-AAB1-B0B0E27437D7}"
      DTS:ObjectName="SMTP Connection Manager">
      <DTS:ObjectData>
        <SmtpConnectionManager
          ConnectionString="SmtpServer=mail.ensignenergy.com;UseWindowsAuthentication=False;EnableSsl=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[xxx.xml]"
      DTS:CreationName="FILE"
      DTS:DTSID="{AF845E7A-275C-46FA-B1F5-83BABD2146C1}"
      DTS:ObjectName="xxx.xml">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::strLogFilePath] + "\\DataGumboSSIS_" 
+  (DT_WSTR, 4)DATEPART( "YYYY", GETDATE()) + "_"
+  (DT_WSTR, 2)DATEPART( "MM", GETDATE()) + "_"
+  (DT_WSTR, 2)DATEPART( "DD", GETDATE()) + "_"
+  (DT_WSTR, 2)DATEPART( "HH", GETDATE()) + ".xml"</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:FileUsageType="1"
          DTS:ConnectionString="\\CAL0-VU-ASIS01\SSIS\DataGumbo\Logs\DataGumboSSIS_2020_4_20_10.xml" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Configurations>
    <DTS:Configuration
      DTS:ConfigurationString="C:\Users\greg.duggleby\Documents\Visual Studio 2012\Projects\DataGumbo\BlackGoldToDataGumboStructuredData\BlackGoldToDataGumboStructuredData\PackageConfig.dtsConfig"
      DTS:ConfigurationType="1"
      DTS:CreationName=""
      DTS:DTSID="{585FA651-353F-4D9D-8DBE-3C56436CAF15}"
      DTS:ObjectName="Configuration 1" />
  </DTS:Configurations>
  <DTS:LogProviders>
    <DTS:LogProvider
      DTS:ConfigString="DataGumboSSIS.log"
      DTS:CreationName="DTS.LogProviderTextFile.3"
      DTS:Description="Writes log entries for events to a CSV file"
      DTS:DTSID="{984B4D18-1953-4053-832C-C9AC40825D52}"
      DTS:ObjectName="SSIS log provider for Text files">
      <DTS:ObjectData>
        <InnerObject />
      </DTS:ObjectData>
    </DTS:LogProvider>
    <DTS:LogProvider
      DTS:ConfigString="xxx.xml"
      DTS:CreationName="DTS.LogProviderXMLFile.3"
      DTS:Description="Writes log entries for events to an XML file"
      DTS:DTSID="{BAE89734-4FFD-4F4F-8B31-12264E649299}"
      DTS:ObjectName="SSIS log provider for XML files">
      <DTS:ObjectData>
        <InnerObject />
      </DTS:ObjectData>
    </DTS:LogProvider>
  </DTS:LogProviders>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{EB860B91-2DB3-4A29-8B4C-B82D432200A5}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="boolActiveInd">
      <DTS:VariableValue
        DTS:DataType="11">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{127C9B18-E614-40F1-A0CB-132358646BE0}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="boolActiveIndForComponent">
      <DTS:VariableValue
        DTS:DataType="11">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{CF64118F-3C77-4C0F-8D35-847A390EC5BB}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="boolActiveIndForDrillingAssembly">
      <DTS:VariableValue
        DTS:DataType="11">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{C8AF8D2B-B7CD-4CE7-BEDB-13349B6ACC17}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="boolActiveIndForFormation">
      <DTS:VariableValue
        DTS:DataType="11">-1</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{EDCD7E5E-951C-4F8A-A226-FF17192FA334}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="boolActiveIndForRemark">
      <DTS:VariableValue
        DTS:DataType="11">-1</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E1C810C1-1EEF-4883-BDAD-92F6B35A9EB1}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="boolActiveIndForTourSheet">
      <DTS:VariableValue
        DTS:DataType="11">-1</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{9F41E509-2960-4428-9CA3-0DDD71835CC3}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="boolActiveIndForTrippingSpeed">
      <DTS:VariableValue
        DTS:DataType="11">-1</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{C5F609E2-6D16-4944-B3C7-EB9FB9DC2B91}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="boolIsBitInCasing">
      <DTS:VariableValue
        DTS:DataType="11">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{54693FCB-633C-48A6-9C25-BB79F61EFFA2}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="boolIsChildWell">
      <DTS:VariableValue
        DTS:DataType="11">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{BA44F7D5-886C-4BD5-B9F7-B924BAD8A138}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="boolIsCrewHandlingBHA">
      <DTS:VariableValue
        DTS:DataType="11">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{392A5945-2CF9-424A-8A88-366F3F561044}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="dblActiveDeltaBitDepth">
      <DTS:VariableValue
        DTS:DataType="5">0.</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{1C934B51-6C65-4BCD-96E0-D26BC20DF9F3}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="dblActiveDeltaBlockHeight">
      <DTS:VariableValue
        DTS:DataType="5">0.</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{669F33B2-C0B9-488D-9D94-68D84FE5E662}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="dblActiveDistanceTravelled">
      <DTS:VariableValue
        DTS:DataType="5">0.</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{C0BC9511-8BC1-4E64-93B5-E2EF646265DF}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="dblActiveTime">
      <DTS:VariableValue
        DTS:DataType="5">0.</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{6FE5932F-2D76-44C0-B6C3-0C5710513E11}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="dblAvgReamCirculateConditionTime">
      <DTS:VariableValue
        DTS:DataType="5">0.</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{B51F94BC-594E-4030-A769-CEA3619528D5}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="dblAvgStoSConnectTime">
      <DTS:VariableValue
        DTS:DataType="5">0.</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{5A224B47-0E15-4D39-86BB-956633681F31}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="dblAvgSurveyTime">
      <DTS:VariableValue
        DTS:DataType="5">0.</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{95957732-98E6-4CF6-A037-0B4503842EF7}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="dblAvgWtoWConnectTime">
      <DTS:VariableValue
        DTS:DataType="5">0.</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{46E392CC-3518-4260-A0FE-6D5B253CC0ED}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="dblCalculatedLength">
      <DTS:VariableValue
        DTS:DataType="5">0.</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{CB1DD473-9CCB-41C7-960F-CF8FE3F31BB0}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="dblCalculatedWeight">
      <DTS:VariableValue
        DTS:DataType="5">0.</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{B2629809-DB6B-461F-ADD2-4C5006C18F44}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="dblFromBitDepth">
      <DTS:VariableValue
        DTS:DataType="5">0.</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{A0CEB502-EC98-406E-8BB1-59A711E20F71}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="dblLatitude">
      <DTS:VariableValue
        DTS:DataType="5">0.</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{821E6A3C-B515-40BE-BEDB-8151FE71CE4A}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="dblLongitude">
      <DTS:VariableValue
        DTS:DataType="5">0.</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{3C9EBBED-4E9A-43F2-A8DE-4BFD8A897AE9}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="dblToBitDepth">
      <DTS:VariableValue
        DTS:DataType="5">0.</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{9860B713-8E67-4F90-966C-01BBCD4DD22E}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="intAssemblyRefNumber">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{D005B3C5-1347-4095-84B2-DCADCA38075D}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="intComponentCount">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{578E5B89-C320-4D50-911F-769A06B3AD18}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="intComponentSeqNo">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{B0062F3B-D51D-45CC-ABF4-C1C664DBA8C8}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="intCustomerID">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{6870A1BB-D05F-40C7-B698-7A725092A641}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="intCustomerIdForTourSheet">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{59C8FA4B-DA2C-4179-A75C-F672F338BF67}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="intCustomerIdForWell">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{4E2BE588-F1AE-4649-8835-1E1DEA522C59}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="intFromDepth">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{522C212D-040C-4E77-93BC-63E519388812}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="intHoursBack">
      <DTS:VariableValue
        DTS:DataType="3">2</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{3DFA134F-19FA-41D7-B358-9B2435FEBC1A}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="intNumberOfConnections">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{DBB8AB39-62EF-4FC8-B662-3E5E6D60787E}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="intParentCustomerID">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{81AD820A-D6D8-4800-8860-3EA7026BC651}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="intPeriodObsNo">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{6BD99940-D9D0-4DCF-9032-3778AA287B17}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="intRigId">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{5B32D5B3-9403-4EF9-87E8-5086815A69A3}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="intRigIdForWell">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{60CE6AB6-3E5F-425C-A02B-C82122B9E2ED}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="intToDepth">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{01AA6798-96A0-4AA7-972F-EF5877D33159}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="intWellConnectTimeId">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{15546CA4-F2FB-4244-A89F-B3BAF8960BA7}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="intWellDrillAssemblyCompId">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{56A3B24F-A076-4662-B365-C69667CF7FD6}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="intWellDrillAssemblyId">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{CA323008-4872-4576-86D2-B61E369E28F3}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="intWellDrillAssemblyIdForComponent">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{47BE6862-640F-42E7-A4DC-43324DD10CE6}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="intWellDrillBitPeriodId">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{9072DACD-16F0-4E3C-B6CC-AC22090851FD}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="intWellDrillPeriodId">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{72DC6B8E-E306-4ABD-B39B-27CC16772CFE}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="intWellDrillPeriodIdForDrillingAssembly">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{0E17063C-AD94-4BD9-8B17-49DCE92DC026}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="intWellDrillPeriodIdForFormation">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{A1543E4C-A0DB-40B1-B718-4C954C2133AC}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="intWellDrillPeriodIdForRemark">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{A8D09EA8-88A7-4145-B47E-2D0531552B2F}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="intWellDrillPeriodRemarkId">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E5B00BD9-6B68-4446-AEDE-51473A33A54B}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="intWellId">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{FA1B6408-1AB6-4B4D-96CC-78B005F7A703}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="intWellId2">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E05F950B-27B8-40B4-BB70-5F3A7498250E}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="intWellIdForConnectTime">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{63A08922-2D52-4CD2-8F25-0EC72B4D0FA4}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="intWellIdForTourSheet">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{BF5B33C6-F9E5-49B0-9492-2692D3357091}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="intWellIdForTrippingSpeed">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{C274B457-1A07-41D8-BD04-E5956D5B0C7F}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="intWellTrippingSpeedId">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{178FD827-1E9E-408A-8DE0-DFCB723E27A5}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="objComponentLength">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{645786DA-2D53-4C4F-BC04-C96E7CDE766F}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="objConnectTimeList">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{59A92586-2A9F-4C04-9822-953DFCFECF8E}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="objCustomerList">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{7887555A-07A6-489B-990C-95B4DCB25410}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="objDrillAssemblyCompList">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{A2CDBB20-F10E-4150-A840-DFF61376D396}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="objDrillerNames">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E2B2A7C9-0A3F-4A90-9397-F3959DB0B9A0}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="objDrillingAssemblyList">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{4F4BB25D-3216-4BDF-BFD6-9BCB6CCE99D0}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="objEffectiveDate">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{64260297-95E0-455D-B86D-C096EEEC9FDB}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="objEndDateTime">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{1918D950-0539-454B-956D-2F8313E1BB54}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="objEndDateTimeForFormation">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{FB574590-2E08-4BBF-8D3E-B2D531DA1610}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="objExpiryDate">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{B40C44D5-BA17-411C-AA03-6FDA36651BD1}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="objFormationList">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{90CEA5DC-DE16-4C04-BD15-FAE51C8857C2}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="objFromDateTime">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{DD14A94B-FDD5-47EC-9F66-B095F55EB0B5}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="objFromDateTimeForTrippingSpeed">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{7A57756E-30D9-45B3-BB8E-846A64D7971C}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="objJobNum">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{565BEBDC-2A90-48A0-A11B-DA7EF8EB2C10}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="objMaxOutsideDiameter">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{FCE5D742-C715-4A85-9716-D2CF28774513}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="objMinInsideDiameter">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{8BEE8669-0C2E-491C-AFBC-255BBDA945CC}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="objRemark">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{4758FCC3-7FC5-43FC-8A08-2C18A789C631}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="objRemarkForConnectTime">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{890F273F-7FDE-4D6F-8D23-3F550F2E92F6}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="objRemarkType">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F647D62D-9D4F-4F87-A255-CCFAEDE4D09F}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="objRigId">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E90D6624-3DE3-4443-A9B8-956DD6AC4FE0}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="objRigIdForWell">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{54E9A376-1016-4E43-BCA8-B541DF293EA5}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="objRigList">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F8470C75-A9B2-4F12-8CBE-260493FB0EFA}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="objRigReleaseDate">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{6ED18780-6E7D-4797-B401-0C0949838003}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="objSpudDate">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{FE8045A7-4F70-45D2-ABA0-722E14FB6400}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="objStartDateTime">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{97F4C039-0A18-4743-B97C-A56B2CB81DE1}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="objStartDateTimeForFormation">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{7A1ECA6B-0A30-45A1-BF5C-2272391FAA7C}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="objToDateTime">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{AB9FE098-F27A-4EF1-A263-E9D1122C7CB6}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="objToDateTimeForTrippingSpeed">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{830224C5-1D38-4F3D-BB44-7AF1EDF17656}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="objTourSheetList">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{1C1FC6F4-AEF5-4C16-A795-2FE6CF4F3943}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="objTourSheetRemarkList">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{C878BDE4-6CC3-47C4-8AC5-3FDE4253FC36}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="objTrippingSpeedList">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{54D6B404-0D4B-4E7C-B04B-A33065AA2816}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="objUwi">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{75986DE9-DB95-4A30-8408-5115EF28B05A}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="objWellList">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{09264E5D-FF89-444D-BC2A-BA765626CBEB}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="objWellList2">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{0BE8EC30-6780-4B36-92C5-6CDA11140DCB}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="objWellNum">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{C650AF47-904D-495D-A3ED-651122A25070}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strAccessKey">
      <DTS:VariableValue
        DTS:DataType="8">testAccessKey_ummagumma68Fuchsia</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{C8C88F64-21BE-4EE7-B4FE-8A1B3715B7D2}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strActivityDescription">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{A5C9992E-1405-42C6-81B7-74A5DFD3D184}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strActivityDescriptionForTrippingSpeed">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{ED011D92-F3E5-4A38-BAFF-4D61A856A4EE}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strApiKey">
      <DTS:VariableValue
        DTS:DataType="8">testApiKey_2112$pentagonalDarkness</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{73A80EE2-4DA1-4BEA-A33D-7FB5B59909D6}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strBGConnectionString">
      <DTS:VariableValue
        DTS:DataType="8">Data Source=CAL0-PP-SQC1V10\PROD10;User ID=_blackGoldRead;Password=BUuXFUaB5H;Initial Catalog=Blackgold_PROD;Provider=SQLNCLI11.1;Auto Translate=False;</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{94986FE7-941E-444A-8279-696EB75B8642}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strComponentDesc">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{D9D0AF2A-A741-4546-ABDD-0A9797D768DE}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strContractorRepName">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{DAE3A685-C56D-4AF1-A1D1-B2549CB29F84}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strConvertedTimeZone">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{53F388E3-71A4-45F5-ADA7-C0FD294F2A01}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strCountry">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{717B6773-85D4-420B-9BFB-A0654F1D03B3}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strCustomerName">
      <DTS:VariableValue
        DTS:DataType="8">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{6B5AC6E4-EEE9-4C1B-A1D5-3C07DD07A1DC}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strDrillerNamesForTrippingSpeed">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{AD189C43-D0B4-4F29-B578-7403E17F299F}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strEnv">
      <DTS:VariableValue
        DTS:DataType="8">UAT</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{5F82BF1B-A857-41B3-9A57-2CC62BEF65EB}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strFormationName">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{827E7BD4-F288-4A00-8832-0727C53BB5A3}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strListOfValidWapIds">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{01475FCA-6EAE-40AF-A23B-7E6D844BED26}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strLogFilePath">
      <DTS:VariableValue
        DTS:DataType="8">\\CAL0-VU-ASIS01\SSIS\DataGumbo\Logs</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{59FE4471-D146-48B1-A0A0-AB6ADFBCAE8E}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strOperatorRepName">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{B0EC0263-B248-429B-969A-4AEC6A2151B0}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strProvinceState">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{7B4A027E-9740-48D2-B7CC-510E39845811}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strRemark">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{4735631E-2F63-40C4-BB41-9413415FFF5F}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strRemarkForTrippingSpeed">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{ADF45403-B225-45DA-B96A-33AF2A6E1C67}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strReportedRigName">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{0E4A03C7-F6C1-406C-9492-2BFD388D13C4}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strRigName">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{A6F01535-C7FC-455F-A418-31F83D4DD7AC}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strServerName">
      <DTS:VariableValue
        DTS:DataType="8">ensign-api.azurewebsites.net</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{16E0CC96-E947-44B4-8A65-048893FDE93F}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strSinglesOrStands">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F1594E47-4777-42F9-975D-FDB862362855}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strSinglesOrStandsForTrippingSpeed">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{AA10291B-1EC6-49C7-84AC-013B2D161C9B}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strTimeZone">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{2C0B88AF-83FC-499E-9FC5-E850C5018341}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strWellName">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:LoggingOptions
    DTS:FilterKind="0"
    DTS:LoggingMode="1">
    <DTS:Property
      DTS:DataType="8"
      DTS:Name="EventFilter">2,7,OnError,13,OnInformation</DTS:Property>
    <DTS:Property
      DTS:EventName="OnError"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnInformation"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:SelectedLogProviders>
      <DTS:SelectedLogProvider
        DTS:InstanceID="{984B4D18-1953-4053-832C-C9AC40825D52}" />
      <DTS:SelectedLogProvider
        DTS:InstanceID="{BAE89734-4FFD-4F4F-8B31-12264E649299}" />
    </DTS:SelectedLogProviders>
  </DTS:LoggingOptions>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\BlackGold Well Query"
      DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:Description="Get Wells"
      DTS:DTSID="{a48f135f-7db4-491e-bfb2-ebef50d3a429}"
      DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:LocaleID="-1"
      DTS:ObjectName="BlackGold Well Query"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="1">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{B09DFF4B-1666-40D6-850C-21EC437987D1}"
          SQLTask:BypassPrepare="False"
          SQLTask:SqlStatementSource="declare @hoursBack int = ?;&#xA;declare @env varchar(20) = ?;&#xA;with Xrefs as&#xA;(&#xA;select wx.* &#xA;from wellxref wx inner join rWellXrefType rwxt on wx.XrefType_rWellXrefTypeID = rwxt.rWellXrefTypeID&#xA;where rwxt.ShortName = 'Same Well'&#xA;and wx.ActiveInd = 1&#xA;)&#xA;,RecentlyChangedWellIds as&#xA;(&#xA;select WellId as WellID from Well where RowCreatedDate &gt;= DATEADD(HH, -@hoursBack, getdate()) or RowChangedDate &gt;= DATEADD(HH, -@hoursBack, getdate())&#xA;union&#xA;select well_wellid as WellID from xref.vWellDrillPeriod where RowChangedDate &gt;= DATEADD(HH, -@hoursBack, getdate())&#xA;union&#xA;select well_wellid as WellID from xref.vrWellTrippingSpeeds where RowCreatedDate &gt;= DATEADD(HH, -@hoursBack, getdate())&#xA;union&#xA;select well_wellid as WellID from xref.vrWellConnectTimes where RowCreatedDate &gt;= DATEADD(HH, -@hoursBack, getdate())&#xA;union&#xA;select well_wellid as WellID from WellDrillBitInterval vwdbi where RowChangedDate &gt;= DATEADD(HH, -@hoursBack, getdate())&#xA;union&#xA;select well_wellid as WellID from WellNode wn where (isnull(Latitude,0) &lt;&gt; 0 or isnull(Longitude,0) &lt;&gt; 0) and RowChangedDate &gt;= DATEADD(HH, -@hoursBack, getdate()) &#xA;union&#xA;select well_wellid as WellID from xref.vWellDrillPeriod vwdp inner join ovr.vWellDrillPeriodRemark vwdr on vwdp.WellDrillPeriodID = vwdr.tour_WellDrillPeriodId where vwdr.RowChangedDate &gt;= DATEADD(HH, -@hoursBack, getdate())&#xA;union&#xA;select well_wellid as WellID from WellDrillAssemblyComp wdac inner join WellDrillAssembly wda on wdac.Assembly_WellDrillAssemblyID = wda.WellDrillAssemblyID inner join WellDrillPeriod wdp on wda.Tour_WellDrillPeriodID = wdp.WellDrillPeriodID where wdac.RowChangedDate &gt;= DATEADD(HH, -@hoursBack, getdate())&#xA;union&#xA;select UWI_WellId as WellId from Xrefs where RowChangedDate &gt;= DATEADD(HH, -@hoursBack, getdate()) or RowCreatedDate &gt;= DATEADD(HH, -@hoursBack, getdate())&#xA;union&#xA;select UWI2_WellId as WellId from Xrefs where RowChangedDate &gt;= DATEADD(HH, -@hoursBack, getdate()) or RowCreatedDate &gt;= DATEADD(HH, -@hoursBack, getdate())&#xA;),&#xA;RecentlyChangedDistinctWellIds as&#xA;(&#xA;select distinct WellId from RecentlyChangedWellIds&#xA;) &#xA;select &#xA;w.WellID, &#xA;iif(WellName is null, '', WellName) as WellName, &#xA;UWI, &#xA;Operator_BusinessAssociateID as CustomerId, &#xA;JobNum, &#xA;WellNum, &#xA;convert(varchar(50), SpudDate, 121),&#xA;convert(varchar(50), RigReleaseDate, 121),&#xA;iif(rps.LongName is null, '', rps.LongName) as ProvinceState, &#xA;iif(rc.LongName is null, '', rc.Longname) as Country, &#xA;iif(wn.Latitude is null,0, wn.latitude), &#xA;iif(wn.longitude is null,0, wn.longitude), &#xA;w.ActiveInd, &#xA;w2.RigId,&#xA;iif(rtz.TimeZone is null, '', rtz.TimeZone),&#xA;CONVERT(BIT,iif(xr.UWI2_WellId is null, 0, 1)) as IsChildWell&#xA;from &#xA;well w &#xA;inner join RecentlyChangedDistinctWellIds wIds on w.WellID = wIds.WellID&#xA;cross apply (select isnull([dbo].[fnGetRigEquipmentIdForWell](w.WellID),0) as RigId) as w2&#xA;left outer join (select dense_rank() over(partition by well_wellid order by wellnodeid desc) as MyRank, * from wellnode) wn on w.wellid = wn.well_wellid and (wn.MyRank = 1 or wn.MyRank is null)&#xA;left outer join rProvinceState rps on w.ProvinceState_rProvinceStateID = rps.rProvinceStateID&#xA;left outer join rCountry rc on rps.Country_rCountryID = rc.rCountryID&#xA;left outer join (select dense_rank() over(partition by Equipment_EquipmentId order by EquipmentStatusId desc) as MyRank, * from EquipmentStatus) es on w2.RigId = es.Equipment_EquipmentID and (es.MyRank = 1 or es.MyRank is null)&#xA;left outer join rTimezone rtz on es.Timezone_rTimeZoneID = rtz.rTimezoneID&#xA;left outer join Xrefs xr on w.WellID = xr.UWI2_WellID&#xA;where&#xA;w.ActiveInd = 1&#xA;and w.Operator_BusinessAssociateId is not null&#xA;and w.PrimarySource not in ('IHS','DrillingInfo','Nickles','RMS', 'Pason Trinidad', 'NOV Trinidad')&#xA;and Operator_BusinessAssociateID is not null&#xA;and &#xA;  ((@env = 'UAT' and w2.RigId in (select EquipmentId from Equipment where ReferenceNum in ('144','156','x550x','778','x147x','x153x','770','760','771','x775x','785','548','549','T047','T052','T121','T054')))&#xA;   or&#xA;   (@env = 'PROD' and w2.RigId in (select EquipmentId from Equipment where ReferenceNum in ('144','785','548','549','770'))))&#xA;order by w.wellid asc;&#xA;"
          SQLTask:ResultType="ResultSetType_Rowset" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="0"
            SQLTask:DtsVariableName="User::objWellList" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::intHoursBack"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="3"
            SQLTask:ParameterSize="-1" />
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="1"
            SQLTask:DtsVariableName="User::strEnv"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="129"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\BlackGold Well Query 1"
      DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:Description="Get Wells"
      DTS:Disabled="True"
      DTS:DTSID="{8638589c-5b41-4ba4-bf41-ec5b102b2a2e}"
      DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:LocaleID="-1"
      DTS:ObjectName="BlackGold Well Query 1"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{B09DFF4B-1666-40D6-850C-21EC437987D1}"
          SQLTask:BypassPrepare="False"
          SQLTask:SqlStatementSource="select &#xA;top 5000 w.WellID&#xA;from &#xA;well w &#xA;where &#xA;w.ActiveInd = 1&#xA;and w.wellid = 662546&#xA;and w.Operator_BusinessAssociateId is not null&#xA;and w.PrimarySource not in ('IHS','DrillingInfo','Nickles')&#xA;order by w.wellid desc"
          SQLTask:ResultType="ResultSetType_Rowset" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="0"
            SQLTask:DtsVariableName="User::objWellList2" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Foreach Loop Container"
      DTS:CreationName="STOCK:FOREACHLOOP"
      DTS:Description="Foreach Loop Container"
      DTS:Disabled="True"
      DTS:DTSID="{9F8E1C9D-0469-40F5-8AEE-212C043D6AAB}"
      DTS:ExecutableType="STOCK:FOREACHLOOP"
      DTS:LocaleID="-1"
      DTS:ObjectName="Foreach Loop Container">
      <DTS:ForEachEnumerator
        DTS:CreationName="Microsoft.SqlServer.Dts.Runtime.Enumerators.ADO.ForEachADOEnumerator, Microsoft.SqlServer.ForEachADOEnumerator, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
        DTS:DTSID="{19C31545-CB87-4444-B345-2DC1278E30C4}"
        DTS:ObjectName="{19C31545-CB87-4444-B345-2DC1278E30C4}">
        <DTS:ObjectData>
          <FEEADO
            EnumType="EnumerateRowsInFirstTable"
            VarName="User::objWellList2" />
        </DTS:ObjectData>
      </DTS:ForEachEnumerator>
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container\Script Task"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Script Task"
          DTS:DTSID="{216127DF-8B19-4F49-BAEE-433771924274}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Script Task"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_d3f5494101d84d32a8eb436117400491"
              VSTAMajorVersion="3"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::intWellId2,User::strAccessKey,User::strApiKey,User::strServerName,System::UserName">
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[using System.Net;
using System.IO;
using System.Text;
using System.Web;
using System.Web.Helpers;
using System.Linq;

#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion

namespace ST_d3f5494101d84d32a8eb436117400491
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            int wellId = (int)Dts.Variables["User::intWellId2"].Value;
            bool fireAgain = false;

            string serverName = (String)Dts.Variables["User::strServerName"].Value;
            string apiKey = (String)Dts.Variables["User::strApiKey"].Value;
            string accessKey = (String)Dts.Variables["User::strAccessKey"].Value;
            string currentUserId = (String)Dts.Variables["System::UserName"].Value;

            if (currentUserId != null)
            {
                currentUserId = currentUserId.Split('\\').Last();
            }

            ServicePointManager.ServerCertificateValidationCallback = delegate { return true; };
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls | SecurityProtocolType.Ssl3;

            try
            {
                string url = string.Format("https://{0}/api/operationalRemark?wellId={1}&apikey={2}&accesskey={3}", serverName, wellId, apiKey, accessKey);
                url = url.Replace(" ", "%20");
                url = url.Replace("$", "%24");

                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                WebResponse webResponse = request.GetResponse();
                Stream webStream = webResponse.GetResponseStream();
                StreamReader responseReader = new StreamReader(webStream);
                string response = responseReader.ReadToEnd();
                responseReader.Close();
                OperationalRemark[] operationalRemarks = Json.Decode<OperationalRemark[]>(response);

                string listOfIdsToDelete = string.Join(",", operationalRemarks.Select(ct => ct.operationalRemarkId.ToString()));
                Dts.Events.FireInformation(0, "Gumbo SSIS", string.Format("For well id {0} deleting {1} operational remarks.", wellId, operationalRemarks.Length), string.Empty, 0, ref fireAgain);

                int deletionCounter = 0;
                foreach (OperationalRemark operationalRemark in operationalRemarks)
                {
                    url = string.Format("https://{0}/api/operationalRemark/{1}?apikey={2}&accesskey={3}", serverName, operationalRemark.operationalRemarkId, apiKey, accessKey);
                    request = (HttpWebRequest)WebRequest.Create(url);
                    string gumboPayload = Json.Encode(operationalRemark);

                    request.Method = "DELETE";
                    request.ContentType = "application/json";
                    request.ContentLength = gumboPayload.Length;
                    StreamWriter requestWriter = new StreamWriter(request.GetRequestStream(), System.Text.Encoding.ASCII);
                    requestWriter.Write(gumboPayload);
                    requestWriter.Close();

                    webResponse = request.GetResponse();
                    webStream = webResponse.GetResponseStream();
                    responseReader = new StreamReader(webStream);
                    response = responseReader.ReadToEnd();
                    responseReader.Close();

                    if (++deletionCounter % 100 == 0)
                    {
                        Dts.Events.FireInformation(0, "Gumbo SSIS", string.Format(" Deleted {0} operational remarks.", deletionCounter), string.Empty, 0, ref fireAgain);
                    }
                }
                Dts.Events.FireInformation(0, "Gumbo SSIS", string.Format("Done well id {0}.", wellId), string.Empty, 0, ref fireAgain);

                Dts.TaskResult = (int)ScriptResults.Success;

            }
            catch (Exception e)
            {
                Dts.Events.FireError(0, "Gumbo SSIS", String.Format("  Encountered error: {0}.", e.Message), string.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }


        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        #region data class
        class OperationalRemark
        {
            public int operationalRemarkId { get; set; }
            public int tourSheetId { get; set; }
            public DateTime? startDateTime { get; set; }
            public DateTime? endDateTime { get; set; }
            public string remarkType { get; set; }
            public string remark { get; set; }
            public string remarkCode { get; set; }
            public bool activeInd { get; set; }
            public string rowCreatedBy { get; set; }
            public string rowChangedBy { get; set; }
            public DateTime? rowCreatedDate { get; set; }
            public DateTime? rowChangedDate { get; set; }
        }
        #endregion

    }
}]]></ProjectItem>
              <ProjectItem
                Name="ST_d3f5494101d84d32a8eb436117400491.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{03005D51-CB77-40C3-9458-8196EA1D83C1}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_d3f5494101d84d32a8eb436117400491</RootNamespace>
    <AssemblyName>ST_d3f5494101d84d32a8eb436117400491</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Web.Helpers, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
      <DesignTime>True</DesignTime>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\10.0\InstallDir#\devenv.exe" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_d3f5494101d84d32a8eb436117400491</msb:CodeName>
		<msb:DisplayName>ST_d3f5494101d84d32a8eb436117400491</msb:DisplayName>
		<msb:ProjectId>{02D62966-7361-4E66-9EA5-E424FA66DFAC}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_d3f5494101d84d32a8eb436117400491.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_d3f5494101d84d32a8eb436117400491.Properties.Settings.get_Default():ST_d3f5494101d84d32a8eb436117400491.Properties.Sett" +
    "ings")]

namespace ST_d3f5494101d84d32a8eb436117400491.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_d3f5494101d84d32a8eb436117400491")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_d3f5494101d84d32a8eb436117400491")]
[assembly: AssemblyCopyright("Copyright @  2019")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_d3f5494101d84d32a8eb436117400491.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_d3f5494101d84d32a8eb436117400491.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_d3f5494101d84d32a8eb436117400491.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_d3f5494101d84d32a8eb436117400491.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_d3f5494101d84d32a8eb436117400491.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_d3f5494101d84d32a8eb436117400491.dll">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
AAAEKh4CexEAAAQqIgIDfREAAAQqHgJ7EgAABCoiAgN9EgAABCoeAnsTAAAEKiICA30TAAAEKh4C
exQAAAQqIgIDfRQAAAQqHgIoDgAACiq0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMu
UmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJh
bCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRp
bWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAQlNKQgEAAQAAAAAADAAAAHY0LjAu
MzAzMTkAAAAABQBsAAAAeAkAACN+AADkCQAA+AwAACNTdHJpbmdzAAAAANwWAACUAwAAI1VTAHAa
AAAQAAAAI0dVSUQAAACAGgAA1AIAACNCbG9iAAAAAAAAAAIAAAFXHaIJCQsAAAD6JTMAFgAAAQAA
ADcAAAAGAAAAFAAAACQAAAASAAAAPgAAAAIAAAA3AAAAAwAAAAMAAAAPAAAAHAAAAAEAAAABAAAA
BgAAAAEAAAACAAAAAwAAAAAACgABAAAAAAAGANMAzAAKAO8A2gAOAE8BJgEGAGsBzAAGAIEBcAEG
ALIBnQEGAJkCzAAGAKQCzAAGAA0G8wUGADgGJgYGAE8GJgYGAGwGJgYGAIsGJgYGAKQGJgYGAL0G
JgYGANgGJgYGAPMGJgYGAAwHJgYGAEUHJQcGAGUHJQcGAJYHgwcGALMHzAAGALgHzAAGANwHJgYK
AAgI8gcKACEI8gcGADYIJQcOAFgIJgEGAKgIeggKALgIeggKANYIwggKAA0JwggGAGYJzAAGAJQJ
zAAOAKMJJgESAPwJ3AkSABQK3AkGADAKzAAGADcKzAAWAFoKTgoGAIAKZQoKAJ4KkwoKANoKkwoK
ABMLkwoKACULkwoKADQLkwoGAFYLTAsGAG8LTAsGAHwLTAsaAKoLlwsOAMILJgEGAFMMRwwGAGYM
TAsGAHMMTAsGAJMMzAAAAAAAAQAAAAAAAQABAAAAEAAyADwABQABAAEAAAEQAGsAPAAJAAMABQAB
ABAAdAB/AA0ABAAIAAMBAACjAAAAEQAGAAwAAwAQALEAAAAFAAkADAARAJEBEwARAL4BFwARAAgC
OQARADEJ3wARAG0J6gAGBjECRwBWgDkCSgBWgEECSgABAO8DRwABABQERwABADEEhgABAFAEhgAB
AG0EjgABAIkEjgABAKEEjgABAL0EkQABANgEjgABAPYEjgABABQFhgABADQFhgBQIAAAAACDGM4B
GwABAFggAAAAAJMI1AEfAAEAkSAAAAAAkwjoASQAAQCYIAAAAACTCPQBKQABAKAgAAAAAJYIGAI9
AAIAsyAAAAAAhhjOARsAAgCnIAAAAACRGFEI0AACANwgAAAAAIYALAIbAAIAlCQAAAAAhhjOARsA
AgC7IAAAAACRAOYI1AACAMAgAAAAAJEAWAnkAAYAnCQAAAAAhghJAlgABwCkJAAAAACGCGECXAAH
AK0kAAAAAIYIeQJYAAgAtSQAAAAAhgiJAlwACAC+JAAAAACGCK0CYQAJAMYkAAAAAIYIvwJqAAkA
zyQAAAAAhgjRAmEACgDXJAAAAACGCOECagAKAOAkAAAAAIYI8QJ0AAsA6CQAAAAAhggAA3gACwDx
JAAAAACGCA8DdAAMAPkkAAAAAIYIGgN4AAwAAiUAAAAAhgglA3QADQAKJQAAAACGCDQDeAANABMl
AAAAAIYIQwN9AA4AGyUAAAAAhghRA4EADgAkJQAAAACGCF8DdAAPACwlAAAAAIYIcAN4AA8ANSUA
AAAAhgiBA3QAEAA9JQAAAACGCJIDeAAQAEYlAAAAAIYIowNhABEATiUAAAAAhgi2A2oAEQBXJQAA
AACGCMkDYQASAF8lAAAAAIYI3ANqABIAaCUAAAAAhhjOARsAEwAAAAEA7QUAAAEA8QgAAAIA+AgA
AAMA/wgAAAQABgkAAAEAYwkAAAEA7QUAAAEA7QUAAAEA7QUAAAEA7QUAAAEA7QUAAAEA7QUAAAEA
7QUAAAEA7QUAAAEA7QUAAAEA7QUAAAEA7QUAAAEA7QVJAM4BeABRAM4BeABZAM4BeABhAM4BeABp
AM4BeABxAM4BeAB5AM4BeACBAM4BeACJAM4BeACRAM4BeACZAM4BXAChAM4BGwCpAM4BGwAJAM4B
GwCxAMoHqQCxAOUHsAApAM4BtQDJAM4BwQDZAM4BGwARAM4BGwDhAM4BGwARAZoJdAAZALUJ+AAZ
AQYK/gAhAR0KBAEpASYKCwExATwKDwFBAY4KFgEBAc4BJwFRAbIKLQFRAe8KNAExAQQLOwExAQsL
QgFhAR4LSAFhAUALTwFxAV0LVQGBAc4BWwGJAYcLdACJAZELGwCRAa8LawEMAM4BJwFBAbYLgQEx
Ab0LogEZAdYLrQExAQQLswExAeELjgCZAecLugGRAfcLxQFhAf4LeABhAQkMeAAxARkMWABhASQM
ygFhATYMVQGhAVwMzwGpAc4B1QGxAX4MeACxAZELGwAxAQQL3wEZAYQMXAC5AZ0MdACZAakM5QEZ
AM4BGwAIABwATgAIACAAUwApAJMAxwAuADsAlQIuAFsArAIuADMAZgIuAEMAjwIuAGMAtQIuABMA
ZgIuAAsAHAIuABsAjwIuACMAjwIuACsAjwJDAGsAUwBJAJMAxwBhAJsAUwCBAJsAUwCDAKsAUwCh
AJsAUwAhAZsAUwBAAZsAUwBBAZsAUwBgAZsAUwBhAZsAUwCAAZsAUwCBAZsAUwCgAZsAUwChAZsA
UwDAAZsAUwDBAZsAUwDgAZsAUwDhAZsAUwAAApsAUwABApsAUwAgApsAUwAhApsAUwBAApsAUwBB
ApsAUwBgApsAUwBhApsAUwCAApsAUwCBApsAUwCgApsAUwDAApsAUwDgApsAUwAAA5sAUwAgA5sA
UwBAA5sAUwBgA5sAUwCAA5sAUwCgA5sAUwDAA5sAUwDgA5sAUwAABJsAUwAgBJsAUwBABJsAUwBg
BJsAUwC8APQA7gECAAEAAwADAAYABAAAAIEBLwAAAAACNAAAACQCQgAAAFQFlAAAAGgFlAAAAHQF
mAAAAIIFmAAAAI4FoQAAAJkFoQAAAKAFoQAAAKsFpQAAALUFoQAAAMIFoQAAAM8FmAAAAN4FmAAC
AAIAAwACAAMABQABAAQABQACAAUABwABAA0ACQACAAwACQACAA4ACwABAA8ACwACABAADQABABEA
DQACABIADwABABMADwABABUAEQACABQAEQACABYAEwABABcAEwACABgAFQABABkAFQACABoAFwAB
ABsAFwACABwAGQABAB0AGQACAB4AGwABAB8AGwACACAAHQABACEAHQACACIAHwABACMAHwB4AQSA
AAABAAAAVRv7ZAAAAAAAAH8AAAAEAAAAAAAAAAAAAAABAMMAAAAAAAQAAAAAAAAAAAAAAAEAzAAA
AAAACwAAAAAAAAAAAAAACgAHAQAAAAALAAAAAAAAAAAAAAAKAL0JAAAAAAQAAAAAAAAAAAAAAAEA
QgoAAAAAAQAAAAAAAAAAAAAAYgGXCwAAAAAAAAAAAQAAALMMAAAFAAQABgAEADkAIwFRAHIBVQCc
AQAAADxNb2R1bGU+AFNUX2QzZjU0OTQxMDFkODRkMzJhOGViNDM2MTE3NDAwNDkxLmRsbABSZXNv
dXJjZXMAU1RfZDNmNTQ5NDEwMWQ4NGQzMmE4ZWI0MzYxMTc0MDA0OTEuUHJvcGVydGllcwBTZXR0
aW5ncwBTY3JpcHRNYWluAFNUX2QzZjU0OTQxMDFkODRkMzJhOGViNDM2MTE3NDAwNDkxAFNjcmlw
dFJlc3VsdHMAT3BlcmF0aW9uYWxSZW1hcmsAbXNjb3JsaWIAU3lzdGVtAE9iamVjdABTeXN0ZW0u
Q29uZmlndXJhdGlvbgBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBNaWNyb3NvZnQuU3FsU2VydmVy
LlNjcmlwdFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBWU1RB
UlRTY3JpcHRPYmplY3RNb2RlbEJhc2UARW51bQBTeXN0ZW0uUmVzb3VyY2VzAFJlc291cmNlTWFu
YWdlcgByZXNvdXJjZU1hbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBDdWx0dXJlSW5mbwByZXNvdXJj
ZUN1bHR1cmUALmN0b3IAZ2V0X1Jlc291cmNlTWFuYWdlcgBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVy
ZQBDdWx0dXJlAGRlZmF1bHRJbnN0YW5jZQBnZXRfRGVmYXVsdABEZWZhdWx0AE1haW4AdmFsdWVf
XwBTdWNjZXNzAEZhaWx1cmUAZ2V0X29wZXJhdGlvbmFsUmVtYXJrSWQAc2V0X29wZXJhdGlvbmFs
UmVtYXJrSWQAZ2V0X3RvdXJTaGVldElkAHNldF90b3VyU2hlZXRJZABOdWxsYWJsZWAxAERhdGVU
aW1lAGdldF9zdGFydERhdGVUaW1lAHNldF9zdGFydERhdGVUaW1lAGdldF9lbmREYXRlVGltZQBz
ZXRfZW5kRGF0ZVRpbWUAZ2V0X3JlbWFya1R5cGUAc2V0X3JlbWFya1R5cGUAZ2V0X3JlbWFyawBz
ZXRfcmVtYXJrAGdldF9yZW1hcmtDb2RlAHNldF9yZW1hcmtDb2RlAGdldF9hY3RpdmVJbmQAc2V0
X2FjdGl2ZUluZABnZXRfcm93Q3JlYXRlZEJ5AHNldF9yb3dDcmVhdGVkQnkAZ2V0X3Jvd0NoYW5n
ZWRCeQBzZXRfcm93Q2hhbmdlZEJ5AGdldF9yb3dDcmVhdGVkRGF0ZQBzZXRfcm93Q3JlYXRlZERh
dGUAZ2V0X3Jvd0NoYW5nZWREYXRlAHNldF9yb3dDaGFuZ2VkRGF0ZQA8b3BlcmF0aW9uYWxSZW1h
cmtJZD5rX19CYWNraW5nRmllbGQAPHRvdXJTaGVldElkPmtfX0JhY2tpbmdGaWVsZAA8c3RhcnRE
YXRlVGltZT5rX19CYWNraW5nRmllbGQAPGVuZERhdGVUaW1lPmtfX0JhY2tpbmdGaWVsZAA8cmVt
YXJrVHlwZT5rX19CYWNraW5nRmllbGQAPHJlbWFyaz5rX19CYWNraW5nRmllbGQAPHJlbWFya0Nv
ZGU+a19fQmFja2luZ0ZpZWxkADxhY3RpdmVJbmQ+a19fQmFja2luZ0ZpZWxkADxyb3dDcmVhdGVk
Qnk+a19fQmFja2luZ0ZpZWxkADxyb3dDaGFuZ2VkQnk+a19fQmFja2luZ0ZpZWxkADxyb3dDcmVh
dGVkRGF0ZT5rX19CYWNraW5nRmllbGQAPHJvd0NoYW5nZWREYXRlPmtfX0JhY2tpbmdGaWVsZABv
cGVyYXRpb25hbFJlbWFya0lkAHRvdXJTaGVldElkAHN0YXJ0RGF0ZVRpbWUAZW5kRGF0ZVRpbWUA
cmVtYXJrVHlwZQByZW1hcmsAcmVtYXJrQ29kZQBhY3RpdmVJbmQAcm93Q3JlYXRlZEJ5AHJvd0No
YW5nZWRCeQByb3dDcmVhdGVkRGF0ZQByb3dDaGFuZ2VkRGF0ZQB2YWx1ZQBTeXN0ZW0uUnVudGlt
ZS5WZXJzaW9uaW5nAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBTeXN0ZW0uUmVmbGVjdGlvbgBB
c3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUAQXNzZW1i
bHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBBc3NlbWJs
eVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAQXNzZW1ibHlUcmFk
ZW1hcmtBdHRyaWJ1dGUAQXNzZW1ibHlDdWx0dXJlQXR0cmlidXRlAEFzc2VtYmx5VmVyc2lvbkF0
dHJpYnV0ZQBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAENvbXBpbGF0aW9uUmVsYXhh
dGlvbnNBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAU3lzdGVtLkRpYWdu
b3N0aWNzAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUAVHlwZQBSdW50aW1lVHlwZUhhbmRs
ZQBHZXRUeXBlRnJvbUhhbmRsZQBBc3NlbWJseQBnZXRfQXNzZW1ibHkAU3lzdGVtLkNvbXBvbmVu
dE1vZGVsAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBDb21w
aWxlckdlbmVyYXRlZEF0dHJpYnV0ZQAuY2N0b3IAU1NJU1NjcmlwdFRhc2tFbnRyeVBvaW50QXR0
cmlidXRlAFN5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHkuWDUwOUNlcnRpZmljYXRlcwBYNTA5
Q2VydGlmaWNhdGUAWDUwOUNoYWluAFN5c3RlbS5OZXQuU2VjdXJpdHkAU3NsUG9saWN5RXJyb3Jz
ADxNYWluPmJfXzAAcGFyYW0wAHBhcmFtMQBwYXJhbTIAcGFyYW0zAFJlbW90ZUNlcnRpZmljYXRl
VmFsaWRhdGlvbkNhbGxiYWNrAENTJDw+OV9fQ2FjaGVkQW5vbnltb3VzTWV0aG9kRGVsZWdhdGUy
ADxNYWluPmJfXzEAY3QARnVuY2AyAENTJDw+OV9fQ2FjaGVkQW5vbnltb3VzTWV0aG9kRGVsZWdh
dGUzAEludDMyAFRvU3RyaW5nAFNjcmlwdE9iamVjdE1vZGVsAGdldF9EdHMATWljcm9zb2Z0LlNx
bFNlcnZlci5NYW5hZ2VkRFRTAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAVmFyaWFi
bGVzAGdldF9WYXJpYWJsZXMAVmFyaWFibGUAZ2V0X0l0ZW0AZ2V0X1ZhbHVlAFN0cmluZwBDaGFy
AFNwbGl0AFN5c3RlbS5Db3JlAFN5c3RlbS5MaW5xAEVudW1lcmFibGUAU3lzdGVtLkNvbGxlY3Rp
b25zLkdlbmVyaWMASUVudW1lcmFibGVgMQBMYXN0AFN5c3RlbS5OZXQAU2VydmljZVBvaW50TWFu
YWdlcgBzZXRfU2VydmVyQ2VydGlmaWNhdGVWYWxpZGF0aW9uQ2FsbGJhY2sAU2VjdXJpdHlQcm90
b2NvbFR5cGUAc2V0X1NlY3VyaXR5UHJvdG9jb2wARm9ybWF0AFJlcGxhY2UAV2ViUmVxdWVzdABD
cmVhdGUASHR0cFdlYlJlcXVlc3QAV2ViUmVzcG9uc2UAR2V0UmVzcG9uc2UAU3lzdGVtLklPAFN0
cmVhbQBHZXRSZXNwb25zZVN0cmVhbQBTdHJlYW1SZWFkZXIAVGV4dFJlYWRlcgBSZWFkVG9FbmQA
Q2xvc2UAU3lzdGVtLldlYi5IZWxwZXJzAEpzb24ARGVjb2RlAFNlbGVjdABKb2luAEV2ZW50c09i
amVjdFdyYXBwZXIAZ2V0X0V2ZW50cwBFbXB0eQBGaXJlSW5mb3JtYXRpb24ARW5jb2RlAHNldF9N
ZXRob2QAc2V0X0NvbnRlbnRUeXBlAGdldF9MZW5ndGgAc2V0X0NvbnRlbnRMZW5ndGgAR2V0UmVx
dWVzdFN0cmVhbQBTeXN0ZW0uVGV4dABFbmNvZGluZwBnZXRfQVNDSUkAU3RyZWFtV3JpdGVyAFRl
eHRXcml0ZXIAV3JpdGUAc2V0X1Rhc2tSZXN1bHQARXhjZXB0aW9uAGdldF9NZXNzYWdlAEZpcmVF
cnJvcgBTVF9kM2Y1NDk0MTAxZDg0ZDMyYThlYjQzNjExNzQwMDQ5MS5Qcm9wZXJ0aWVzLlJlc291
cmNlcy5yZXNvdXJjZXMAAAAAcVMAVABfAGQAMwBmADUANAA5ADQAMQAwADEAZAA4ADQAZAAzADIA
YQA4AGUAYgA0ADMANgAxADEANwA0ADAAMAA0ADkAMQAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBS
AGUAcwBvAHUAcgBjAGUAcwAAIVUAcwBlAHIAOgA6AGkAbgB0AFcAZQBsAGwASQBkADIAACdVAHMA
ZQByADoAOgBzAHQAcgBTAGUAcgB2AGUAcgBOAGEAbQBlAAAfVQBzAGUAcgA6ADoAcwB0AHIAQQBw
AGkASwBlAHkAACVVAHMAZQByADoAOgBzAHQAcgBBAGMAYwBlAHMAcwBLAGUAeQAAIVMAeQBzAHQA
ZQBtADoAOgBVAHMAZQByAE4AYQBtAGUAAICLaAB0AHQAcABzADoALwAvAHsAMAB9AC8AYQBwAGkA
LwBvAHAAZQByAGEAdABpAG8AbgBhAGwAUgBlAG0AYQByAGsAPwB3AGUAbABsAEkAZAA9AHsAMQB9
ACYAYQBwAGkAawBlAHkAPQB7ADIAfQAmAGEAYwBjAGUAcwBzAGsAZQB5AD0AewAzAH0AAAMgAAAH
JQAyADAAAAMkAAAHJQAyADQAAAMsAAAVRwB1AG0AYgBvACAAUwBTAEkAUwAAY0YAbwByACAAdwBl
AGwAbAAgAGkAZAAgAHsAMAB9ACAAZABlAGwAZQB0AGkAbgBnACAAewAxAH0AIABvAHAAZQByAGEA
dABpAG8AbgBhAGwAIAByAGUAbQBhAHIAawBzAC4AAH1oAHQAdABwAHMAOgAvAC8AewAwAH0ALwBh
AHAAaQAvAG8AcABlAHIAYQB0AGkAbwBuAGEAbABSAGUAbQBhAHIAawAvAHsAMQB9AD8AYQBwAGkA
awBlAHkAPQB7ADIAfQAmAGEAYwBjAGUAcwBzAGsAZQB5AD0AewAzAH0AAA1EAEUATABFAFQARQAA
IWEAcABwAGwAaQBjAGEAdABpAG8AbgAvAGoAcwBvAG4AAEMgAEQAZQBsAGUAdABlAGQAIAB7ADAA
fQAgAG8AcABlAHIAYQB0AGkAbwBuAGEAbAAgAHIAZQBtAGEAcgBrAHMALgAAI0QAbwBuAGUAIAB3
AGUAbABsACAAaQBkACAAewAwAH0ALgAAMyAAIABFAG4AYwBvAHUAbgB0AGUAcgBlAGQAIABlAHIA
cgBvAHIAOgAgAHsAMAB9AC4AAAAAT0UhTclo6EKCmiJtOfJ6TwAIt3pcVhk04IkIiYRdzYCAzJED
BhIVAwYSGQMgAAEEAAASFQQAABIZBQABARIZBAgAEhUECAASGQMGEgwEAAASDAQIABIMAgYIAwYR
FAQAAAAABAEAAAADIAAIBCABAQgIIAAVER0BESEJIAEBFREdAREhAyAADgQgAQEOAyAAAgQgAQEC
BwYVER0BESECBg4CBgIDKAAICCgAFREdAREhAygADgMoAAIGAAESWRFdBCAAEmEGIAIBDhJhBAcB
EhUFIAEBEWkIAQACAAAAAAADAAABCgAEAhwSdRJ5EX0EBhKAgQUAAQ4SGAkGFRKAhQISGA4DBwEI
BSAAEoCNBSAAEoCRBiABEoCVHAMgABwGIAEdDh0DDBABAR4AFRKApQEeAAMKAQ4FIAIBHBgGAAEB
EoCBBgABARGArQYAAg4OHRwFIAIODg4GAAESgLEOBSAAEoC5BSAAEoC9BiABARKAvQgxvzhWrTZO
NQYQAQEeAA4FCgEdEhgIFRKAhQISGA4aEAICFRKApQEeARUSgKUBHgAVEoCFAh4AHgEFCgISGA4K
AAIODhUSgKUBDgUgABKAzQYAAw4OHBwKIAYBCA4ODggQAgQAAQ4cBCABAQoFAAASgNEJIAIBEoC9
EoDRBQACDg4cCCAFAggODg4ILQcXCAIODg4ODhKAtRKAuRKAvRKAwQ4dEhgIEhgOEoDVEoDdHQMd
HB0SGAgdHEkBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuNQEAVA4URnJhbWV3b3JrRGlzcGxh
eU5hbWUSLk5FVCBGcmFtZXdvcmsgNC41KAEAI1NUX2QzZjU0OTQxMDFkODRkMzJhOGViNDM2MTE3
NDAwNDkxAAAFAQAAAAAWAQARQ29weXJpZ2h0IEAgIDIwMTkAAAgBAAgAAAAAAB4BAAEAVAIWV3Jh
cE5vbkV4Y2VwdGlvblRocm93cwGkQwAAAAAAAAAAAAC+QwAAACAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAsEMAAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAA
ABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYYAAA
sAMAAAAAAAAAAAAAsAM0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4A
AAEAAAABAPtkVRsAAAEA+2RVGz8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEA
cgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACw
BBADAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAOwCAAABADAAMAAwADAAMAA0AGIA
MAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQAXwBkADMAZgA1
ADQAOQA0ADEAMAAxAGQAOAA0AGQAMwAyAGEAOABlAGIANAAzADYAMQAxADcANAAwADAANAA5ADEA
AABAAA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANgA5ADkANwAuADIANQA4
ADUAMQAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwBkADMAZgA1ADQA
OQA0ADEAMAAxAGQAOAA0AGQAMwAyAGEAOABlAGIANAAzADYAMQAxADcANAAwADAANAA5ADEALgBk
AGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcA
aAB0ACAAQAAgACAAMgAwADEAOQAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBt
AGUAAABTAFQAXwBkADMAZgA1ADQAOQA0ADEAMAAxAGQAOAA0AGQAMwAyAGEAOABlAGIANAAzADYA
MQAxADcANAAwADAANAA5ADEALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAA
AAAAUwBUAF8AZAAzAGYANQA0ADkANAAxADAAMQBkADgANABkADMAMgBhADgAZQBiADQAMwA2ADEA
MQA3ADQAMAAwADQAOQAxAAAARAAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAu
ADAALgA2ADkAOQA3AC4AMgA1ADgANQAxAAAAAABIAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUA
cgBzAGkAbwBuAAAAMQAuADAALgA2ADkAOQA3AC4AMgA1ADgANQAxAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAADAAAANAzAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:ForEachVariableMappings>
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{80669BAE-E1BC-4CA7-B3B8-5E70955180F0}"
          DTS:ObjectName="{80669BAE-E1BC-4CA7-B3B8-5E70955180F0}"
          DTS:ValueIndex="0"
          DTS:VariableName="User::intWellId2" />
      </DTS:ForEachVariableMappings>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Log Variables"
      DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:Description="Script Task"
      DTS:DTSID="{5B0867C2-635D-4B6B-8B7C-38D517CAE5ED}"
      DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:LocaleID="-1"
      DTS:ObjectName="Log Variables"
      DTS:ThreadHint="1">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_75391eadaecb4ba2b5c8ae86a3ea930a"
          VSTAMajorVersion="3"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="System::ContainerStartTime,System::CreationName,System::LocaleID,System::ParentContainerGUID,System::TaskID,System::TaskName,System::TaskTransactionOption,User::boolActiveInd,User::boolActiveIndForComponent,User::boolActiveIndForDrillingAssembly,User::boolActiveIndForFormation,User::boolActiveIndForRemark,User::boolActiveIndForTourSheet,User::boolActiveIndForTrippingSpeed,User::boolIsBitInCasing,User::boolIsChildWell,User::boolIsCrewHandlingBHA,System::CancelEvent,System::CreationDate,System::CreatorComputerName,System::CreatorName,User::dblActiveDeltaBitDepth,User::dblActiveDeltaBlockHeight,User::dblActiveDistanceTravelled,User::dblActiveTime,User::dblAvgReamCirculateConditionTime,User::dblAvgStoSConnectTime,User::dblAvgSurveyTime,User::dblAvgWtoWConnectTime,User::dblCalculatedLength,User::dblCalculatedWeight,User::dblFromBitDepth,User::dblLatitude,User::dblLongitude,User::dblToBitDepth,System::ExecutionInstanceGUID,System::FailedConfigurations,System::IgnoreConfigurationsOnLoad,User::intAssemblyRefNumber,User::intComponentCount,User::intComponentSeqNo,User::intCustomerID,User::intCustomerIdForTourSheet,User::intCustomerIdForWell,System::InteractiveMode,User::intFromDepth,User::intHoursBack,User::intNumberOfConnections,User::intParentCustomerID,User::intPeriodObsNo,User::intRigId,User::intRigIdForWell,User::intToDepth,User::intWellConnectTimeId,User::intWellDrillAssemblyCompId,User::intWellDrillAssemblyId,User::intWellDrillAssemblyIdForComponent,User::intWellDrillBitPeriodId,User::intWellDrillPeriodId,User::intWellDrillPeriodIdForDrillingAssembly,User::intWellDrillPeriodIdForFormation,User::intWellDrillPeriodIdForRemark,User::intWellDrillPeriodRemarkId,User::intWellId,User::intWellId2,User::intWellIdForConnectTime,User::intWellIdForTourSheet,User::intWellIdForTrippingSpeed,User::intWellTrippingSpeedId,System::LastModifiedProductVersion,System::MachineName,User::objComponentLength,User::objConnectTimeList,User::objCustomerList,User::objDrillAssemblyCompList,User::objDrillerNames,User::objDrillingAssemblyList,User::objEffectiveDate,User::objEndDateTime,User::objEndDateTimeForFormation,User::objExpiryDate,User::objFormationList,User::objFromDateTime,User::objFromDateTimeForTrippingSpeed,User::objJobNum,User::objMaxOutsideDiameter,User::objMinInsideDiameter,User::objRemark,User::objRemarkForConnectTime,User::objRemarkType,User::objRigId,User::objRigIdForWell,User::objRigList,User::objRigReleaseDate,User::objSpudDate,User::objStartDateTime,User::objStartDateTimeForFormation,User::objToDateTime,User::objToDateTimeForTrippingSpeed,User::objTourSheetList,User::objTourSheetRemarkList,User::objTrippingSpeedList,User::objUwi,User::objWellList,User::objWellList2,User::objWellNum,System::OfflineMode,System::PackageID,System::PackageName,System::ProductVersion,System::ServerExecutionID,System::StartTime,User::strAccessKey,User::strActivityDescription,User::strActivityDescriptionForTrippingSpeed,User::strApiKey,User::strBGConnectionString,User::strComponentDesc,User::strContractorRepName,User::strConvertedTimeZone,User::strCountry,User::strCustomerName,User::strDrillerNamesForTrippingSpeed,User::strEnv,User::strFormationName,User::strListOfValidWapIds,User::strLogFilePath,User::strOperatorRepName,User::strProvinceState,User::strRemark,User::strRemarkForTrippingSpeed,User::strReportedRigName,User::strRigName,User::strServerName,User::strSinglesOrStands,User::strSinglesOrStandsForTrippingSpeed,User::strTimeZone,User::strWellName,System::UserName,System::VersionBuild,System::VersionComments,System::VersionGUID,System::VersionMajor,System::VersionMinor">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion

namespace ST_75391eadaecb4ba2b5c8ae86a3ea930a
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            bool fireAgain = false;
			// TODO: Add your code here
            foreach (var v in Dts.Variables)
            {
                Dts.Events.FireInformation(0, "Gumbo SSIS", string.Format("{0}: {1}", v.Name, v.Value), string.Empty, 0, ref fireAgain);
            }
			Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="ST_75391eadaecb4ba2b5c8ae86a3ea930a.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{D4D3DBCD-9D15-4869-8A3A-D3CA1EFCCA64}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_75391eadaecb4ba2b5c8ae86a3ea930a</RootNamespace>
    <AssemblyName>ST_75391eadaecb4ba2b5c8ae86a3ea930a</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\10.0\InstallDir#\devenv.exe" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_75391eadaecb4ba2b5c8ae86a3ea930a</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_75391eadaecb4ba2b5c8ae86a3ea930a</msb:DisplayName>
		<msb:ProjectId>{EB4E3D0B-CF74-42A1-9171-BC7D208E4F1F}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_75391eadaecb4ba2b5c8ae86a3ea930a.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_75391eadaecb4ba2b5c8ae86a3ea930a.Properties.Settings.get_Default():ST_75391eadaecb4ba2b5c8ae86a3ea930a.Properties.Sett" +
    "ings")]

namespace ST_75391eadaecb4ba2b5c8ae86a3ea930a.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_75391eadaecb4ba2b5c8ae86a3ea930a")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_75391eadaecb4ba2b5c8ae86a3ea930a")]
[assembly: AssemblyCopyright("Copyright @  2019")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_75391eadaecb4ba2b5c8ae86a3ea930a.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_75391eadaecb4ba2b5c8ae86a3ea930a.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_75391eadaecb4ba2b5c8ae86a3ea930a.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_75391eadaecb4ba2b5c8ae86a3ea930a.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_75391eadaecb4ba2b5c8ae86a3ea930a.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_75391eadaecb4ba2b5c8ae86a3ea930a.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDACqMAl0AAAAAAAAAAOAAAiELAQsAABAAAAAIAAAAAAAADi8A
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAALguAABTAAAAAEAAAAgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAFA8AAAAgAAAAEAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAAgEAAAAQAAAAAYAAAASAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAGAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAADw
LgAAAAAAAEgAAAACAAUA8CEAAMgMAAABAAAAAAAAADghAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKA4AAAoqEzACAC0AAAABAAARfgEAAAQtIHIBAABw0AIA
AAIoDwAACm8QAAAKcxEAAAoKBoABAAAEfgEAAAQqGn4CAAAEKh4CgAIAAAQqGn4DAAAEKi5zBgAA
BoADAAAEKh4CKBQAAAoqABMwBwBlAAAAAgAAERYKAigWAAAKbxcAAApvGAAACgwrOwhvGQAACgsC
KBYAAApvGgAAChZycwAAcHKJAABwB28bAAAKB28cAAAKKB0AAAp+HgAAChYSAG8fAAAKCG8gAAAK
Lb0CKBYAAAoWbyEAAAoqHgIoIgAACioAAAC0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJj
ZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1
dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1
bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAQlNKQgEAAQAAAAAADAAAAHY0
LjAuMzAzMTkAAAAABQBsAAAA/AMAACN+AABoBAAALAYAACNTdHJpbmdzAAAAAJQKAACcAAAAI1VT
ADALAAAQAAAAI0dVSUQAAABACwAAiAEAACNCbG9iAAAAAAAAAAIAAAFXHaIBCQMAAAD6JTMAFgAA
AQAAACEAAAAFAAAABgAAAAkAAAABAAAAIgAAAAIAAAAPAAAAAgAAAAIAAAADAAAABAAAAAEAAAAE
AAAAAQAAAAEAAAAAAAoAAQAAAAAABgDBALoACgDdAMgADgA9ARQBBgBZAboABgBvAV4BBgCgAYsB
BgBXAj0CBgCCAnACBgCZAnACBgC2AnACBgDVAnACBgDuAnACBgAHA3ACBgAiA3ACBgA9A3ACBgBW
A3ACBgCPA28DBgCvA28DBgDgA80DBgD9A7oABgACBLoABgAmBHACCgBSBDwECgBrBDwEBgCABG8D
DgCiBBQBDgDEBBQBEgAdBf0EEgA1Bf0EEgBWBf0EDgBrBRQBBgCdBboAEgDBBf0EAAAAAAEAAAAA
AAEAAQAAABAAMgA8AAUAAQABAAABEABrADwACQADAAUAAQAQAHQAfwANAAQACAADAQAAowAAABEA
BAAKABEAfwETABEArAEXABEA9gE5AAYGHwJHAFaAJwJKAFaALwJKAFAgAAAAAIMYvAEbAAEAWCAA
AAAAkwjCAR8AAQCRIAAAAACTCNYBJAABAJggAAAAAJMI4gEpAAEAoCAAAAAAlggGAj0AAgCzIAAA
AACGGLwBGwACAKcgAAAAAJEYmwSJAAIAvCAAAAAAhgAaAhsAAgAtIQAAAACGGLwBGwACAAAAAQA3
AjkAvAFYAEEAvAFYAEkAvAFYAFEAvAFYAFkAvAFYAGEAvAFYAGkAvAFYAHEAvAFYAHkAvAFYAIEA
vAFYAIkAvAFdAJEAvAEbAJkAvAEbAAkAvAEbAKEAFARiAKEALwRpACkAvAFuALkAvAF6AMkAvAEb
ABEAvAEbANEAvAEbABkA1gSNANkAJwWSAOEASAWXAOkAXwWcANkAfwWhAPEAigWmAPEAkwWqAAEB
pAWuAAEBqwW1APkAsQW4AAkBzwXDANkA2AVdABkAvAEbAAgAFABOAAgAGABTACkAkwCAAC4AGwBA
AS4AIwBAAS4AYwBmAS4ACwDPAC4AEwAXAS4AMwAXAS4AKwBAAS4AOwBGAS4AQwBAAS4AWwBdAUMA
awBTAEkAkwCAAGEAmwBTAIMAqwBTAHUAxwACAAEAAwADAAAAbwEvAAAA7gE0AAAAEgJCAAIAAgAD
AAIAAwAFAAEABAAFAAIABQAHAASAAAABAAAAvxvdSwAAAAAAAH8AAAAEAAAAAAAAAAAAAAABALEA
AAAAAAQAAAAAAAAAAAAAAAEAugAAAAAACwAAAAAAAAAAAAAACgD1AAAAAAALAAAAAAAAAAAAAAAK
AN4EAAAAAAAAAAABAAAA5wUAAAUABAAAAAAAADxNb2R1bGU+AFNUXzc1MzkxZWFkYWVjYjRiYTJi
NWM4YWU4NmEzZWE5MzBhLmRsbABSZXNvdXJjZXMAU1RfNzUzOTFlYWRhZWNiNGJhMmI1YzhhZTg2
YTNlYTkzMGEuUHJvcGVydGllcwBTZXR0aW5ncwBTY3JpcHRNYWluAFNUXzc1MzkxZWFkYWVjYjRi
YTJiNWM4YWU4NmEzZWE5MzBhAFNjcmlwdFJlc3VsdHMAbXNjb3JsaWIAU3lzdGVtAE9iamVjdABT
eXN0ZW0uQ29uZmlndXJhdGlvbgBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBNaWNyb3NvZnQuU3Fs
U2VydmVyLlNjcmlwdFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFz
awBWU1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UARW51bQBTeXN0ZW0uUmVzb3VyY2VzAFJlc291
cmNlTWFuYWdlcgByZXNvdXJjZU1hbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBDdWx0dXJlSW5mbwBy
ZXNvdXJjZUN1bHR1cmUALmN0b3IAZ2V0X1Jlc291cmNlTWFuYWdlcgBnZXRfQ3VsdHVyZQBzZXRf
Q3VsdHVyZQBDdWx0dXJlAGRlZmF1bHRJbnN0YW5jZQBnZXRfRGVmYXVsdABEZWZhdWx0AE1haW4A
dmFsdWVfXwBTdWNjZXNzAEZhaWx1cmUAdmFsdWUAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBU
YXJnZXRGcmFtZXdvcmtBdHRyaWJ1dGUAU3lzdGVtLlJlZmxlY3Rpb24AQXNzZW1ibHlUaXRsZUF0
dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlv
bkF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmli
dXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRl
AEFzc2VtYmx5Q3VsdHVyZUF0dHJpYnV0ZQBBc3NlbWJseVZlcnNpb25BdHRyaWJ1dGUAU3lzdGVt
LlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRl
AFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAFN5c3RlbS5EaWFnbm9zdGljcwBEZWJ1Z2dl
ck5vblVzZXJDb2RlQXR0cmlidXRlAFR5cGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21I
YW5kbGUAQXNzZW1ibHkAZ2V0X0Fzc2VtYmx5AFN5c3RlbS5Db21wb25lbnRNb2RlbABFZGl0b3JC
cm93c2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlU3RhdGUAQ29tcGlsZXJHZW5lcmF0ZWRB
dHRyaWJ1dGUALmNjdG9yAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBTY3JpcHRP
YmplY3RNb2RlbABnZXRfRHRzAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwBNaWNyb3Nv
ZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lAFZhcmlhYmxlcwBnZXRfVmFyaWFibGVzAFZhcmlhYmxl
RW51bWVyYXRvcgBHZXRFbnVtZXJhdG9yAFZhcmlhYmxlAGdldF9DdXJyZW50AEV2ZW50c09iamVj
dFdyYXBwZXIAZ2V0X0V2ZW50cwBnZXRfTmFtZQBnZXRfVmFsdWUAU3RyaW5nAEZvcm1hdABFbXB0
eQBGaXJlSW5mb3JtYXRpb24ARHRzRW51bWVyYXRvcgBNb3ZlTmV4dABzZXRfVGFza1Jlc3VsdABT
VF83NTM5MWVhZGFlY2I0YmEyYjVjOGFlODZhM2VhOTMwYS5Qcm9wZXJ0aWVzLlJlc291cmNlcy5y
ZXNvdXJjZXMAAAAAcVMAVABfADcANQAzADkAMQBlAGEAZABhAGUAYwBiADQAYgBhADIAYgA1AGMA
OABhAGUAOAA2AGEAMwBlAGEAOQAzADAAYQAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBv
AHUAcgBjAGUAcwAAFUcAdQBtAGIAbwAgAFMAUwBJAFMAABF7ADAAfQA6ACAAewAxAH0AAADQ0oZp
Gh/pQrV00Yf2vydeAAi3elxWGTTgiQiJhF3NgIDMkQMGEhUDBhIZAyAAAQQAABIVBAAAEhkFAAEB
EhkECAASFQQIABIZAwYSDAQAABIMBAgAEgwCBggDBhEUBAAAAAAEAQAAAAQgAQEOBCABAQgGAAES
URFVBCAAElkGIAIBDhJZBAcBEhUFIAEBEWEIAQACAAAAAAADAAABBCAAEm0EIAAScQQgABJ1BCAA
EnkEIAASfQMgAA4DIAAcBgADDg4cHAIGDgogBgEIDg4OCBACAyAAAgcHAwISeRJ1RwEAGi5ORVRG
cmFtZXdvcmssVmVyc2lvbj12NC4wAQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRAuTkVUIEZyYW1l
d29yayA0KAEAI1NUXzc1MzkxZWFkYWVjYjRiYTJiNWM4YWU4NmEzZWE5MzBhAAAFAQAAAAAWAQAR
Q29weXJpZ2h0IEAgIDIwMTkAAAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93
cwEAAADgLgAAAAAAAAAAAAD+LgAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8C4AAAAAAAAAAAAA
AAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAA
AABIAAAAWEAAALADAAAAAAAAAAAAALADNAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBP
AAAAAAC9BO/+AAABAAAAAQDdS78bAAABAN1Lvxs/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAA
RAAAAAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBv
AG4AAAAAAAAAsAQQAwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAADsAgAAAQAwADAA
MAAwADAANABiADAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBU
AF8ANwA1ADMAOQAxAGUAYQBkAGEAZQBjAGIANABiAGEAMgBiADUAYwA4AGEAZQA4ADYAYQAzAGUA
YQA5ADMAMABhAAAAQAAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADcAMQAw
ADMALgAxADkANAAyADEAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8A
NwA1ADMAOQAxAGUAYQBkAGEAZQBjAGIANABiAGEAMgBiADUAYwA4AGEAZQA4ADYAYQAzAGUAYQA5
ADMAMABhAC4AZABsAGwAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8A
cAB5AHIAaQBnAGgAdAAgAEAAIAAgADIAMAAxADkAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBp
AGwAZQBuAGEAbQBlAAAAUwBUAF8ANwA1ADMAOQAxAGUAYQBkAGEAZQBjAGIANABiAGEAMgBiADUA
YwA4AGEAZQA4ADYAYQAzAGUAYQA5ADMAMABhAC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0
AE4AYQBtAGUAAAAAAFMAVABfADcANQAzADkAMQBlAGEAZABhAGUAYwBiADQAYgBhADIAYgA1AGMA
OABhAGUAOAA2AGEAMwBlAGEAOQAzADAAYQAAAEQADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBp
AG8AbgAAADEALgAwAC4ANwAxADAAMwAuADEAOQA0ADIAMQAAAAAASAAPAAEAQQBzAHMAZQBtAGIA
bAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANwAxADAAMwAuADEAOQA0ADIAMQAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAwAAAAQPwAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Well Loop"
      DTS:CreationName="STOCK:FOREACHLOOP"
      DTS:Description="Foreach Loop Container"
      DTS:DTSID="{abca8113-8c8c-467b-9015-d6f05e3ffb82}"
      DTS:ExecutableType="STOCK:FOREACHLOOP"
      DTS:LocaleID="-1"
      DTS:MaxErrorCount="6"
      DTS:ObjectName="Well Loop">
      <DTS:ForEachEnumerator
        DTS:CreationName="Microsoft.SqlServer.Dts.Runtime.Enumerators.ADO.ForEachADOEnumerator, Microsoft.SqlServer.ForEachADOEnumerator, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
        DTS:DTSID="{a6701818-159e-4e66-8cee-259e2f2777dc}"
        DTS:ObjectName="{4F357A1D-CA44-434A-8085-25C4D1BB103C}">
        <DTS:ObjectData>
          <FEEADO
            EnumType="EnumerateRowsInFirstTable"
            VarName="User::objWellList" />
        </DTS:ObjectData>
      </DTS:ForEachEnumerator>
      <DTS:Variables>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{EAA3642E-780B-48F0-A026-E02F50EE0D21}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="User"
          DTS:ObjectName="intMaxConnectTimeId">
          <DTS:VariableValue
            DTS:DataType="3">0</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{FC0E84D2-9D20-4B01-BCD0-C77DCAADA80B}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="User"
          DTS:ObjectName="intMaxTrippingSpeedId">
          <DTS:VariableValue
            DTS:DataType="3">0</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{B2783E83-269F-45FB-A824-A45024B34B29}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="User"
          DTS:ObjectName="intMaxWdpId">
          <DTS:VariableValue
            DTS:DataType="3">0</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{797A76D2-9189-4DB2-91D9-F6EAAF5ED487}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="User"
          DTS:ObjectName="intMaxWellEdrId">
          <DTS:VariableValue
            DTS:DataType="3">0</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{0029C2A0-88DB-4A79-848E-90E2B411F9F3}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="User"
          DTS:ObjectName="intMinConnectTimeId">
          <DTS:VariableValue
            DTS:DataType="3">0</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{6AD75F09-8A8A-47A2-B4CA-B86A879E48BF}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="User"
          DTS:ObjectName="intMinTrippingSpeedId">
          <DTS:VariableValue
            DTS:DataType="3">0</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{FE5F345D-F85A-442C-86BA-6AB4A9882F1B}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="User"
          DTS:ObjectName="intMinWdpId">
          <DTS:VariableValue
            DTS:DataType="3">0</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{441A4C00-AAC0-4B51-A9FB-F6F9A19B2443}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="User"
          DTS:ObjectName="intMinWellEdrId">
          <DTS:VariableValue
            DTS:DataType="3">0</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{DF28BD14-6601-4F9D-9F20-318C6B2C3CBE}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="User"
          DTS:ObjectName="intRigIdForWellActivityPeriod">
          <DTS:VariableValue
            DTS:DataType="3">0</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{8CC26B80-4A3E-4361-9572-90344C4E2A52}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="User"
          DTS:ObjectName="intWellActivityPeriodId">
          <DTS:VariableValue
            DTS:DataType="3">0</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{BF375A5E-3F5E-42FA-9C63-B8CA855220A1}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="User"
          DTS:ObjectName="intWellIdForWellActivityPeriod">
          <DTS:VariableValue
            DTS:DataType="3">0</DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{5A326020-F372-4DDB-A193-17FF15B19260}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="User"
          DTS:ObjectName="objEndDateTimeForWellActivityPeriod">
          <DTS:VariableValue
            DTS:DataSubType="ManagedSerializable"
            DTS:DataType="13">
            <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
              <SOAP-ENV:Body>
                <xsd:anyType
                  id="ref-1"></xsd:anyType>
              </SOAP-ENV:Body>
            </SOAP-ENV:Envelope>
          </DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{6CC54F5C-D955-46F4-BFA3-697D60DF261F}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="User"
          DTS:ObjectName="objMinMacConnectTimesResultSet">
          <DTS:VariableValue
            DTS:DataSubType="ManagedSerializable"
            DTS:DataType="13">
            <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
              <SOAP-ENV:Body>
                <xsd:anyType
                  id="ref-1"></xsd:anyType>
              </SOAP-ENV:Body>
            </SOAP-ENV:Envelope>
          </DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{1901F4A9-B7AC-48DF-AAF8-21934192FC88}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="User"
          DTS:ObjectName="objMinMaxConnectTimeIdResultSet">
          <DTS:VariableValue
            DTS:DataSubType="ManagedSerializable"
            DTS:DataType="13">
            <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
              <SOAP-ENV:Body>
                <xsd:anyType
                  id="ref-1"></xsd:anyType>
              </SOAP-ENV:Body>
            </SOAP-ENV:Envelope>
          </DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{588D452A-550C-4D38-97D3-061A8B825681}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="User"
          DTS:ObjectName="objMinMaxEdrResultSet">
          <DTS:VariableValue
            DTS:DataSubType="ManagedSerializable"
            DTS:DataType="13">
            <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
              <SOAP-ENV:Body>
                <xsd:anyType
                  id="ref-1"></xsd:anyType>
              </SOAP-ENV:Body>
            </SOAP-ENV:Envelope>
          </DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{71989A9C-013B-48D9-9042-915E3FEA6BB9}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="User"
          DTS:ObjectName="objMinMaxTrippingSpeedResultSet">
          <DTS:VariableValue
            DTS:DataSubType="ManagedSerializable"
            DTS:DataType="13">
            <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
              <SOAP-ENV:Body>
                <xsd:anyType
                  id="ref-1"></xsd:anyType>
              </SOAP-ENV:Body>
            </SOAP-ENV:Envelope>
          </DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{6228ED4F-C487-4B85-9C14-B04EBDBA9C27}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="User"
          DTS:ObjectName="objStartDateTimeForWellActivityPeriod">
          <DTS:VariableValue
            DTS:DataSubType="ManagedSerializable"
            DTS:DataType="13">
            <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
              <SOAP-ENV:Body>
                <xsd:anyType
                  id="ref-1"></xsd:anyType>
              </SOAP-ENV:Body>
            </SOAP-ENV:Envelope>
          </DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{D43FD086-F813-4CF8-849E-900B9D753766}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="User"
          DTS:ObjectName="objWellActivityPeriodList">
          <DTS:VariableValue
            DTS:DataSubType="ManagedSerializable"
            DTS:DataType="13">
            <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
              <SOAP-ENV:Body>
                <xsd:anyType
                  id="ref-1"></xsd:anyType>
              </SOAP-ENV:Body>
            </SOAP-ENV:Envelope>
          </DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{C4CCD8D2-E486-4D37-9179-1CDA8A03CE7A}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="strBitDepthUom">
          <DTS:VariableValue
            DTS:DataType="8"
            xml:space="preserve"></DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{A411E37D-A8C2-4B89-8138-990E34C3DC17}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="strBitDepthUomForConnectTimes">
          <DTS:VariableValue
            DTS:DataType="8"
            xml:space="preserve"></DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{062A560C-9750-4283-9E26-050B68E70FA1}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="strBlockHeightUom">
          <DTS:VariableValue
            DTS:DataType="8"
            xml:space="preserve"></DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{C0A7A80F-479C-4AE5-841C-CFC505664BB8}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="strRemarkCodeForOperationalRemark">
          <DTS:VariableValue
            DTS:DataType="8"
            xml:space="preserve"></DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{24B78196-CF46-40A7-9C77-34E2E340F233}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="strRemarkTypeForTrippingSpeed">
          <DTS:VariableValue
            DTS:DataType="8"
            xml:space="preserve"></DTS:VariableValue>
        </DTS:Variable>
        <DTS:Variable
          DTS:CreationName=""
          DTS:DTSID="{E64534C5-4166-4C07-B305-19A9B2F814D0}"
          DTS:IncludeInDebugDump="2345"
          DTS:Namespace="User"
          DTS:ObjectName="strRemarkTypeForTrippingSpeeds">
          <DTS:VariableValue
            DTS:DataType="8"
            xml:space="preserve"></DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Well Loop\BlackGold Connect Time Min Max ID Query"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Get Wells"
          DTS:DTSID="{0142aadc-5758-4637-b04d-188a645ddb2d}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="BlackGold Connect Time Min Max ID Query"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="1">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{B09DFF4B-1666-40D6-850C-21EC437987D1}"
              SQLTask:BypassPrepare="False"
              SQLTask:SqlStatementSource="declare @wellId int = ?;&#xA;select&#xA;iif(minWellConnectionDetailId is null, 0, minWellConnectionDetailId) as minWellConnectId,&#xA;iif(maxWellConnectionDetailId is null, 0, maxWellConnectionDetailId) as maxWellConnectId&#xA;from&#xA;(&#xA;select min(WellConnectionDetailId) as minWellConnectionDetailId, max(WellConnectionDetailId) as maxWellConnectionDetailId&#xA;from&#xA;r.WellConnectionDetails&#xA;where Well_WellId = @wellId) qry;"
              SQLTask:ResultType="ResultSetType_Rowset" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ResultBinding
                SQLTask:ResultName="0"
                SQLTask:DtsVariableName="User::objMinMaxConnectTimeIdResultSet" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="User::intWellId"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Well Loop\BlackGold Connect Times Query"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Get Wells"
          DTS:DTSID="{7eacddc8-c068-40c8-9037-e6deed407a27}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="BlackGold Connect Times Query"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="1">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{B09DFF4B-1666-40D6-850C-21EC437987D1}"
              SQLTask:BypassPrepare="False"
              SQLTask:SqlStatementSource="declare @wellId int = ?;&#xA;select &#xA;WellConnectionDetailId as WellConnectId, &#xA;WellConnectionDetails.Well_wellId, &#xA;convert(varchar(50), DateTimeStart, 121), &#xA;convert(varchar(50), dateadd(minute,StoSConnectTime,DateTimeStart), 121),&#xA;iif(WellConnectionDetails.holedepth is null, 0, cast(WellConnectionDetails.holedepth as int)), &#xA;iif(WellConnectionDetails.holedepth is null, 0, cast(WellConnectionDetails.holedepth as int)), &#xA;'',&#xA;WellConnectionDetails.drillernames, &#xA;'',&#xA;1,&#xA;WellConnectionDetails.WtoWConnectTime, &#xA;WellConnectionDetails.StoSConnectTime, &#xA;WellConnectionDetails.ReamCCTime, &#xA;WellConnectionDetails.SurveyTime, &#xA;'',&#xA;uoms.BitDepth as BitDepthUom&#xA;from r.WellConnectionDetails&#xA;inner join WellUOMForEDR uoms on WellConnectionDetails.well_wellid = uoms.well_wellid and uoms.ActiveInd = 1&#xA;where WellConnectionDetails.well_wellid = @wellId;"
              SQLTask:ResultType="ResultSetType_Rowset" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ResultBinding
                SQLTask:ResultName="0"
                SQLTask:DtsVariableName="User::objConnectTimeList" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="User::intWellId"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Well Loop\BlackGold Tripping Speeds Min Max ID Query"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Get Wells"
          DTS:DTSID="{c82941bc-a995-4eed-8d8f-3092691a1a4c}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="BlackGold Tripping Speeds Min Max ID Query"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="2">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{B09DFF4B-1666-40D6-850C-21EC437987D1}"
              SQLTask:BypassPrepare="False"
              SQLTask:SqlStatementSource="select&#xA;iif(minWellTrippingSpeedId is null, 0, minWellTrippingSpeedId),&#xA;iif(maxWellTrippingSpeedId is null, 0, maxWellTrippingSpeedId)&#xA;from&#xA;(&#xA;select min(WellTrippingSpeedId) as minWellTrippingSpeedId, max(WellTrippingSpeedId) as maxWellTrippingSpeedId&#xA;from&#xA; xref.vrWellTrippingSpeeds&#xA;where Well_WellId = ?) qry&#xA;"
              SQLTask:ResultType="ResultSetType_Rowset" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ResultBinding
                SQLTask:ResultName="0"
                SQLTask:DtsVariableName="User::objMinMaxTrippingSpeedResultSet" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="User::intWellId"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Well Loop\BlackGold Tripping Speeds Query"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Get Wells"
          DTS:DTSID="{83ee83bc-68bb-4071-aa2d-24be56503bbd}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="BlackGold Tripping Speeds Query"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="2">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{B09DFF4B-1666-40D6-850C-21EC437987D1}"
              SQLTask:BypassPrepare="False"
              SQLTask:SqlStatementSource="select WellTrippingSpeedID,x.Well_WellID,FromDateTime,ToDateTime,ActiveTime,FromBitDepth,ToBitDepth,ActivityDescription,DrillerNames,SinglesOrStands,ActiveDeltaBlockHeight,ActiveDeltaBitDepth,ActiveDistanceTravelled,Remark,IsBitInCasing,IsCrewHandlingBHA,x.ActiveInd,RemarkType,&#xA;uoms.BlockHeight as BlockHeightUom, uoms.BitDepth as BitDepthUom&#xA;  from&#xA;(select WellTrippingSpeedID, Well_wellID,  convert(varchar(50), FromDateTime, 121) as FromDateTime, convert(varchar(50), ToDateTime, 121) as ToDateTime,&#xA;ActiveTime, FromBitDepth, ToBitDepth, ActivityDescription, DrillerNames, iif(SinglesOrStands is null, '', SinglesOrStands) as SinglesOrStands, ActiveDeltaBlockHeight, &#xA;ActiveDeltaBitDepth, ActiveDistanceTravelled, Remark, cast(iif(IsBitInCasing = 'Y', 1, 0) as bit) as IsBitInCasing, cast(iif(IsCrewHandlingBHA = 'Y',1,0) as bit) as IsCrewHandlingBHA,&#xA;cast(1 as bit) as ActiveInd&#xA;,iif(rt.LongName is null, '', rt.LongName) as RemarkType,codes.item&#xA;,row_number() over (partition by WellTrippingSpeedID order by case when codes.item like '6%' then 1 when codes.item like '12%' then 2 else 3 end asc) as rank&#xA;from xref.vrWellTrippingSpeeds wts&#xA;outer apply dbo.fnCSVtoTable(replace(wts.RemarkCodes,';',',')) codes&#xA;left outer join rRemarkType rt on codes.item=rt.ShortName&#xA;where well_wellid = ?&#xA;) x&#xA;inner join WellUOMForEDR uoms on x.well_wellid = uoms.well_wellid and uoms.ActiveInd = 1&#xA;where x.rank=1&#xA;&#xA;"
              SQLTask:ResultType="ResultSetType_Rowset" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ResultBinding
                SQLTask:ResultName="0"
                SQLTask:DtsVariableName="User::objTrippingSpeedList" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="User::intWellId"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Well Loop\C# Script for Timezone Conversion"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Script Task"
          DTS:DTSID="{C5E29827-D67F-4BEE-A1C2-37E2AB0FE2AF}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="C# Script for Timezone Conversion"
          DTS:ThreadHint="1">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_d30596df958c4c0486309ea7aed19610"
              VSTAMajorVersion="3"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::strTimeZone"
              ReadWriteVariables="User::strConvertedTimeZone">
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="ST_d30596df958c4c0486309ea7aed19610.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{4B3ACE6A-8EBD-4C1D-A965-DBCEB2CB628F}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_d30596df958c4c0486309ea7aed19610</RootNamespace>
    <AssemblyName>ST_d30596df958c4c0486309ea7aed19610</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\10.0\InstallDir#\devenv.exe" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_d30596df958c4c0486309ea7aed19610.Properties.Settings.get_Default():ST_d30596df958c4c0486309ea7aed19610.Properties.Sett" +
    "ings")]

namespace ST_d30596df958c4c0486309ea7aed19610.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion

namespace ST_d30596df958c4c0486309ea7aed19610
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            string timeZone = Dts.Variables["strTimeZone"].Value.ToString();

			// TODO: Add your code here
            if (timeZone == "Africa/Abidjan") Dts.Variables["strConvertedTimeZone"].Value = "Greenwich Standard Time";
            else if (timeZone == "Africa/Accra") Dts.Variables["strConvertedTimeZone"].Value = "Greenwich Standard Time";
            else if (timeZone == "Africa/Addis_Ababa") Dts.Variables["strConvertedTimeZone"].Value = "E. Africa Standard Time";
            else if (timeZone == "Africa/Algiers") Dts.Variables["strConvertedTimeZone"].Value = "W. Central Africa Standard Time";
            else if (timeZone == "Africa/Asmera") Dts.Variables["strConvertedTimeZone"].Value = "E. Africa Standard Time";
            else if (timeZone == "Africa/Bamako") Dts.Variables["strConvertedTimeZone"].Value = "Greenwich Standard Time";
            else if (timeZone == "Africa/Bangui") Dts.Variables["strConvertedTimeZone"].Value = "W. Central Africa Standard Time";
            else if (timeZone == "Africa/Banjul") Dts.Variables["strConvertedTimeZone"].Value = "Greenwich Standard Time";
            else if (timeZone == "Africa/Bissau") Dts.Variables["strConvertedTimeZone"].Value = "Greenwich Standard Time";
            else if (timeZone == "Africa/Blantyre") Dts.Variables["strConvertedTimeZone"].Value = "South Africa Standard Time";
            else if (timeZone == "Africa/Brazzaville") Dts.Variables["strConvertedTimeZone"].Value = "W. Central Africa Standard Time";
            else if (timeZone == "Africa/Bujumbura") Dts.Variables["strConvertedTimeZone"].Value = "South Africa Standard Time";
            else if (timeZone == "Africa/Cairo") Dts.Variables["strConvertedTimeZone"].Value = "Egypt Standard Time";
            else if (timeZone == "Africa/Casablanca") Dts.Variables["strConvertedTimeZone"].Value = "Morocco Standard Time";
            else if (timeZone == "Africa/Ceuta") Dts.Variables["strConvertedTimeZone"].Value = "Romance Standard Time";
            else if (timeZone == "Africa/Conakry") Dts.Variables["strConvertedTimeZone"].Value = "Greenwich Standard Time";
            else if (timeZone == "Africa/Dakar") Dts.Variables["strConvertedTimeZone"].Value = "Greenwich Standard Time";
            else if (timeZone == "Africa/Dar_es_Salaam") Dts.Variables["strConvertedTimeZone"].Value = "E. Africa Standard Time";
            else if (timeZone == "Africa/Djibouti") Dts.Variables["strConvertedTimeZone"].Value = "E. Africa Standard Time";
            else if (timeZone == "Africa/Douala") Dts.Variables["strConvertedTimeZone"].Value = "W. Central Africa Standard Time";
            else if (timeZone == "Africa/El_Aaiun") Dts.Variables["strConvertedTimeZone"].Value = "Greenwich Standard Time";
            else if (timeZone == "Africa/Freetown") Dts.Variables["strConvertedTimeZone"].Value = "Greenwich Standard Time";
            else if (timeZone == "Africa/Gaborone") Dts.Variables["strConvertedTimeZone"].Value = "South Africa Standard Time";
            else if (timeZone == "Africa/Harare") Dts.Variables["strConvertedTimeZone"].Value = "South Africa Standard Time";
            else if (timeZone == "Africa/Johannesburg") Dts.Variables["strConvertedTimeZone"].Value = "South Africa Standard Time";
            else if (timeZone == "Africa/Juba") Dts.Variables["strConvertedTimeZone"].Value = "E. Africa Standard Time";
            else if (timeZone == "Africa/Kampala") Dts.Variables["strConvertedTimeZone"].Value = "E. Africa Standard Time";
            else if (timeZone == "Africa/Khartoum") Dts.Variables["strConvertedTimeZone"].Value = "E. Africa Standard Time";
            else if (timeZone == "Africa/Kigali") Dts.Variables["strConvertedTimeZone"].Value = "South Africa Standard Time";
            else if (timeZone == "Africa/Kinshasa") Dts.Variables["strConvertedTimeZone"].Value = "W. Central Africa Standard Time";
            else if (timeZone == "Africa/Lagos") Dts.Variables["strConvertedTimeZone"].Value = "W. Central Africa Standard Time";
            else if (timeZone == "Africa/Libreville") Dts.Variables["strConvertedTimeZone"].Value = "W. Central Africa Standard Time";
            else if (timeZone == "Africa/Lome") Dts.Variables["strConvertedTimeZone"].Value = "Greenwich Standard Time";
            else if (timeZone == "Africa/Luanda") Dts.Variables["strConvertedTimeZone"].Value = "W. Central Africa Standard Time";
            else if (timeZone == "Africa/Lubumbashi") Dts.Variables["strConvertedTimeZone"].Value = "South Africa Standard Time";
            else if (timeZone == "Africa/Lusaka") Dts.Variables["strConvertedTimeZone"].Value = "South Africa Standard Time";
            else if (timeZone == "Africa/Malabo") Dts.Variables["strConvertedTimeZone"].Value = "W. Central Africa Standard Time";
            else if (timeZone == "Africa/Maputo") Dts.Variables["strConvertedTimeZone"].Value = "South Africa Standard Time";
            else if (timeZone == "Africa/Maseru") Dts.Variables["strConvertedTimeZone"].Value = "South Africa Standard Time";
            else if (timeZone == "Africa/Mbabane") Dts.Variables["strConvertedTimeZone"].Value = "South Africa Standard Time";
            else if (timeZone == "Africa/Mogadishu") Dts.Variables["strConvertedTimeZone"].Value = "E. Africa Standard Time";
            else if (timeZone == "Africa/Monrovia") Dts.Variables["strConvertedTimeZone"].Value = "Greenwich Standard Time";
            else if (timeZone == "Africa/Nairobi") Dts.Variables["strConvertedTimeZone"].Value = "E. Africa Standard Time";
            else if (timeZone == "Africa/Ndjamena") Dts.Variables["strConvertedTimeZone"].Value = "W. Central Africa Standard Time";
            else if (timeZone == "Africa/Niamey") Dts.Variables["strConvertedTimeZone"].Value = "W. Central Africa Standard Time";
            else if (timeZone == "Africa/Nouakchott") Dts.Variables["strConvertedTimeZone"].Value = "Greenwich Standard Time";
            else if (timeZone == "Africa/Ouagadougou") Dts.Variables["strConvertedTimeZone"].Value = "Greenwich Standard Time";
            else if (timeZone == "Africa/Porto-Novo") Dts.Variables["strConvertedTimeZone"].Value = "W. Central Africa Standard Time";
            else if (timeZone == "Africa/Sao_Tome") Dts.Variables["strConvertedTimeZone"].Value = "Greenwich Standard Time";
            else if (timeZone == "Africa/Tripoli") Dts.Variables["strConvertedTimeZone"].Value = "South Africa Standard Time";
            else if (timeZone == "Africa/Tunis") Dts.Variables["strConvertedTimeZone"].Value = "W. Central Africa Standard Time";
            else if (timeZone == "Africa/Windhoek") Dts.Variables["strConvertedTimeZone"].Value = "Namibia Standard Time";
            else if (timeZone == "America/Anchorage") Dts.Variables["strConvertedTimeZone"].Value = "Alaskan Standard Time";
            else if (timeZone == "America/Anguilla") Dts.Variables["strConvertedTimeZone"].Value = "SA Western Standard Time";
            else if (timeZone == "America/Antigua") Dts.Variables["strConvertedTimeZone"].Value = "SA Western Standard Time";
            else if (timeZone == "America/Araguaina") Dts.Variables["strConvertedTimeZone"].Value = "SA Eastern Standard Time";
            else if (timeZone == "America/Argentina/La_Rioja") Dts.Variables["strConvertedTimeZone"].Value = "Argentina Standard Time";
            else if (timeZone == "America/Argentina/Rio_Gallegos") Dts.Variables["strConvertedTimeZone"].Value = "Argentina Standard Time";
            else if (timeZone == "America/Argentina/Salta") Dts.Variables["strConvertedTimeZone"].Value = "Argentina Standard Time";
            else if (timeZone == "America/Argentina/San_Juan") Dts.Variables["strConvertedTimeZone"].Value = "Argentina Standard Time";
            else if (timeZone == "America/Argentina/San_Luis") Dts.Variables["strConvertedTimeZone"].Value = "Argentina Standard Time";
            else if (timeZone == "America/Argentina/Tucuman") Dts.Variables["strConvertedTimeZone"].Value = "Argentina Standard Time";
            else if (timeZone == "America/Argentina/Ushuaia") Dts.Variables["strConvertedTimeZone"].Value = "Argentina Standard Time";
            else if (timeZone == "America/Aruba") Dts.Variables["strConvertedTimeZone"].Value = "SA Western Standard Time";
            else if (timeZone == "America/Asuncion") Dts.Variables["strConvertedTimeZone"].Value = "Paraguay Standard Time";
            else if (timeZone == "America/Bahia") Dts.Variables["strConvertedTimeZone"].Value = "Bahia Standard Time";
            else if (timeZone == "America/Bahia_Banderas") Dts.Variables["strConvertedTimeZone"].Value = "Central Standard Time (Mexico)";
            else if (timeZone == "America/Barbados") Dts.Variables["strConvertedTimeZone"].Value = "SA Western Standard Time";
            else if (timeZone == "America/Belem") Dts.Variables["strConvertedTimeZone"].Value = "SA Eastern Standard Time";
            else if (timeZone == "America/Belize") Dts.Variables["strConvertedTimeZone"].Value = "Central America Standard Time";
            else if (timeZone == "America/Blanc-Sablon") Dts.Variables["strConvertedTimeZone"].Value = "SA Western Standard Time";
            else if (timeZone == "America/Boa_Vista") Dts.Variables["strConvertedTimeZone"].Value = "SA Western Standard Time";
            else if (timeZone == "America/Bogota") Dts.Variables["strConvertedTimeZone"].Value = "SA Pacific Standard Time";
            else if (timeZone == "America/Boise") Dts.Variables["strConvertedTimeZone"].Value = "Mountain Standard Time";
            else if (timeZone == "America/Buenos_Aires") Dts.Variables["strConvertedTimeZone"].Value = "Argentina Standard Time";
            else if (timeZone == "America/Argentina/Buenos_Aires") Dts.Variables["strConvertedTimeZone"].Value = "Argentina Standard Time";
            else if (timeZone == "America/Cambridge_Bay") Dts.Variables["strConvertedTimeZone"].Value = "Mountain Standard Time";
            else if (timeZone == "America/Campo_Grande") Dts.Variables["strConvertedTimeZone"].Value = "Central Brazilian Standard Time";
            else if (timeZone == "America/Cancun") Dts.Variables["strConvertedTimeZone"].Value = "Central Standard Time (Mexico)";
            else if (timeZone == "America/Caracas") Dts.Variables["strConvertedTimeZone"].Value = "Venezuela Standard Time";
            else if (timeZone == "America/Catamarca") Dts.Variables["strConvertedTimeZone"].Value = "Argentina Standard Time";
            else if (timeZone == "America/Cayenne") Dts.Variables["strConvertedTimeZone"].Value = "SA Eastern Standard Time";
            else if (timeZone == "America/Cayman") Dts.Variables["strConvertedTimeZone"].Value = "SA Pacific Standard Time";
            else if (timeZone == "America/Chicago") Dts.Variables["strConvertedTimeZone"].Value = "Central Standard Time";
            else if (timeZone == "America/Chihuahua") Dts.Variables["strConvertedTimeZone"].Value = "Mountain Standard Time (Mexico)";
            else if (timeZone == "America/Coral_Harbour") Dts.Variables["strConvertedTimeZone"].Value = "SA Pacific Standard Time";
            else if (timeZone == "America/Cordoba") Dts.Variables["strConvertedTimeZone"].Value = "Argentina Standard Time";
            else if (timeZone == "America/Costa_Rica") Dts.Variables["strConvertedTimeZone"].Value = "Central America Standard Time";
            else if (timeZone == "America/Cuiaba") Dts.Variables["strConvertedTimeZone"].Value = "Central Brazilian Standard Time";
            else if (timeZone == "America/Curacao") Dts.Variables["strConvertedTimeZone"].Value = "SA Western Standard Time";
            else if (timeZone == "America/Danmarkshavn") Dts.Variables["strConvertedTimeZone"].Value = "UTC";
            else if (timeZone == "America/Dawson") Dts.Variables["strConvertedTimeZone"].Value = "Pacific Standard Time";
            else if (timeZone == "America/Dawson_Creek") Dts.Variables["strConvertedTimeZone"].Value = "US Mountain Standard Time";
            else if (timeZone == "America/Denver") Dts.Variables["strConvertedTimeZone"].Value = "Mountain Standard Time";
            else if (timeZone == "America/Detroit") Dts.Variables["strConvertedTimeZone"].Value = "Eastern Standard Time";
            else if (timeZone == "America/Dominica") Dts.Variables["strConvertedTimeZone"].Value = "SA Western Standard Time";
            else if (timeZone == "America/Edmonton") Dts.Variables["strConvertedTimeZone"].Value = "Mountain Standard Time";
            else if (timeZone == "America/Eirunepe") Dts.Variables["strConvertedTimeZone"].Value = "SA Western Standard Time";
            else if (timeZone == "America/El_Salvador") Dts.Variables["strConvertedTimeZone"].Value = "Central America Standard Time";
            else if (timeZone == "America/Fortaleza") Dts.Variables["strConvertedTimeZone"].Value = "SA Eastern Standard Time";
            else if (timeZone == "America/Glace_Bay") Dts.Variables["strConvertedTimeZone"].Value = "Atlantic Standard Time";
            else if (timeZone == "America/Godthab") Dts.Variables["strConvertedTimeZone"].Value = "Greenland Standard Time";
            else if (timeZone == "America/Goose_Bay") Dts.Variables["strConvertedTimeZone"].Value = "Atlantic Standard Time";
            else if (timeZone == "America/Grand_Turk") Dts.Variables["strConvertedTimeZone"].Value = "Eastern Standard Time";
            else if (timeZone == "America/Grenada") Dts.Variables["strConvertedTimeZone"].Value = "SA Western Standard Time";
            else if (timeZone == "America/Guadeloupe") Dts.Variables["strConvertedTimeZone"].Value = "SA Western Standard Time";
            else if (timeZone == "America/Guatemala") Dts.Variables["strConvertedTimeZone"].Value = "Central America Standard Time";
            else if (timeZone == "America/Guayaquil") Dts.Variables["strConvertedTimeZone"].Value = "SA Pacific Standard Time";
            else if (timeZone == "America/Guyana") Dts.Variables["strConvertedTimeZone"].Value = "SA Western Standard Time";
            else if (timeZone == "America/Halifax") Dts.Variables["strConvertedTimeZone"].Value = "Atlantic Standard Time";
            else if (timeZone == "America/Hermosillo") Dts.Variables["strConvertedTimeZone"].Value = "US Mountain Standard Time";
            else if (timeZone == "America/Indiana/Knox") Dts.Variables["strConvertedTimeZone"].Value = "Central Standard Time";
            else if (timeZone == "America/Indiana/Marengo") Dts.Variables["strConvertedTimeZone"].Value = "US Eastern Standard Time";
            else if (timeZone == "America/Indiana/Petersburg") Dts.Variables["strConvertedTimeZone"].Value = "Eastern Standard Time";
            else if (timeZone == "America/Indiana/Tell_City") Dts.Variables["strConvertedTimeZone"].Value = "Central Standard Time";
            else if (timeZone == "America/Indiana/Vevay") Dts.Variables["strConvertedTimeZone"].Value = "US Eastern Standard Time";
            else if (timeZone == "America/Indiana/Vincennes") Dts.Variables["strConvertedTimeZone"].Value = "Eastern Standard Time";
            else if (timeZone == "America/Indiana/Winamac") Dts.Variables["strConvertedTimeZone"].Value = "Eastern Standard Time";
            else if (timeZone == "America/Indianapolis") Dts.Variables["strConvertedTimeZone"].Value = "US Eastern Standard Time";
            else if (timeZone == "America/Inuvik") Dts.Variables["strConvertedTimeZone"].Value = "Mountain Standard Time";
            else if (timeZone == "America/Iqaluit") Dts.Variables["strConvertedTimeZone"].Value = "Eastern Standard Time";
            else if (timeZone == "America/Jamaica") Dts.Variables["strConvertedTimeZone"].Value = "SA Pacific Standard Time";
            else if (timeZone == "America/Jujuy") Dts.Variables["strConvertedTimeZone"].Value = "Argentina Standard Time";
            else if (timeZone == "America/Juneau") Dts.Variables["strConvertedTimeZone"].Value = "Alaskan Standard Time";
            else if (timeZone == "America/Kentucky/Monticello") Dts.Variables["strConvertedTimeZone"].Value = "Eastern Standard Time";
            else if (timeZone == "America/La_Paz") Dts.Variables["strConvertedTimeZone"].Value = "SA Western Standard Time";
            else if (timeZone == "America/Lima") Dts.Variables["strConvertedTimeZone"].Value = "SA Pacific Standard Time";
            else if (timeZone == "America/Los_Angeles") Dts.Variables["strConvertedTimeZone"].Value = "Pacific Standard Time";
            else if (timeZone == "America/Louisville") Dts.Variables["strConvertedTimeZone"].Value = "Eastern Standard Time";
            else if (timeZone == "America/Maceio") Dts.Variables["strConvertedTimeZone"].Value = "SA Eastern Standard Time";
            else if (timeZone == "America/Managua") Dts.Variables["strConvertedTimeZone"].Value = "Central America Standard Time";
            else if (timeZone == "America/Manaus") Dts.Variables["strConvertedTimeZone"].Value = "SA Western Standard Time";
            else if (timeZone == "America/Marigot") Dts.Variables["strConvertedTimeZone"].Value = "SA Western Standard Time";
            else if (timeZone == "America/Martinique") Dts.Variables["strConvertedTimeZone"].Value = "SA Western Standard Time";
            else if (timeZone == "America/Matamoros") Dts.Variables["strConvertedTimeZone"].Value = "Central Standard Time";
            else if (timeZone == "America/Mazatlan") Dts.Variables["strConvertedTimeZone"].Value = "Mountain Standard Time (Mexico)";
            else if (timeZone == "America/Mendoza") Dts.Variables["strConvertedTimeZone"].Value = "Argentina Standard Time";
            else if (timeZone == "America/Menominee") Dts.Variables["strConvertedTimeZone"].Value = "Central Standard Time";
            else if (timeZone == "America/Merida") Dts.Variables["strConvertedTimeZone"].Value = "Central Standard Time (Mexico)";
            else if (timeZone == "America/Mexico_City") Dts.Variables["strConvertedTimeZone"].Value = "Central Standard Time (Mexico)";
            else if (timeZone == "America/Moncton") Dts.Variables["strConvertedTimeZone"].Value = "Atlantic Standard Time";
            else if (timeZone == "America/Monterrey") Dts.Variables["strConvertedTimeZone"].Value = "Central Standard Time (Mexico)";
            else if (timeZone == "America/Montevideo") Dts.Variables["strConvertedTimeZone"].Value = "Montevideo Standard Time";
            else if (timeZone == "America/Montreal") Dts.Variables["strConvertedTimeZone"].Value = "Eastern Standard Time";
            else if (timeZone == "America/Montserrat") Dts.Variables["strConvertedTimeZone"].Value = "SA Western Standard Time";
            else if (timeZone == "America/Nassau") Dts.Variables["strConvertedTimeZone"].Value = "Eastern Standard Time";
            else if (timeZone == "America/New_York") Dts.Variables["strConvertedTimeZone"].Value = "Eastern Standard Time";
            else if (timeZone == "America/Nipigon") Dts.Variables["strConvertedTimeZone"].Value = "Eastern Standard Time";
            else if (timeZone == "America/Nome") Dts.Variables["strConvertedTimeZone"].Value = "Alaskan Standard Time";
            else if (timeZone == "America/Noronha") Dts.Variables["strConvertedTimeZone"].Value = "UTC-02";
            else if (timeZone == "America/North_Dakota/Beulah") Dts.Variables["strConvertedTimeZone"].Value = "Central Standard Time";
            else if (timeZone == "America/North_Dakota/Center") Dts.Variables["strConvertedTimeZone"].Value = "Central Standard Time";
            else if (timeZone == "America/North_Dakota/New_Salem") Dts.Variables["strConvertedTimeZone"].Value = "Central Standard Time";
            else if (timeZone == "America/Ojinaga") Dts.Variables["strConvertedTimeZone"].Value = "Mountain Standard Time";
            else if (timeZone == "America/Panama") Dts.Variables["strConvertedTimeZone"].Value = "SA Pacific Standard Time";
            else if (timeZone == "America/Pangnirtung") Dts.Variables["strConvertedTimeZone"].Value = "Eastern Standard Time";
            else if (timeZone == "America/Paramaribo") Dts.Variables["strConvertedTimeZone"].Value = "SA Eastern Standard Time";
            else if (timeZone == "America/Phoenix") Dts.Variables["strConvertedTimeZone"].Value = "US Mountain Standard Time";
            else if (timeZone == "America/Port_of_Spain") Dts.Variables["strConvertedTimeZone"].Value = "SA Western Standard Time";
            else if (timeZone == "America/Port-au-Prince") Dts.Variables["strConvertedTimeZone"].Value = "SA Pacific Standard Time";
            else if (timeZone == "America/Porto_Velho") Dts.Variables["strConvertedTimeZone"].Value = "SA Western Standard Time";
            else if (timeZone == "America/Puerto_Rico") Dts.Variables["strConvertedTimeZone"].Value = "SA Western Standard Time";
            else if (timeZone == "America/Rainy_River") Dts.Variables["strConvertedTimeZone"].Value = "Central Standard Time";
            else if (timeZone == "America/Rankin_Inlet") Dts.Variables["strConvertedTimeZone"].Value = "Central Standard Time";
            else if (timeZone == "America/Recife") Dts.Variables["strConvertedTimeZone"].Value = "SA Eastern Standard Time";
            else if (timeZone == "America/Regina") Dts.Variables["strConvertedTimeZone"].Value = "Canada Central Standard Time";
            else if (timeZone == "America/Resolute") Dts.Variables["strConvertedTimeZone"].Value = "Central Standard Time";
            else if (timeZone == "America/Rio_Branco") Dts.Variables["strConvertedTimeZone"].Value = "SA Western Standard Time";
            else if (timeZone == "America/Santa_Isabel") Dts.Variables["strConvertedTimeZone"].Value = "Pacific Standard Time (Mexico)";
            else if (timeZone == "America/Santarem") Dts.Variables["strConvertedTimeZone"].Value = "SA Eastern Standard Time";
            else if (timeZone == "America/Santiago") Dts.Variables["strConvertedTimeZone"].Value = "Pacific SA Standard Time";
            else if (timeZone == "America/Santo_Domingo") Dts.Variables["strConvertedTimeZone"].Value = "SA Western Standard Time";
            else if (timeZone == "America/Sao_Paulo") Dts.Variables["strConvertedTimeZone"].Value = "E. South America Standard Time";
            else if (timeZone == "America/Scoresbysund") Dts.Variables["strConvertedTimeZone"].Value = "Azores Standard Time";
            else if (timeZone == "America/Shiprock") Dts.Variables["strConvertedTimeZone"].Value = "Mountain Standard Time";
            else if (timeZone == "America/Sitka") Dts.Variables["strConvertedTimeZone"].Value = "Alaskan Standard Time";
            else if (timeZone == "America/St_Barthelemy") Dts.Variables["strConvertedTimeZone"].Value = "SA Western Standard Time";
            else if (timeZone == "America/St_Johns") Dts.Variables["strConvertedTimeZone"].Value = "Newfoundland Standard Time";
            else if (timeZone == "America/St_Kitts") Dts.Variables["strConvertedTimeZone"].Value = "SA Western Standard Time";
            else if (timeZone == "America/St_Lucia") Dts.Variables["strConvertedTimeZone"].Value = "SA Western Standard Time";
            else if (timeZone == "America/St_Thomas") Dts.Variables["strConvertedTimeZone"].Value = "SA Western Standard Time";
            else if (timeZone == "America/St_Vincent") Dts.Variables["strConvertedTimeZone"].Value = "SA Western Standard Time";
            else if (timeZone == "America/Swift_Current") Dts.Variables["strConvertedTimeZone"].Value = "Canada Central Standard Time";
            else if (timeZone == "America/Tegucigalpa") Dts.Variables["strConvertedTimeZone"].Value = "Central America Standard Time";
            else if (timeZone == "America/Thule") Dts.Variables["strConvertedTimeZone"].Value = "Atlantic Standard Time";
            else if (timeZone == "America/Thunder_Bay") Dts.Variables["strConvertedTimeZone"].Value = "Eastern Standard Time";
            else if (timeZone == "America/Tijuana") Dts.Variables["strConvertedTimeZone"].Value = "Pacific Standard Time";
            else if (timeZone == "America/Toronto") Dts.Variables["strConvertedTimeZone"].Value = "Eastern Standard Time";
            else if (timeZone == "America/Tortola") Dts.Variables["strConvertedTimeZone"].Value = "SA Western Standard Time";
            else if (timeZone == "America/Vancouver") Dts.Variables["strConvertedTimeZone"].Value = "Pacific Standard Time";
            else if (timeZone == "America/Whitehorse") Dts.Variables["strConvertedTimeZone"].Value = "Pacific Standard Time";
            else if (timeZone == "America/Winnipeg") Dts.Variables["strConvertedTimeZone"].Value = "Central Standard Time";
            else if (timeZone == "America/Yakutat") Dts.Variables["strConvertedTimeZone"].Value = "Alaskan Standard Time";
            else if (timeZone == "America/Yellowknife") Dts.Variables["strConvertedTimeZone"].Value = "Mountain Standard Time";
            else if (timeZone == "Antarctica/Casey") Dts.Variables["strConvertedTimeZone"].Value = "W. Australia Standard Time";
            else if (timeZone == "Antarctica/Davis") Dts.Variables["strConvertedTimeZone"].Value = "SE Asia Standard Time";
            else if (timeZone == "Antarctica/DumontDUrville") Dts.Variables["strConvertedTimeZone"].Value = "West Pacific Standard Time";
            else if (timeZone == "Antarctica/Macquarie") Dts.Variables["strConvertedTimeZone"].Value = "Central Pacific Standard Time";
            else if (timeZone == "Antarctica/Mawson") Dts.Variables["strConvertedTimeZone"].Value = "West Asia Standard Time";
            else if (timeZone == "Antarctica/McMurdo") Dts.Variables["strConvertedTimeZone"].Value = "New Zealand Standard Time";
            else if (timeZone == "Antarctica/Palmer") Dts.Variables["strConvertedTimeZone"].Value = "Pacific SA Standard Time";
            else if (timeZone == "Antarctica/Rothera") Dts.Variables["strConvertedTimeZone"].Value = "SA Eastern Standard Time";
            else if (timeZone == "Antarctica/South_Pole") Dts.Variables["strConvertedTimeZone"].Value = "New Zealand Standard Time";
            else if (timeZone == "Antarctica/Syowa") Dts.Variables["strConvertedTimeZone"].Value = "E. Africa Standard Time";
            else if (timeZone == "Antarctica/Vostok") Dts.Variables["strConvertedTimeZone"].Value = "Central Asia Standard Time";
            else if (timeZone == "Arctic/Longyearbyen") Dts.Variables["strConvertedTimeZone"].Value = "W. Europe Standard Time";
            else if (timeZone == "Asia/Aden") Dts.Variables["strConvertedTimeZone"].Value = "Arab Standard Time";
            else if (timeZone == "Asia/Almaty") Dts.Variables["strConvertedTimeZone"].Value = "Central Asia Standard Time";
            else if (timeZone == "Asia/Amman") Dts.Variables["strConvertedTimeZone"].Value = "Jordan Standard Time";
            else if (timeZone == "Asia/Anadyr") Dts.Variables["strConvertedTimeZone"].Value = "Magadan Standard Time";
            else if (timeZone == "Asia/Aqtau") Dts.Variables["strConvertedTimeZone"].Value = "West Asia Standard Time";
            else if (timeZone == "Asia/Aqtobe") Dts.Variables["strConvertedTimeZone"].Value = "West Asia Standard Time";
            else if (timeZone == "Asia/Ashgabat") Dts.Variables["strConvertedTimeZone"].Value = "West Asia Standard Time";
            else if (timeZone == "Asia/Baghdad") Dts.Variables["strConvertedTimeZone"].Value = "Arabic Standard Time";
            else if (timeZone == "Asia/Bahrain") Dts.Variables["strConvertedTimeZone"].Value = "Arab Standard Time";
            else if (timeZone == "Asia/Baku") Dts.Variables["strConvertedTimeZone"].Value = "Azerbaijan Standard Time";
            else if (timeZone == "Asia/Bangkok") Dts.Variables["strConvertedTimeZone"].Value = "SE Asia Standard Time";
            else if (timeZone == "Asia/Beirut") Dts.Variables["strConvertedTimeZone"].Value = "Middle East Standard Time";
            else if (timeZone == "Asia/Bishkek") Dts.Variables["strConvertedTimeZone"].Value = "Central Asia Standard Time";
            else if (timeZone == "Asia/Brunei") Dts.Variables["strConvertedTimeZone"].Value = "Singapore Standard Time";
            else if (timeZone == "Asia/Calcutta") Dts.Variables["strConvertedTimeZone"].Value = "India Standard Time";
            else if (timeZone == "Asia/Choibalsan") Dts.Variables["strConvertedTimeZone"].Value = "Ulaanbaatar Standard Time";
            else if (timeZone == "Asia/Chongqing") Dts.Variables["strConvertedTimeZone"].Value = "China Standard Time";
            else if (timeZone == "Asia/Colombo") Dts.Variables["strConvertedTimeZone"].Value = "Sri Lanka Standard Time";
            else if (timeZone == "Asia/Damascus") Dts.Variables["strConvertedTimeZone"].Value = "Syria Standard Time";
            else if (timeZone == "Asia/Dhaka") Dts.Variables["strConvertedTimeZone"].Value = "Bangladesh Standard Time";
            else if (timeZone == "Asia/Dili") Dts.Variables["strConvertedTimeZone"].Value = "Tokyo Standard Time";
            else if (timeZone == "Asia/Dubai") Dts.Variables["strConvertedTimeZone"].Value = "Arabian Standard Time";
            else if (timeZone == "Asia/Dushanbe") Dts.Variables["strConvertedTimeZone"].Value = "West Asia Standard Time";
            else if (timeZone == "Asia/Gaza") Dts.Variables["strConvertedTimeZone"].Value = "Egypt Standard Time";
            else if (timeZone == "Asia/Harbin") Dts.Variables["strConvertedTimeZone"].Value = "China Standard Time";
            else if (timeZone == "Asia/Hebron") Dts.Variables["strConvertedTimeZone"].Value = "Egypt Standard Time";
            else if (timeZone == "Asia/Hong_Kong") Dts.Variables["strConvertedTimeZone"].Value = "China Standard Time";
            else if (timeZone == "Asia/Hovd") Dts.Variables["strConvertedTimeZone"].Value = "SE Asia Standard Time";
            else if (timeZone == "Asia/Irkutsk") Dts.Variables["strConvertedTimeZone"].Value = "North Asia East Standard Time";
            else if (timeZone == "Asia/Jakarta") Dts.Variables["strConvertedTimeZone"].Value = "SE Asia Standard Time";
            else if (timeZone == "Asia/Jayapura") Dts.Variables["strConvertedTimeZone"].Value = "Tokyo Standard Time";
            else if (timeZone == "Asia/Jerusalem") Dts.Variables["strConvertedTimeZone"].Value = "Israel Standard Time";
            else if (timeZone == "Asia/Kabul") Dts.Variables["strConvertedTimeZone"].Value = "Afghanistan Standard Time";
            else if (timeZone == "Asia/Kamchatka") Dts.Variables["strConvertedTimeZone"].Value = "Magadan Standard Time";
            else if (timeZone == "Asia/Karachi") Dts.Variables["strConvertedTimeZone"].Value = "Pakistan Standard Time";
            else if (timeZone == "Asia/Kashgar") Dts.Variables["strConvertedTimeZone"].Value = "China Standard Time";
            else if (timeZone == "Asia/Katmandu") Dts.Variables["strConvertedTimeZone"].Value = "Nepal Standard Time";
            else if (timeZone == "Asia/Kolkata") Dts.Variables["strConvertedTimeZone"].Value = "India Standard Time";
            else if (timeZone == "Asia/Krasnoyarsk") Dts.Variables["strConvertedTimeZone"].Value = "North Asia Standard Time";
            else if (timeZone == "Asia/Kuala_Lumpur") Dts.Variables["strConvertedTimeZone"].Value = "Singapore Standard Time";
            else if (timeZone == "Asia/Kuching") Dts.Variables["strConvertedTimeZone"].Value = "Singapore Standard Time";
            else if (timeZone == "Asia/Kuwait") Dts.Variables["strConvertedTimeZone"].Value = "Arab Standard Time";
            else if (timeZone == "Asia/Macau") Dts.Variables["strConvertedTimeZone"].Value = "China Standard Time";
            else if (timeZone == "Asia/Magadan") Dts.Variables["strConvertedTimeZone"].Value = "Magadan Standard Time";
            else if (timeZone == "Asia/Makassar") Dts.Variables["strConvertedTimeZone"].Value = "Singapore Standard Time";
            else if (timeZone == "Asia/Manila") Dts.Variables["strConvertedTimeZone"].Value = "Singapore Standard Time";
            else if (timeZone == "Asia/Muscat") Dts.Variables["strConvertedTimeZone"].Value = "Arabian Standard Time";
            else if (timeZone == "Asia/Nicosia") Dts.Variables["strConvertedTimeZone"].Value = "E. Europe Standard Time";
            else if (timeZone == "Asia/Novokuznetsk") Dts.Variables["strConvertedTimeZone"].Value = "N. Central Asia Standard Time";
            else if (timeZone == "Asia/Novosibirsk") Dts.Variables["strConvertedTimeZone"].Value = "N. Central Asia Standard Time";
            else if (timeZone == "Asia/Omsk") Dts.Variables["strConvertedTimeZone"].Value = "N. Central Asia Standard Time";
            else if (timeZone == "Asia/Oral") Dts.Variables["strConvertedTimeZone"].Value = "West Asia Standard Time";
            else if (timeZone == "Asia/Phnom_Penh") Dts.Variables["strConvertedTimeZone"].Value = "SE Asia Standard Time";
            else if (timeZone == "Asia/Pontianak") Dts.Variables["strConvertedTimeZone"].Value = "SE Asia Standard Time";
            else if (timeZone == "Asia/Pyongyang") Dts.Variables["strConvertedTimeZone"].Value = "Korea Standard Time";
            else if (timeZone == "Asia/Qatar") Dts.Variables["strConvertedTimeZone"].Value = "Arab Standard Time";
            else if (timeZone == "Asia/Qyzylorda") Dts.Variables["strConvertedTimeZone"].Value = "Central Asia Standard Time";
            else if (timeZone == "Asia/Rangoon") Dts.Variables["strConvertedTimeZone"].Value = "Myanmar Standard Time";
            else if (timeZone == "Asia/Riyadh") Dts.Variables["strConvertedTimeZone"].Value = "Arab Standard Time";
            else if (timeZone == "Asia/Saigon") Dts.Variables["strConvertedTimeZone"].Value = "SE Asia Standard Time";
            else if (timeZone == "Asia/Sakhalin") Dts.Variables["strConvertedTimeZone"].Value = "Vladivostok Standard Time";
            else if (timeZone == "Asia/Samarkand") Dts.Variables["strConvertedTimeZone"].Value = "West Asia Standard Time";
            else if (timeZone == "Asia/Seoul") Dts.Variables["strConvertedTimeZone"].Value = "Korea Standard Time";
            else if (timeZone == "Asia/Shanghai") Dts.Variables["strConvertedTimeZone"].Value = "China Standard Time";
            else if (timeZone == "Asia/Singapore") Dts.Variables["strConvertedTimeZone"].Value = "Singapore Standard Time";
            else if (timeZone == "Asia/Taipei") Dts.Variables["strConvertedTimeZone"].Value = "Taipei Standard Time";
            else if (timeZone == "Asia/Tashkent") Dts.Variables["strConvertedTimeZone"].Value = "West Asia Standard Time";
            else if (timeZone == "Asia/Tbilisi") Dts.Variables["strConvertedTimeZone"].Value = "Georgian Standard Time";
            else if (timeZone == "Asia/Tehran") Dts.Variables["strConvertedTimeZone"].Value = "Iran Standard Time";
            else if (timeZone == "Asia/Thimphu") Dts.Variables["strConvertedTimeZone"].Value = "Bangladesh Standard Time";
            else if (timeZone == "Asia/Tokyo") Dts.Variables["strConvertedTimeZone"].Value = "Tokyo Standard Time";
            else if (timeZone == "Asia/Ulaanbaatar") Dts.Variables["strConvertedTimeZone"].Value = "Ulaanbaatar Standard Time";
            else if (timeZone == "Asia/Urumqi") Dts.Variables["strConvertedTimeZone"].Value = "China Standard Time";
            else if (timeZone == "Asia/Vientiane") Dts.Variables["strConvertedTimeZone"].Value = "SE Asia Standard Time";
            else if (timeZone == "Asia/Vladivostok") Dts.Variables["strConvertedTimeZone"].Value = "Vladivostok Standard Time";
            else if (timeZone == "Asia/Yakutsk") Dts.Variables["strConvertedTimeZone"].Value = "Yakutsk Standard Time";
            else if (timeZone == "Asia/Yekaterinburg") Dts.Variables["strConvertedTimeZone"].Value = "Ekaterinburg Standard Time";
            else if (timeZone == "Asia/Yerevan") Dts.Variables["strConvertedTimeZone"].Value = "Caucasus Standard Time";
            else if (timeZone == "Atlantic/Azores") Dts.Variables["strConvertedTimeZone"].Value = "Azores Standard Time";
            else if (timeZone == "Atlantic/Bermuda") Dts.Variables["strConvertedTimeZone"].Value = "Atlantic Standard Time";
            else if (timeZone == "Atlantic/Canary") Dts.Variables["strConvertedTimeZone"].Value = "GMT Standard Time";
            else if (timeZone == "Atlantic/Cape_Verde") Dts.Variables["strConvertedTimeZone"].Value = "Cape Verde Standard Time";
            else if (timeZone == "Atlantic/Faeroe") Dts.Variables["strConvertedTimeZone"].Value = "GMT Standard Time";
            else if (timeZone == "Atlantic/Madeira") Dts.Variables["strConvertedTimeZone"].Value = "GMT Standard Time";
            else if (timeZone == "Atlantic/Reykjavik") Dts.Variables["strConvertedTimeZone"].Value = "Greenwich Standard Time";
            else if (timeZone == "Atlantic/South_Georgia") Dts.Variables["strConvertedTimeZone"].Value = "UTC-02";
            else if (timeZone == "Atlantic/St_Helena") Dts.Variables["strConvertedTimeZone"].Value = "Greenwich Standard Time";
            else if (timeZone == "Australia/Adelaide") Dts.Variables["strConvertedTimeZone"].Value = "Cen. Australia Standard Time";
            else if (timeZone == "Australia/Brisbane") Dts.Variables["strConvertedTimeZone"].Value = "E. Australia Standard Time";
            else if (timeZone == "Australia/Broken_Hill") Dts.Variables["strConvertedTimeZone"].Value = "Cen. Australia Standard Time";
            else if (timeZone == "Australia/Currie") Dts.Variables["strConvertedTimeZone"].Value = "Tasmania Standard Time";
            else if (timeZone == "Australia/Darwin") Dts.Variables["strConvertedTimeZone"].Value = "AUS Central Standard Time";
            else if (timeZone == "Australia/Hobart") Dts.Variables["strConvertedTimeZone"].Value = "Tasmania Standard Time";
            else if (timeZone == "Australia/Lindeman") Dts.Variables["strConvertedTimeZone"].Value = "E. Australia Standard Time";
            else if (timeZone == "Australia/Melbourne") Dts.Variables["strConvertedTimeZone"].Value = "AUS Eastern Standard Time";
            else if (timeZone == "Australia/Perth") Dts.Variables["strConvertedTimeZone"].Value = "W. Australia Standard Time";
            else if (timeZone == "Australia/Queensland") Dts.Variables["strConvertedTimeZone"].Value = "E. Australia Standard Time";
            else if (timeZone == "Australia/Sydney") Dts.Variables["strConvertedTimeZone"].Value = "AUS Eastern Standard Time";
            else if (timeZone == "Australia/West") Dts.Variables["strConvertedTimeZone"].Value = "W. Australia Standard Time";
            else if (timeZone == "Canada/Central") Dts.Variables["strConvertedTimeZone"].Value = "Central Standard Time";
            else if (timeZone == "Canada/Eastern") Dts.Variables["strConvertedTimeZone"].Value = "Eastern Standard Time";
            else if (timeZone == "Canada/Mountain") Dts.Variables["strConvertedTimeZone"].Value = "Mountain Standard Time";
            else if (timeZone == "Canada/Pacific") Dts.Variables["strConvertedTimeZone"].Value = "Pacific Standard Time";
            else if (timeZone == "CST6CDT") Dts.Variables["strConvertedTimeZone"].Value = "Central Standard Time";
            else if (timeZone == "EST5EDT") Dts.Variables["strConvertedTimeZone"].Value = "Eastern Standard Time";
            else if (timeZone == "Etc/GMT") Dts.Variables["strConvertedTimeZone"].Value = "UTC";
            else if (timeZone == "Etc/GMT+1") Dts.Variables["strConvertedTimeZone"].Value = "Cape Verde Standard Time";
            else if (timeZone == "Etc/GMT+10") Dts.Variables["strConvertedTimeZone"].Value = "Hawaiian Standard Time";
            else if (timeZone == "Etc/GMT+11") Dts.Variables["strConvertedTimeZone"].Value = "UTC-11";
            else if (timeZone == "Etc/GMT+12") Dts.Variables["strConvertedTimeZone"].Value = "Dateline Standard Time";
            else if (timeZone == "Etc/GMT+2") Dts.Variables["strConvertedTimeZone"].Value = "UTC-02";
            else if (timeZone == "Etc/GMT+3") Dts.Variables["strConvertedTimeZone"].Value = "SA Eastern Standard Time";
            else if (timeZone == "Etc/GMT+4") Dts.Variables["strConvertedTimeZone"].Value = "SA Western Standard Time";
            else if (timeZone == "Etc/GMT+5") Dts.Variables["strConvertedTimeZone"].Value = "SA Pacific Standard Time";
            else if (timeZone == "Etc/GMT+6") Dts.Variables["strConvertedTimeZone"].Value = "Central America Standard Time";
            else if (timeZone == "Etc/GMT+7") Dts.Variables["strConvertedTimeZone"].Value = "US Mountain Standard Time";
            else if (timeZone == "Etc/GMT-1") Dts.Variables["strConvertedTimeZone"].Value = "W. Central Africa Standard Time";
            else if (timeZone == "Etc/GMT-10") Dts.Variables["strConvertedTimeZone"].Value = "West Pacific Standard Time";
            else if (timeZone == "Etc/GMT-11") Dts.Variables["strConvertedTimeZone"].Value = "Central Pacific Standard Time";
            else if (timeZone == "Etc/GMT-12") Dts.Variables["strConvertedTimeZone"].Value = "UTC+12";
            else if (timeZone == "Etc/GMT-13") Dts.Variables["strConvertedTimeZone"].Value = "Tonga Standard Time";
            else if (timeZone == "Etc/GMT-2") Dts.Variables["strConvertedTimeZone"].Value = "South Africa Standard Time";
            else if (timeZone == "Etc/GMT-3") Dts.Variables["strConvertedTimeZone"].Value = "E. Africa Standard Time";
            else if (timeZone == "Etc/GMT-4") Dts.Variables["strConvertedTimeZone"].Value = "Arabian Standard Time";
            else if (timeZone == "Etc/GMT-5") Dts.Variables["strConvertedTimeZone"].Value = "West Asia Standard Time";
            else if (timeZone == "Etc/GMT-6") Dts.Variables["strConvertedTimeZone"].Value = "Central Asia Standard Time";
            else if (timeZone == "Etc/GMT-7") Dts.Variables["strConvertedTimeZone"].Value = "SE Asia Standard Time";
            else if (timeZone == "Etc/GMT-8") Dts.Variables["strConvertedTimeZone"].Value = "Singapore Standard Time";
            else if (timeZone == "Etc/GMT-9") Dts.Variables["strConvertedTimeZone"].Value = "Tokyo Standard Time";
            else if (timeZone == "Europe/Amsterdam") Dts.Variables["strConvertedTimeZone"].Value = "W. Europe Standard Time";
            else if (timeZone == "Europe/Andorra") Dts.Variables["strConvertedTimeZone"].Value = "W. Europe Standard Time";
            else if (timeZone == "Europe/Athens") Dts.Variables["strConvertedTimeZone"].Value = "GTB Standard Time";
            else if (timeZone == "Europe/Belgrade") Dts.Variables["strConvertedTimeZone"].Value = "Central Europe Standard Time";
            else if (timeZone == "Europe/Berlin") Dts.Variables["strConvertedTimeZone"].Value = "W. Europe Standard Time";
            else if (timeZone == "Europe/Bratislava") Dts.Variables["strConvertedTimeZone"].Value = "Central Europe Standard Time";
            else if (timeZone == "Europe/Brussels") Dts.Variables["strConvertedTimeZone"].Value = "Romance Standard Time";
            else if (timeZone == "Europe/Bucharest") Dts.Variables["strConvertedTimeZone"].Value = "GTB Standard Time";
            else if (timeZone == "Europe/Budapest") Dts.Variables["strConvertedTimeZone"].Value = "Central Europe Standard Time";
            else if (timeZone == "Europe/Chisinau") Dts.Variables["strConvertedTimeZone"].Value = "GTB Standard Time";
            else if (timeZone == "Europe/Copenhagen") Dts.Variables["strConvertedTimeZone"].Value = "Romance Standard Time";
            else if (timeZone == "Europe/Dublin") Dts.Variables["strConvertedTimeZone"].Value = "GMT Standard Time";
            else if (timeZone == "Europe/Gibraltar") Dts.Variables["strConvertedTimeZone"].Value = "W. Europe Standard Time";
            else if (timeZone == "Europe/Guernsey") Dts.Variables["strConvertedTimeZone"].Value = "GMT Standard Time";
            else if (timeZone == "Europe/Helsinki") Dts.Variables["strConvertedTimeZone"].Value = "FLE Standard Time";
            else if (timeZone == "Europe/Isle_of_Man") Dts.Variables["strConvertedTimeZone"].Value = "GMT Standard Time";
            else if (timeZone == "Europe/Istanbul") Dts.Variables["strConvertedTimeZone"].Value = "Turkey Standard Time";
            else if (timeZone == "Europe/Jersey") Dts.Variables["strConvertedTimeZone"].Value = "GMT Standard Time";
            else if (timeZone == "Europe/Kaliningrad") Dts.Variables["strConvertedTimeZone"].Value = "Kaliningrad Standard Time";
            else if (timeZone == "Europe/Kiev") Dts.Variables["strConvertedTimeZone"].Value = "FLE Standard Time";
            else if (timeZone == "Europe/Lisbon") Dts.Variables["strConvertedTimeZone"].Value = "GMT Standard Time";
            else if (timeZone == "Europe/Ljubljana") Dts.Variables["strConvertedTimeZone"].Value = "Central Europe Standard Time";
            else if (timeZone == "Europe/London") Dts.Variables["strConvertedTimeZone"].Value = "GMT Standard Time";
            else if (timeZone == "Europe/Luxembourg") Dts.Variables["strConvertedTimeZone"].Value = "W. Europe Standard Time";
            else if (timeZone == "Europe/Madrid") Dts.Variables["strConvertedTimeZone"].Value = "Romance Standard Time";
            else if (timeZone == "Europe/Malta") Dts.Variables["strConvertedTimeZone"].Value = "W. Europe Standard Time";
            else if (timeZone == "Europe/Mariehamn") Dts.Variables["strConvertedTimeZone"].Value = "FLE Standard Time";
            else if (timeZone == "Europe/Minsk") Dts.Variables["strConvertedTimeZone"].Value = "Kaliningrad Standard Time";
            else if (timeZone == "Europe/Monaco") Dts.Variables["strConvertedTimeZone"].Value = "W. Europe Standard Time";
            else if (timeZone == "Europe/Moscow") Dts.Variables["strConvertedTimeZone"].Value = "Russian Standard Time";
            else if (timeZone == "Europe/Oslo") Dts.Variables["strConvertedTimeZone"].Value = "W. Europe Standard Time";
            else if (timeZone == "Europe/Paris") Dts.Variables["strConvertedTimeZone"].Value = "Romance Standard Time";
            else if (timeZone == "Europe/Podgorica") Dts.Variables["strConvertedTimeZone"].Value = "Central Europe Standard Time";
            else if (timeZone == "Europe/Prague") Dts.Variables["strConvertedTimeZone"].Value = "Central Europe Standard Time";
            else if (timeZone == "Europe/Riga") Dts.Variables["strConvertedTimeZone"].Value = "FLE Standard Time";
            else if (timeZone == "Europe/Rome") Dts.Variables["strConvertedTimeZone"].Value = "W. Europe Standard Time";
            else if (timeZone == "Europe/Samara") Dts.Variables["strConvertedTimeZone"].Value = "Russian Standard Time";
            else if (timeZone == "Europe/San_Marino") Dts.Variables["strConvertedTimeZone"].Value = "W. Europe Standard Time";
            else if (timeZone == "Europe/Sarajevo") Dts.Variables["strConvertedTimeZone"].Value = "Central European Standard Time";
            else if (timeZone == "Europe/Simferopol") Dts.Variables["strConvertedTimeZone"].Value = "FLE Standard Time";
            else if (timeZone == "Europe/Skopje") Dts.Variables["strConvertedTimeZone"].Value = "Central European Standard Time";
            else if (timeZone == "Europe/Sofia") Dts.Variables["strConvertedTimeZone"].Value = "FLE Standard Time";
            else if (timeZone == "Europe/Stockholm") Dts.Variables["strConvertedTimeZone"].Value = "W. Europe Standard Time";
            else if (timeZone == "Europe/Tallinn") Dts.Variables["strConvertedTimeZone"].Value = "FLE Standard Time";
            else if (timeZone == "Europe/Tirane") Dts.Variables["strConvertedTimeZone"].Value = "Central Europe Standard Time";
            else if (timeZone == "Europe/Uzhgorod") Dts.Variables["strConvertedTimeZone"].Value = "FLE Standard Time";
            else if (timeZone == "Europe/Vaduz") Dts.Variables["strConvertedTimeZone"].Value = "W. Europe Standard Time";
            else if (timeZone == "Europe/Vatican") Dts.Variables["strConvertedTimeZone"].Value = "W. Europe Standard Time";
            else if (timeZone == "Europe/Vienna") Dts.Variables["strConvertedTimeZone"].Value = "W. Europe Standard Time";
            else if (timeZone == "Europe/Vilnius") Dts.Variables["strConvertedTimeZone"].Value = "FLE Standard Time";
            else if (timeZone == "Europe/Volgograd") Dts.Variables["strConvertedTimeZone"].Value = "Russian Standard Time";
            else if (timeZone == "Europe/Warsaw") Dts.Variables["strConvertedTimeZone"].Value = "Central European Standard Time";
            else if (timeZone == "Europe/Zagreb") Dts.Variables["strConvertedTimeZone"].Value = "Central European Standard Time";
            else if (timeZone == "Europe/Zaporozhye") Dts.Variables["strConvertedTimeZone"].Value = "FLE Standard Time";
            else if (timeZone == "Europe/Zurich") Dts.Variables["strConvertedTimeZone"].Value = "W. Europe Standard Time";
            else if (timeZone == "Indian/Antananarivo") Dts.Variables["strConvertedTimeZone"].Value = "E. Africa Standard Time";
            else if (timeZone == "Indian/Chagos") Dts.Variables["strConvertedTimeZone"].Value = "Central Asia Standard Time";
            else if (timeZone == "Indian/Christmas") Dts.Variables["strConvertedTimeZone"].Value = "SE Asia Standard Time";
            else if (timeZone == "Indian/Cocos") Dts.Variables["strConvertedTimeZone"].Value = "Myanmar Standard Time";
            else if (timeZone == "Indian/Comoro") Dts.Variables["strConvertedTimeZone"].Value = "E. Africa Standard Time";
            else if (timeZone == "Indian/Kerguelen") Dts.Variables["strConvertedTimeZone"].Value = "West Asia Standard Time";
            else if (timeZone == "Indian/Mahe") Dts.Variables["strConvertedTimeZone"].Value = "Mauritius Standard Time";
            else if (timeZone == "Indian/Maldives") Dts.Variables["strConvertedTimeZone"].Value = "West Asia Standard Time";
            else if (timeZone == "Indian/Mauritius") Dts.Variables["strConvertedTimeZone"].Value = "Mauritius Standard Time";
            else if (timeZone == "Indian/Mayotte") Dts.Variables["strConvertedTimeZone"].Value = "E. Africa Standard Time";
            else if (timeZone == "Indian/Reunion") Dts.Variables["strConvertedTimeZone"].Value = "Mauritius Standard Time";
            else if (timeZone == "MST7MDT") Dts.Variables["strConvertedTimeZone"].Value = "Mountain Standard Time";
            else if (timeZone == "Pacific/Apia") Dts.Variables["strConvertedTimeZone"].Value = "Samoa Standard Time";
            else if (timeZone == "Pacific/Auckland") Dts.Variables["strConvertedTimeZone"].Value = "New Zealand Standard Time";
            else if (timeZone == "Pacific/Efate") Dts.Variables["strConvertedTimeZone"].Value = "Central Pacific Standard Time";
            else if (timeZone == "Pacific/Enderbury") Dts.Variables["strConvertedTimeZone"].Value = "Tonga Standard Time";
            else if (timeZone == "Pacific/Fakaofo") Dts.Variables["strConvertedTimeZone"].Value = "Hawaiian Standard Time";
            else if (timeZone == "Pacific/Fiji") Dts.Variables["strConvertedTimeZone"].Value = "Fiji Standard Time";
            else if (timeZone == "Pacific/Funafuti") Dts.Variables["strConvertedTimeZone"].Value = "UTC+12";
            else if (timeZone == "Pacific/Galapagos") Dts.Variables["strConvertedTimeZone"].Value = "Central America Standard Time";
            else if (timeZone == "Pacific/Guadalcanal") Dts.Variables["strConvertedTimeZone"].Value = "Central Pacific Standard Time";
            else if (timeZone == "Pacific/Guam") Dts.Variables["strConvertedTimeZone"].Value = "West Pacific Standard Time";
            else if (timeZone == "Pacific/Honolulu") Dts.Variables["strConvertedTimeZone"].Value = "Hawaiian Standard Time";
            else if (timeZone == "Pacific/Johnston") Dts.Variables["strConvertedTimeZone"].Value = "Hawaiian Standard Time";
            else if (timeZone == "Pacific/Majuro Pacific/Kwajalein") Dts.Variables["strConvertedTimeZone"].Value = "UTC+12";
            else if (timeZone == "Pacific/Midway") Dts.Variables["strConvertedTimeZone"].Value = "UTC-11";
            else if (timeZone == "Pacific/Nauru") Dts.Variables["strConvertedTimeZone"].Value = "UTC+12";
            else if (timeZone == "Pacific/Niue") Dts.Variables["strConvertedTimeZone"].Value = "UTC-11";
            else if (timeZone == "Pacific/Noumea") Dts.Variables["strConvertedTimeZone"].Value = "Central Pacific Standard Time";
            else if (timeZone == "Pacific/Pago_Pago") Dts.Variables["strConvertedTimeZone"].Value = "UTC-11";
            else if (timeZone == "Pacific/Palau") Dts.Variables["strConvertedTimeZone"].Value = "Tokyo Standard Time";
            else if (timeZone == "Pacific/Ponape Pacific/Kosrae") Dts.Variables["strConvertedTimeZone"].Value = "Central Pacific Standard Time";
            else if (timeZone == "Pacific/Port_Moresby") Dts.Variables["strConvertedTimeZone"].Value = "West Pacific Standard Time";
            else if (timeZone == "Pacific/Rarotonga") Dts.Variables["strConvertedTimeZone"].Value = "Hawaiian Standard Time";
            else if (timeZone == "Pacific/Saipan") Dts.Variables["strConvertedTimeZone"].Value = "West Pacific Standard Time";
            else if (timeZone == "Pacific/Tahiti") Dts.Variables["strConvertedTimeZone"].Value = "Hawaiian Standard Time";
            else if (timeZone == "Pacific/Tarawa") Dts.Variables["strConvertedTimeZone"].Value = "UTC+12";
            else if (timeZone == "Pacific/Tongatapu") Dts.Variables["strConvertedTimeZone"].Value = "Tonga Standard Time";
            else if (timeZone == "Pacific/Truk") Dts.Variables["strConvertedTimeZone"].Value = "West Pacific Standard Time";
            else if (timeZone == "Pacific/Wake") Dts.Variables["strConvertedTimeZone"].Value = "UTC+12";
            else if (timeZone == "Pacific/Wallis") Dts.Variables["strConvertedTimeZone"].Value = "UTC+12";
            else if (timeZone == "PST8PDT") Dts.Variables["strConvertedTimeZone"].Value = "Pacific Standard Time";
            else if (timeZone == "US/Mountain") Dts.Variables["strConvertedTimeZone"].Value = "Mountain Standard Time";
            else throw new Exception(string.Format("Unknown Olson time zone: {0}", timeZone));

			Dts.TaskResult = (int)ScriptResults.Success;
		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_d30596df958c4c0486309ea7aed19610</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_d30596df958c4c0486309ea7aed19610</msb:DisplayName>
		<msb:ProjectId>{398E511C-1886-4566-8AA5-01CDA14789A9}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_d30596df958c4c0486309ea7aed19610.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_d30596df958c4c0486309ea7aed19610")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_d30596df958c4c0486309ea7aed19610")]
[assembly: AssemblyCopyright("Copyright @  2019")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_d30596df958c4c0486309ea7aed19610.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_d30596df958c4c0486309ea7aed19610.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_d30596df958c4c0486309ea7aed19610.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_d30596df958c4c0486309ea7aed19610.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_d30596df958c4c0486309ea7aed19610.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_d30596df958c4c0486309ea7aed19610.dll">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
cG8YAAAKclURAHBvHAAACis/BnL3SABwKBsAAAosIQIoFgAACm8XAAAKcqkAAHBvGAAACnKpDQBw
bxwAAAorEXIPSQBwBigdAAAKcx4AAAp6AigWAAAKFm8fAAAKKh4CKCAAAAoqAAC0AAAAzsrvvgEA
AACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9u
PTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4
OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0
AAAAQlNKQgEAAQAAAAAADAAAAHY0LjAuMzAzMTkAAAAABQBsAAAA5AMAACN+AABQBAAA3AUAACNT
dHJpbmdzAAAAACwKAABMSQAAI1VTAHhTAAAQAAAAI0dVSUQAAACIUwAAcAEAACNCbG9iAAAAAAAA
AAIAAAFXHaIBCQMAAAD6JTMAFgAAAQAAAB8AAAAFAAAABgAAAAkAAAABAAAAIAAAAAIAAAAPAAAA
AgAAAAIAAAADAAAABAAAAAEAAAAEAAAAAQAAAAEAAAAAAAoAAQAAAAAABgDBALoACgDdAMgADgA9
ARQBBgBZAboABgBvAV4BBgCgAYsBBgBXAj0CBgCCAnACBgCZAnACBgC2AnACBgDVAnACBgDuAnAC
BgAHA3ACBgAiA3ACBgA9A3ACBgBWA3ACBgCPA28DBgCvA28DBgDgA80DBgD9A7oABgACBLoABgAm
BHACCgBSBDwECgBrBDwEBgCABG8DDgCiBBQBDgDEBBQBEgAdBf0EEgA1Bf0EBgBaBboABgB+BboA
AAAAAAEAAAAAAAEAAQAAABAAMgA8AAUAAQABAAABEABrADwACQADAAUAAQAQAHQAfwANAAQACAAD
AQAAowAAABEABAAKABEAfwETABEArAEXABEA9gE5AAYGHwJHAFaAJwJKAFaALwJKAFAgAAAAAIMY
vAEbAAEAWCAAAAAAkwjCAR8AAQCRIAAAAACTCNYBJAABAJggAAAAAJMI4gEpAAEAoCAAAAAAlggG
Aj0AAgCzIAAAAACGGLwBGwACAKcgAAAAAJEYmwSJAAIAvCAAAAAAhgAaAhsAAgDecwAAAACGGLwB
GwACAAAAAQA3AjkAvAFYAEEAvAFYAEkAvAFYAFEAvAFYAFkAvAFYAGEAvAFYAGkAvAFYAHEAvAFY
AHkAvAFYAIEAvAFYAIkAvAFdAJEAvAEbAJkAvAEbAAkAvAEbAKEAFARiAKEALwRpACkAvAFuALkA
vAF6AMkAvAEbABEAvAEbANEAvAEbABkA1gSNANkAJwWSAOEAPgWXAOkARwWdAAkAUQWhAPEAYQWl
AOkAbQWrAPEAdwWwAPkAvAFYANkAiAVdABkAvAEbAAgAFABOAAgAGABTACkAkwCAAC4AGwArAS4A
IwArAS4AYwBRAS4ACwC6AC4AEwACAS4AMwACAS4AKwArAS4AOwAxAS4AQwArAS4AWwBIAUMAawBT
AEkAkwCAAGEAmwBTAIMAqwBTAHUAtgACAAEAAwADAAAAbwEvAAAA7gE0AAAAEgJCAAIAAgADAAIA
AwAFAAEABAAFAAIABQAHAASAAAABAAAAlhvKYgAAAAAAAH8AAAAEAAAAAAAAAAAAAAABALEAAAAA
AAQAAAAAAAAAAAAAAAEAugAAAAAACwAAAAAAAAAAAAAACgD1AAAAAAALAAAAAAAAAAAAAAAKAN4E
AAAAAAAAAAABAAAAlwUAAAUABAAAAAAAADxNb2R1bGU+AFNUX2QzMDU5NmRmOTU4YzRjMDQ4NjMw
OWVhN2FlZDE5NjEwLmRsbABSZXNvdXJjZXMAU1RfZDMwNTk2ZGY5NThjNGMwNDg2MzA5ZWE3YWVk
MTk2MTAuUHJvcGVydGllcwBTZXR0aW5ncwBTY3JpcHRNYWluAFNUX2QzMDU5NmRmOTU4YzRjMDQ4
NjMwOWVhN2FlZDE5NjEwAFNjcmlwdFJlc3VsdHMAbXNjb3JsaWIAU3lzdGVtAE9iamVjdABTeXN0
ZW0uQ29uZmlndXJhdGlvbgBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBNaWNyb3NvZnQuU3FsU2Vy
dmVyLlNjcmlwdFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBW
U1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UARW51bQBTeXN0ZW0uUmVzb3VyY2VzAFJlc291cmNl
TWFuYWdlcgByZXNvdXJjZU1hbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBDdWx0dXJlSW5mbwByZXNv
dXJjZUN1bHR1cmUALmN0b3IAZ2V0X1Jlc291cmNlTWFuYWdlcgBnZXRfQ3VsdHVyZQBzZXRfQ3Vs
dHVyZQBDdWx0dXJlAGRlZmF1bHRJbnN0YW5jZQBnZXRfRGVmYXVsdABEZWZhdWx0AE1haW4AdmFs
dWVfXwBTdWNjZXNzAEZhaWx1cmUAdmFsdWUAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBUYXJn
ZXRGcmFtZXdvcmtBdHRyaWJ1dGUAU3lzdGVtLlJlZmxlY3Rpb24AQXNzZW1ibHlUaXRsZUF0dHJp
YnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0
dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRl
AEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAEFz
c2VtYmx5Q3VsdHVyZUF0dHJpYnV0ZQBBc3NlbWJseVZlcnNpb25BdHRyaWJ1dGUAU3lzdGVtLlJ1
bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAFJ1
bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAFN5c3RlbS5EaWFnbm9zdGljcwBEZWJ1Z2dlck5v
blVzZXJDb2RlQXR0cmlidXRlAFR5cGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5k
bGUAQXNzZW1ibHkAZ2V0X0Fzc2VtYmx5AFN5c3RlbS5Db21wb25lbnRNb2RlbABFZGl0b3JCcm93
c2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlU3RhdGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRy
aWJ1dGUALmNjdG9yAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBTY3JpcHRPYmpl
Y3RNb2RlbABnZXRfRHRzAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwBNaWNyb3NvZnQu
U3FsU2VydmVyLkR0cy5SdW50aW1lAFZhcmlhYmxlcwBnZXRfVmFyaWFibGVzAFZhcmlhYmxlAGdl
dF9JdGVtAGdldF9WYWx1ZQBUb1N0cmluZwBTdHJpbmcAb3BfRXF1YWxpdHkAc2V0X1ZhbHVlAEZv
cm1hdABFeGNlcHRpb24Ac2V0X1Rhc2tSZXN1bHQAU1RfZDMwNTk2ZGY5NThjNGMwNDg2MzA5ZWE3
YWVkMTk2MTAuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAAAAAHFTAFQAXwBkADMAMAA1
ADkANgBkAGYAOQA1ADgAYwA0AGMAMAA0ADgANgAzADAAOQBlAGEANwBhAGUAZAAxADkANgAxADAA
LgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAABdzAHQAcgBUAGkAbQBl
AFoAbwBuAGUAAB1BAGYAcgBpAGMAYQAvAEEAYgBpAGQAagBhAG4AAClzAHQAcgBDAG8AbgB2AGUA
cgB0AGUAZABUAGkAbQBlAFoAbwBuAGUAAC9HAHIAZQBlAG4AdwBpAGMAaAAgAFMAdABhAG4AZABh
AHIAZAAgAFQAaQBtAGUAABlBAGYAcgBpAGMAYQAvAEEAYwBjAHIAYQAAJUEAZgByAGkAYwBhAC8A
QQBkAGQAaQBzAF8AQQBiAGEAYgBhAAAvRQAuACAAQQBmAHIAaQBjAGEAIABTAHQAYQBuAGQAYQBy
AGQAIABUAGkAbQBlAAAdQQBmAHIAaQBjAGEALwBBAGwAZwBpAGUAcgBzAAA/VwAuACAAQwBlAG4A
dAByAGEAbAAgAEEAZgByAGkAYwBhACAAUwB0AGEAbgBkAGEAcgBkACAAVABpAG0AZQAAG0EAZgBy
AGkAYwBhAC8AQQBzAG0AZQByAGEAABtBAGYAcgBpAGMAYQAvAEIAYQBtAGEAawBvAAAbQQBmAHIA
aQBjAGEALwBCAGEAbgBnAHUAaQAAG0EAZgByAGkAYwBhAC8AQgBhAG4AagB1AGwAABtBAGYAcgBp
AGMAYQAvAEIAaQBzAHMAYQB1AAAfQQBmAHIAaQBjAGEALwBCAGwAYQBuAHQAeQByAGUAADVTAG8A
dQB0AGgAIABBAGYAcgBpAGMAYQAgAFMAdABhAG4AZABhAHIAZAAgAFQAaQBtAGUAACVBAGYAcgBp
AGMAYQAvAEIAcgBhAHoAegBhAHYAaQBsAGwAZQAAIUEAZgByAGkAYwBhAC8AQgB1AGoAdQBtAGIA
dQByAGEAABlBAGYAcgBpAGMAYQAvAEMAYQBpAHIAbwAAJ0UAZwB5AHAAdAAgAFMAdABhAG4AZABh
AHIAZAAgAFQAaQBtAGUAACNBAGYAcgBpAGMAYQAvAEMAYQBzAGEAYgBsAGEAbgBjAGEAACtNAG8A
cgBvAGMAYwBvACAAUwB0AGEAbgBkAGEAcgBkACAAVABpAG0AZQAAGUEAZgByAGkAYwBhAC8AQwBl
AHUAdABhAAArUgBvAG0AYQBuAGMAZQAgAFMAdABhAG4AZABhAHIAZAAgAFQAaQBtAGUAAB1BAGYA
cgBpAGMAYQAvAEMAbwBuAGEAawByAHkAABlBAGYAcgBpAGMAYQAvAEQAYQBrAGEAcgAAKUEAZgBy
AGkAYwBhAC8ARABhAHIAXwBlAHMAXwBTAGEAbABhAGEAbQAAH0EAZgByAGkAYwBhAC8ARABqAGkA
YgBvAHUAdABpAAAbQQBmAHIAaQBjAGEALwBEAG8AdQBhAGwAYQAAH0EAZgByAGkAYwBhAC8ARQBs
AF8AQQBhAGkAdQBuAAAfQQBmAHIAaQBjAGEALwBGAHIAZQBlAHQAbwB3AG4AAB9BAGYAcgBpAGMA
YQAvAEcAYQBiAG8AcgBvAG4AZQAAG0EAZgByAGkAYwBhAC8ASABhAHIAYQByAGUAACdBAGYAcgBp
AGMAYQAvAEoAbwBoAGEAbgBuAGUAcwBiAHUAcgBnAAAXQQBmAHIAaQBjAGEALwBKAHUAYgBhAAAd
QQBmAHIAaQBjAGEALwBLAGEAbQBwAGEAbABhAAAfQQBmAHIAaQBjAGEALwBLAGgAYQByAHQAbwB1
AG0AABtBAGYAcgBpAGMAYQAvAEsAaQBnAGEAbABpAAAfQQBmAHIAaQBjAGEALwBLAGkAbgBzAGgA
YQBzAGEAABlBAGYAcgBpAGMAYQAvAEwAYQBnAG8AcwAAI0EAZgByAGkAYwBhAC8ATABpAGIAcgBl
AHYAaQBsAGwAZQAAF0EAZgByAGkAYwBhAC8ATABvAG0AZQAAG0EAZgByAGkAYwBhAC8ATAB1AGEA
bgBkAGEAACNBAGYAcgBpAGMAYQAvAEwAdQBiAHUAbQBiAGEAcwBoAGkAABtBAGYAcgBpAGMAYQAv
AEwAdQBzAGEAawBhAAAbQQBmAHIAaQBjAGEALwBNAGEAbABhAGIAbwAAG0EAZgByAGkAYwBhAC8A
TQBhAHAAdQB0AG8AABtBAGYAcgBpAGMAYQAvAE0AYQBzAGUAcgB1AAAdQQBmAHIAaQBjAGEALwBN
AGIAYQBiAGEAbgBlAAAhQQBmAHIAaQBjAGEALwBNAG8AZwBhAGQAaQBzAGgAdQAAH0EAZgByAGkA
YwBhAC8ATQBvAG4AcgBvAHYAaQBhAAAdQQBmAHIAaQBjAGEALwBOAGEAaQByAG8AYgBpAAAfQQBm
AHIAaQBjAGEALwBOAGQAagBhAG0AZQBuAGEAABtBAGYAcgBpAGMAYQAvAE4AaQBhAG0AZQB5AAAj
QQBmAHIAaQBjAGEALwBOAG8AdQBhAGsAYwBoAG8AdAB0AAAlQQBmAHIAaQBjAGEALwBPAHUAYQBn
AGEAZABvAHUAZwBvAHUAACNBAGYAcgBpAGMAYQAvAFAAbwByAHQAbwAtAE4AbwB2AG8AAR9BAGYA
cgBpAGMAYQAvAFMAYQBvAF8AVABvAG0AZQAAHUEAZgByAGkAYwBhAC8AVAByAGkAcABvAGwAaQAA
GUEAZgByAGkAYwBhAC8AVAB1AG4AaQBzAAAfQQBmAHIAaQBjAGEALwBXAGkAbgBkAGgAbwBlAGsA
ACtOAGEAbQBpAGIAaQBhACAAUwB0AGEAbgBkAGEAcgBkACAAVABpAG0AZQAAI0EAbQBlAHIAaQBj
AGEALwBBAG4AYwBoAG8AcgBhAGcAZQAAK0EAbABhAHMAawBhAG4AIABTAHQAYQBuAGQAYQByAGQA
IABUAGkAbQBlAAAhQQBtAGUAcgBpAGMAYQAvAEEAbgBnAHUAaQBsAGwAYQAAMVMAQQAgAFcAZQBz
AHQAZQByAG4AIABTAHQAYQBuAGQAYQByAGQAIABUAGkAbQBlAAAfQQBtAGUAcgBpAGMAYQAvAEEA
bgB0AGkAZwB1AGEAACNBAG0AZQByAGkAYwBhAC8AQQByAGEAZwB1AGEAaQBuAGEAADFTAEEAIABF
AGEAcwB0AGUAcgBuACAAUwB0AGEAbgBkAGEAcgBkACAAVABpAG0AZQAANUEAbQBlAHIAaQBjAGEA
LwBBAHIAZwBlAG4AdABpAG4AYQAvAEwAYQBfAFIAaQBvAGoAYQAAL0EAcgBnAGUAbgB0AGkAbgBh
ACAAUwB0AGEAbgBkAGEAcgBkACAAVABpAG0AZQAAPUEAbQBlAHIAaQBjAGEALwBBAHIAZwBlAG4A
dABpAG4AYQAvAFIAaQBvAF8ARwBhAGwAbABlAGcAbwBzAAAvQQBtAGUAcgBpAGMAYQAvAEEAcgBn
AGUAbgB0AGkAbgBhAC8AUwBhAGwAdABhAAA1QQBtAGUAcgBpAGMAYQAvAEEAcgBnAGUAbgB0AGkA
bgBhAC8AUwBhAG4AXwBKAHUAYQBuAAA1QQBtAGUAcgBpAGMAYQAvAEEAcgBnAGUAbgB0AGkAbgBh
AC8AUwBhAG4AXwBMAHUAaQBzAAAzQQBtAGUAcgBpAGMAYQAvAEEAcgBnAGUAbgB0AGkAbgBhAC8A
VAB1AGMAdQBtAGEAbgAAM0EAbQBlAHIAaQBjAGEALwBBAHIAZwBlAG4AdABpAG4AYQAvAFUAcwBo
AHUAYQBpAGEAABtBAG0AZQByAGkAYwBhAC8AQQByAHUAYgBhAAAhQQBtAGUAcgBpAGMAYQAvAEEA
cwB1AG4AYwBpAG8AbgAALVAAYQByAGEAZwB1AGEAeQAgAFMAdABhAG4AZABhAHIAZAAgAFQAaQBt
AGUAABtBAG0AZQByAGkAYwBhAC8AQgBhAGgAaQBhAAAnQgBhAGgAaQBhACAAUwB0AGEAbgBkAGEA
cgBkACAAVABpAG0AZQAALUEAbQBlAHIAaQBjAGEALwBCAGEAaABpAGEAXwBCAGEAbgBkAGUAcgBh
AHMAAD1DAGUAbgB0AHIAYQBsACAAUwB0AGEAbgBkAGEAcgBkACAAVABpAG0AZQAgACgATQBlAHgA
aQBjAG8AKQAAIUEAbQBlAHIAaQBjAGEALwBCAGEAcgBiAGEAZABvAHMAABtBAG0AZQByAGkAYwBh
AC8AQgBlAGwAZQBtAAAdQQBtAGUAcgBpAGMAYQAvAEIAZQBsAGkAegBlAAA7QwBlAG4AdAByAGEA
bAAgAEEAbQBlAHIAaQBjAGEAIABTAHQAYQBuAGQAYQByAGQAIABUAGkAbQBlAAApQQBtAGUAcgBp
AGMAYQAvAEIAbABhAG4AYwAtAFMAYQBiAGwAbwBuAAEjQQBtAGUAcgBpAGMAYQAvAEIAbwBhAF8A
VgBpAHMAdABhAAAdQQBtAGUAcgBpAGMAYQAvAEIAbwBnAG8AdABhAAAxUwBBACAAUABhAGMAaQBm
AGkAYwAgAFMAdABhAG4AZABhAHIAZAAgAFQAaQBtAGUAABtBAG0AZQByAGkAYwBhAC8AQgBvAGkA
cwBlAAAtTQBvAHUAbgB0AGEAaQBuACAAUwB0AGEAbgBkAGEAcgBkACAAVABpAG0AZQAAKUEAbQBl
AHIAaQBjAGEALwBCAHUAZQBuAG8AcwBfAEEAaQByAGUAcwAAPUEAbQBlAHIAaQBjAGEALwBBAHIA
ZwBlAG4AdABpAG4AYQAvAEIAdQBlAG4AbwBzAF8AQQBpAHIAZQBzAAArQQBtAGUAcgBpAGMAYQAv
AEMAYQBtAGIAcgBpAGQAZwBlAF8AQgBhAHkAAClBAG0AZQByAGkAYwBhAC8AQwBhAG0AcABvAF8A
RwByAGEAbgBkAGUAAD9DAGUAbgB0AHIAYQBsACAAQgByAGEAegBpAGwAaQBhAG4AIABTAHQAYQBu
AGQAYQByAGQAIABUAGkAbQBlAAAdQQBtAGUAcgBpAGMAYQAvAEMAYQBuAGMAdQBuAAAfQQBtAGUA
cgBpAGMAYQAvAEMAYQByAGEAYwBhAHMAAC9WAGUAbgBlAHoAdQBlAGwAYQAgAFMAdABhAG4AZABh
AHIAZAAgAFQAaQBtAGUAACNBAG0AZQByAGkAYwBhAC8AQwBhAHQAYQBtAGEAcgBjAGEAAB9BAG0A
ZQByAGkAYwBhAC8AQwBhAHkAZQBuAG4AZQAAHUEAbQBlAHIAaQBjAGEALwBDAGEAeQBtAGEAbgAA
H0EAbQBlAHIAaQBjAGEALwBDAGgAaQBjAGEAZwBvAAArQwBlAG4AdAByAGEAbAAgAFMAdABhAG4A
ZABhAHIAZAAgAFQAaQBtAGUAACNBAG0AZQByAGkAYwBhAC8AQwBoAGkAaAB1AGEAaAB1AGEAAD9N
AG8AdQBuAHQAYQBpAG4AIABTAHQAYQBuAGQAYQByAGQAIABUAGkAbQBlACAAKABNAGUAeABpAGMA
bwApAAArQQBtAGUAcgBpAGMAYQAvAEMAbwByAGEAbABfAEgAYQByAGIAbwB1AHIAAB9BAG0AZQBy
AGkAYwBhAC8AQwBvAHIAZABvAGIAYQAAJUEAbQBlAHIAaQBjAGEALwBDAG8AcwB0AGEAXwBSAGkA
YwBhAAAdQQBtAGUAcgBpAGMAYQAvAEMAdQBpAGEAYgBhAAAfQQBtAGUAcgBpAGMAYQAvAEMAdQBy
AGEAYwBhAG8AAClBAG0AZQByAGkAYwBhAC8ARABhAG4AbQBhAHIAawBzAGgAYQB2AG4AAAdVAFQA
QwAAHUEAbQBlAHIAaQBjAGEALwBEAGEAdwBzAG8AbgAAK1AAYQBjAGkAZgBpAGMAIABTAHQAYQBu
AGQAYQByAGQAIABUAGkAbQBlAAApQQBtAGUAcgBpAGMAYQAvAEQAYQB3AHMAbwBuAF8AQwByAGUA
ZQBrAAAzVQBTACAATQBvAHUAbgB0AGEAaQBuACAAUwB0AGEAbgBkAGEAcgBkACAAVABpAG0AZQAA
HUEAbQBlAHIAaQBjAGEALwBEAGUAbgB2AGUAcgAAH0EAbQBlAHIAaQBjAGEALwBEAGUAdAByAG8A
aQB0AAArRQBhAHMAdABlAHIAbgAgAFMAdABhAG4AZABhAHIAZAAgAFQAaQBtAGUAACFBAG0AZQBy
AGkAYwBhAC8ARABvAG0AaQBuAGkAYwBhAAAhQQBtAGUAcgBpAGMAYQAvAEUAZABtAG8AbgB0AG8A
bgAAIUEAbQBlAHIAaQBjAGEALwBFAGkAcgB1AG4AZQBwAGUAACdBAG0AZQByAGkAYwBhAC8ARQBs
AF8AUwBhAGwAdgBhAGQAbwByAAAjQQBtAGUAcgBpAGMAYQAvAEYAbwByAHQAYQBsAGUAegBhAAAj
QQBtAGUAcgBpAGMAYQAvAEcAbABhAGMAZQBfAEIAYQB5AAAtQQB0AGwAYQBuAHQAaQBjACAAUwB0
AGEAbgBkAGEAcgBkACAAVABpAG0AZQAAH0EAbQBlAHIAaQBjAGEALwBHAG8AZAB0AGgAYQBiAAAv
RwByAGUAZQBuAGwAYQBuAGQAIABTAHQAYQBuAGQAYQByAGQAIABUAGkAbQBlAAAjQQBtAGUAcgBp
AGMAYQAvAEcAbwBvAHMAZQBfAEIAYQB5AAAlQQBtAGUAcgBpAGMAYQAvAEcAcgBhAG4AZABfAFQA
dQByAGsAAB9BAG0AZQByAGkAYwBhAC8ARwByAGUAbgBhAGQAYQAAJUEAbQBlAHIAaQBjAGEALwBH
AHUAYQBkAGUAbABvAHUAcABlAAAjQQBtAGUAcgBpAGMAYQAvAEcAdQBhAHQAZQBtAGEAbABhAAAj
QQBtAGUAcgBpAGMAYQAvAEcAdQBhAHkAYQBxAHUAaQBsAAAdQQBtAGUAcgBpAGMAYQAvAEcAdQB5
AGEAbgBhAAAfQQBtAGUAcgBpAGMAYQAvAEgAYQBsAGkAZgBhAHgAACVBAG0AZQByAGkAYwBhAC8A
SABlAHIAbQBvAHMAaQBsAGwAbwAAKUEAbQBlAHIAaQBjAGEALwBJAG4AZABpAGEAbgBhAC8ASwBu
AG8AeAAAL0EAbQBlAHIAaQBjAGEALwBJAG4AZABpAGEAbgBhAC8ATQBhAHIAZQBuAGcAbwAAMVUA
UwAgAEUAYQBzAHQAZQByAG4AIABTAHQAYQBuAGQAYQByAGQAIABUAGkAbQBlAAA1QQBtAGUAcgBp
AGMAYQAvAEkAbgBkAGkAYQBuAGEALwBQAGUAdABlAHIAcwBiAHUAcgBnAAAzQQBtAGUAcgBpAGMA
YQAvAEkAbgBkAGkAYQBuAGEALwBUAGUAbABsAF8AQwBpAHQAeQAAK0EAbQBlAHIAaQBjAGEALwBJ
AG4AZABpAGEAbgBhAC8AVgBlAHYAYQB5AAAzQQBtAGUAcgBpAGMAYQAvAEkAbgBkAGkAYQBuAGEA
LwBWAGkAbgBjAGUAbgBuAGUAcwAAL0EAbQBlAHIAaQBjAGEALwBJAG4AZABpAGEAbgBhAC8AVwBp
AG4AYQBtAGEAYwAAKUEAbQBlAHIAaQBjAGEALwBJAG4AZABpAGEAbgBhAHAAbwBsAGkAcwAAHUEA
bQBlAHIAaQBjAGEALwBJAG4AdQB2AGkAawAAH0EAbQBlAHIAaQBjAGEALwBJAHEAYQBsAHUAaQB0
AAAfQQBtAGUAcgBpAGMAYQAvAEoAYQBtAGEAaQBjAGEAABtBAG0AZQByAGkAYwBhAC8ASgB1AGoA
dQB5AAAdQQBtAGUAcgBpAGMAYQAvAEoAdQBuAGUAYQB1AAA3QQBtAGUAcgBpAGMAYQAvAEsAZQBu
AHQAdQBjAGsAeQAvAE0AbwBuAHQAaQBjAGUAbABsAG8AAB1BAG0AZQByAGkAYwBhAC8ATABhAF8A
UABhAHoAABlBAG0AZQByAGkAYwBhAC8ATABpAG0AYQAAJ0EAbQBlAHIAaQBjAGEALwBMAG8AcwBf
AEEAbgBnAGUAbABlAHMAACVBAG0AZQByAGkAYwBhAC8ATABvAHUAaQBzAHYAaQBsAGwAZQAAHUEA
bQBlAHIAaQBjAGEALwBNAGEAYwBlAGkAbwAAH0EAbQBlAHIAaQBjAGEALwBNAGEAbgBhAGcAdQBh
AAAdQQBtAGUAcgBpAGMAYQAvAE0AYQBuAGEAdQBzAAAfQQBtAGUAcgBpAGMAYQAvAE0AYQByAGkA
ZwBvAHQAACVBAG0AZQByAGkAYwBhAC8ATQBhAHIAdABpAG4AaQBxAHUAZQAAI0EAbQBlAHIAaQBj
AGEALwBNAGEAdABhAG0AbwByAG8AcwAAIUEAbQBlAHIAaQBjAGEALwBNAGEAegBhAHQAbABhAG4A
AB9BAG0AZQByAGkAYwBhAC8ATQBlAG4AZABvAHoAYQAAI0EAbQBlAHIAaQBjAGEALwBNAGUAbgBv
AG0AaQBuAGUAZQAAHUEAbQBlAHIAaQBjAGEALwBNAGUAcgBpAGQAYQAAJ0EAbQBlAHIAaQBjAGEA
LwBNAGUAeABpAGMAbwBfAEMAaQB0AHkAAB9BAG0AZQByAGkAYwBhAC8ATQBvAG4AYwB0AG8AbgAA
I0EAbQBlAHIAaQBjAGEALwBNAG8AbgB0AGUAcgByAGUAeQAAJUEAbQBlAHIAaQBjAGEALwBNAG8A
bgB0AGUAdgBpAGQAZQBvAAAxTQBvAG4AdABlAHYAaQBkAGUAbwAgAFMAdABhAG4AZABhAHIAZAAg
AFQAaQBtAGUAACFBAG0AZQByAGkAYwBhAC8ATQBvAG4AdAByAGUAYQBsAAAlQQBtAGUAcgBpAGMA
YQAvAE0AbwBuAHQAcwBlAHIAcgBhAHQAAB1BAG0AZQByAGkAYwBhAC8ATgBhAHMAcwBhAHUAACFB
AG0AZQByAGkAYwBhAC8ATgBlAHcAXwBZAG8AcgBrAAAfQQBtAGUAcgBpAGMAYQAvAE4AaQBwAGkA
ZwBvAG4AABlBAG0AZQByAGkAYwBhAC8ATgBvAG0AZQAAH0EAbQBlAHIAaQBjAGEALwBOAG8AcgBv
AG4AaABhAAANVQBUAEMALQAwADIAATdBAG0AZQByAGkAYwBhAC8ATgBvAHIAdABoAF8ARABhAGsA
bwB0AGEALwBCAGUAdQBsAGEAaAAAN0EAbQBlAHIAaQBjAGEALwBOAG8AcgB0AGgAXwBEAGEAawBv
AHQAYQAvAEMAZQBuAHQAZQByAAA9QQBtAGUAcgBpAGMAYQAvAE4AbwByAHQAaABfAEQAYQBrAG8A
dABhAC8ATgBlAHcAXwBTAGEAbABlAG0AAB9BAG0AZQByAGkAYwBhAC8ATwBqAGkAbgBhAGcAYQAA
HUEAbQBlAHIAaQBjAGEALwBQAGEAbgBhAG0AYQAAJ0EAbQBlAHIAaQBjAGEALwBQAGEAbgBnAG4A
aQByAHQAdQBuAGcAACVBAG0AZQByAGkAYwBhAC8AUABhAHIAYQBtAGEAcgBpAGIAbwAAH0EAbQBl
AHIAaQBjAGEALwBQAGgAbwBlAG4AaQB4AAArQQBtAGUAcgBpAGMAYQAvAFAAbwByAHQAXwBvAGYA
XwBTAHAAYQBpAG4AAC1BAG0AZQByAGkAYwBhAC8AUABvAHIAdAAtAGEAdQAtAFAAcgBpAG4AYwBl
AAEnQQBtAGUAcgBpAGMAYQAvAFAAbwByAHQAbwBfAFYAZQBsAGgAbwAAJ0EAbQBlAHIAaQBjAGEA
LwBQAHUAZQByAHQAbwBfAFIAaQBjAG8AACdBAG0AZQByAGkAYwBhAC8AUgBhAGkAbgB5AF8AUgBp
AHYAZQByAAApQQBtAGUAcgBpAGMAYQAvAFIAYQBuAGsAaQBuAF8ASQBuAGwAZQB0AAAdQQBtAGUA
cgBpAGMAYQAvAFIAZQBjAGkAZgBlAAAdQQBtAGUAcgBpAGMAYQAvAFIAZQBnAGkAbgBhAAA5QwBh
AG4AYQBkAGEAIABDAGUAbgB0AHIAYQBsACAAUwB0AGEAbgBkAGEAcgBkACAAVABpAG0AZQAAIUEA
bQBlAHIAaQBjAGEALwBSAGUAcwBvAGwAdQB0AGUAACVBAG0AZQByAGkAYwBhAC8AUgBpAG8AXwBC
AHIAYQBuAGMAbwAAKUEAbQBlAHIAaQBjAGEALwBTAGEAbgB0AGEAXwBJAHMAYQBiAGUAbAAAPVAA
YQBjAGkAZgBpAGMAIABTAHQAYQBuAGQAYQByAGQAIABUAGkAbQBlACAAKABNAGUAeABpAGMAbwAp
AAAhQQBtAGUAcgBpAGMAYQAvAFMAYQBuAHQAYQByAGUAbQAAIUEAbQBlAHIAaQBjAGEALwBTAGEA
bgB0AGkAYQBnAG8AADFQAGEAYwBpAGYAaQBjACAAUwBBACAAUwB0AGEAbgBkAGEAcgBkACAAVABp
AG0AZQAAK0EAbQBlAHIAaQBjAGEALwBTAGEAbgB0AG8AXwBEAG8AbQBpAG4AZwBvAAAjQQBtAGUA
cgBpAGMAYQAvAFMAYQBvAF8AUABhAHUAbABvAAA9RQAuACAAUwBvAHUAdABoACAAQQBtAGUAcgBp
AGMAYQAgAFMAdABhAG4AZABhAHIAZAAgAFQAaQBtAGUAAClBAG0AZQByAGkAYwBhAC8AUwBjAG8A
cgBlAHMAYgB5AHMAdQBuAGQAAClBAHoAbwByAGUAcwAgAFMAdABhAG4AZABhAHIAZAAgAFQAaQBt
AGUAACFBAG0AZQByAGkAYwBhAC8AUwBoAGkAcAByAG8AYwBrAAAbQQBtAGUAcgBpAGMAYQAvAFMA
aQB0AGsAYQAAK0EAbQBlAHIAaQBjAGEALwBTAHQAXwBCAGEAcgB0AGgAZQBsAGUAbQB5AAAhQQBt
AGUAcgBpAGMAYQAvAFMAdABfAEoAbwBoAG4AcwAANU4AZQB3AGYAbwB1AG4AZABsAGEAbgBkACAA
UwB0AGEAbgBkAGEAcgBkACAAVABpAG0AZQAAIUEAbQBlAHIAaQBjAGEALwBTAHQAXwBLAGkAdAB0
AHMAACFBAG0AZQByAGkAYwBhAC8AUwB0AF8ATAB1AGMAaQBhAAAjQQBtAGUAcgBpAGMAYQAvAFMA
dABfAFQAaABvAG0AYQBzAAAlQQBtAGUAcgBpAGMAYQAvAFMAdABfAFYAaQBuAGMAZQBuAHQAACtB
AG0AZQByAGkAYwBhAC8AUwB3AGkAZgB0AF8AQwB1AHIAcgBlAG4AdAAAJ0EAbQBlAHIAaQBjAGEA
LwBUAGUAZwB1AGMAaQBnAGEAbABwAGEAABtBAG0AZQByAGkAYwBhAC8AVABoAHUAbABlAAAnQQBt
AGUAcgBpAGMAYQAvAFQAaAB1AG4AZABlAHIAXwBCAGEAeQAAH0EAbQBlAHIAaQBjAGEALwBUAGkA
agB1AGEAbgBhAAAfQQBtAGUAcgBpAGMAYQAvAFQAbwByAG8AbgB0AG8AAB9BAG0AZQByAGkAYwBh
AC8AVABvAHIAdABvAGwAYQAAI0EAbQBlAHIAaQBjAGEALwBWAGEAbgBjAG8AdQB2AGUAcgAAJUEA
bQBlAHIAaQBjAGEALwBXAGgAaQB0AGUAaABvAHIAcwBlAAAhQQBtAGUAcgBpAGMAYQAvAFcAaQBu
AG4AaQBwAGUAZwAAH0EAbQBlAHIAaQBjAGEALwBZAGEAawB1AHQAYQB0AAAnQQBtAGUAcgBpAGMA
YQAvAFkAZQBsAGwAbwB3AGsAbgBpAGYAZQAAIUEAbgB0AGEAcgBjAHQAaQBjAGEALwBDAGEAcwBl
AHkAADVXAC4AIABBAHUAcwB0AHIAYQBsAGkAYQAgAFMAdABhAG4AZABhAHIAZAAgAFQAaQBtAGUA
ACFBAG4AdABhAHIAYwB0AGkAYwBhAC8ARABhAHYAaQBzAAArUwBFACAAQQBzAGkAYQAgAFMAdABh
AG4AZABhAHIAZAAgAFQAaQBtAGUAADNBAG4AdABhAHIAYwB0AGkAYwBhAC8ARAB1AG0AbwBuAHQA
RABVAHIAdgBpAGwAbABlAAA1VwBlAHMAdAAgAFAAYQBjAGkAZgBpAGMAIABTAHQAYQBuAGQAYQBy
AGQAIABUAGkAbQBlAAApQQBuAHQAYQByAGMAdABpAGMAYQAvAE0AYQBjAHEAdQBhAHIAaQBlAAA7
QwBlAG4AdAByAGEAbAAgAFAAYQBjAGkAZgBpAGMAIABTAHQAYQBuAGQAYQByAGQAIABUAGkAbQBl
AAAjQQBuAHQAYQByAGMAdABpAGMAYQAvAE0AYQB3AHMAbwBuAAAvVwBlAHMAdAAgAEEAcwBpAGEA
IABTAHQAYQBuAGQAYQByAGQAIABUAGkAbQBlAAAlQQBuAHQAYQByAGMAdABpAGMAYQAvAE0AYwBN
AHUAcgBkAG8AADNOAGUAdwAgAFoAZQBhAGwAYQBuAGQAIABTAHQAYQBuAGQAYQByAGQAIABUAGkA
bQBlAAAjQQBuAHQAYQByAGMAdABpAGMAYQAvAFAAYQBsAG0AZQByAAAlQQBuAHQAYQByAGMAdABp
AGMAYQAvAFIAbwB0AGgAZQByAGEAACtBAG4AdABhAHIAYwB0AGkAYwBhAC8AUwBvAHUAdABoAF8A
UABvAGwAZQAAIUEAbgB0AGEAcgBjAHQAaQBjAGEALwBTAHkAbwB3AGEAACNBAG4AdABhAHIAYwB0
AGkAYwBhAC8AVgBvAHMAdABvAGsAADVDAGUAbgB0AHIAYQBsACAAQQBzAGkAYQAgAFMAdABhAG4A
ZABhAHIAZAAgAFQAaQBtAGUAACdBAHIAYwB0AGkAYwAvAEwAbwBuAGcAeQBlAGEAcgBiAHkAZQBu
AAAvVwAuACAARQB1AHIAbwBwAGUAIABTAHQAYQBuAGQAYQByAGQAIABUAGkAbQBlAAATQQBzAGkA
YQAvAEEAZABlAG4AACVBAHIAYQBiACAAUwB0AGEAbgBkAGEAcgBkACAAVABpAG0AZQAAF0EAcwBp
AGEALwBBAGwAbQBhAHQAeQAAFUEAcwBpAGEALwBBAG0AbQBhAG4AAClKAG8AcgBkAGEAbgAgAFMA
dABhAG4AZABhAHIAZAAgAFQAaQBtAGUAABdBAHMAaQBhAC8AQQBuAGEAZAB5AHIAACtNAGEAZwBh
AGQAYQBuACAAUwB0AGEAbgBkAGEAcgBkACAAVABpAG0AZQAAFUEAcwBpAGEALwBBAHEAdABhAHUA
ABdBAHMAaQBhAC8AQQBxAHQAbwBiAGUAABtBAHMAaQBhAC8AQQBzAGgAZwBhAGIAYQB0AAAZQQBz
AGkAYQAvAEIAYQBnAGgAZABhAGQAAClBAHIAYQBiAGkAYwAgAFMAdABhAG4AZABhAHIAZAAgAFQA
aQBtAGUAABlBAHMAaQBhAC8AQgBhAGgAcgBhAGkAbgAAE0EAcwBpAGEALwBCAGEAawB1AAAxQQB6
AGUAcgBiAGEAaQBqAGEAbgAgAFMAdABhAG4AZABhAHIAZAAgAFQAaQBtAGUAABlBAHMAaQBhAC8A
QgBhAG4AZwBrAG8AawAAF0EAcwBpAGEALwBCAGUAaQByAHUAdAAAM00AaQBkAGQAbABlACAARQBh
AHMAdAAgAFMAdABhAG4AZABhAHIAZAAgAFQAaQBtAGUAABlBAHMAaQBhAC8AQgBpAHMAaABrAGUA
awAAF0EAcwBpAGEALwBCAHIAdQBuAGUAaQAAL1MAaQBuAGcAYQBwAG8AcgBlACAAUwB0AGEAbgBk
AGEAcgBkACAAVABpAG0AZQAAG0EAcwBpAGEALwBDAGEAbABjAHUAdAB0AGEAACdJAG4AZABpAGEA
IABTAHQAYQBuAGQAYQByAGQAIABUAGkAbQBlAAAfQQBzAGkAYQAvAEMAaABvAGkAYgBhAGwAcwBh
AG4AADNVAGwAYQBhAG4AYgBhAGEAdABhAHIAIABTAHQAYQBuAGQAYQByAGQAIABUAGkAbQBlAAAd
QQBzAGkAYQAvAEMAaABvAG4AZwBxAGkAbgBnAAAnQwBoAGkAbgBhACAAUwB0AGEAbgBkAGEAcgBk
ACAAVABpAG0AZQAAGUEAcwBpAGEALwBDAG8AbABvAG0AYgBvAAAvUwByAGkAIABMAGEAbgBrAGEA
IABTAHQAYQBuAGQAYQByAGQAIABUAGkAbQBlAAAbQQBzAGkAYQAvAEQAYQBtAGEAcwBjAHUAcwAA
J1MAeQByAGkAYQAgAFMAdABhAG4AZABhAHIAZAAgAFQAaQBtAGUAABVBAHMAaQBhAC8ARABoAGEA
awBhAAAxQgBhAG4AZwBsAGEAZABlAHMAaAAgAFMAdABhAG4AZABhAHIAZAAgAFQAaQBtAGUAABNB
AHMAaQBhAC8ARABpAGwAaQAAJ1QAbwBrAHkAbwAgAFMAdABhAG4AZABhAHIAZAAgAFQAaQBtAGUA
ABVBAHMAaQBhAC8ARAB1AGIAYQBpAAArQQByAGEAYgBpAGEAbgAgAFMAdABhAG4AZABhAHIAZAAg
AFQAaQBtAGUAABtBAHMAaQBhAC8ARAB1AHMAaABhAG4AYgBlAAATQQBzAGkAYQAvAEcAYQB6AGEA
ABdBAHMAaQBhAC8ASABhAHIAYgBpAG4AABdBAHMAaQBhAC8ASABlAGIAcgBvAG4AAB1BAHMAaQBh
AC8ASABvAG4AZwBfAEsAbwBuAGcAABNBAHMAaQBhAC8ASABvAHYAZAAAGUEAcwBpAGEALwBJAHIA
awB1AHQAcwBrAAA7TgBvAHIAdABoACAAQQBzAGkAYQAgAEUAYQBzAHQAIABTAHQAYQBuAGQAYQBy
AGQAIABUAGkAbQBlAAAZQQBzAGkAYQAvAEoAYQBrAGEAcgB0AGEAABtBAHMAaQBhAC8ASgBhAHkA
YQBwAHUAcgBhAAAdQQBzAGkAYQAvAEoAZQByAHUAcwBhAGwAZQBtAAApSQBzAHIAYQBlAGwAIABT
AHQAYQBuAGQAYQByAGQAIABUAGkAbQBlAAAVQQBzAGkAYQAvAEsAYQBiAHUAbAAAM0EAZgBnAGgA
YQBuAGkAcwB0AGEAbgAgAFMAdABhAG4AZABhAHIAZAAgAFQAaQBtAGUAAB1BAHMAaQBhAC8ASwBh
AG0AYwBoAGEAdABrAGEAABlBAHMAaQBhAC8ASwBhAHIAYQBjAGgAaQAALVAAYQBrAGkAcwB0AGEA
bgAgAFMAdABhAG4AZABhAHIAZAAgAFQAaQBtAGUAABlBAHMAaQBhAC8ASwBhAHMAaABnAGEAcgAA
G0EAcwBpAGEALwBLAGEAdABtAGEAbgBkAHUAACdOAGUAcABhAGwAIABTAHQAYQBuAGQAYQByAGQA
IABUAGkAbQBlAAAZQQBzAGkAYQAvAEsAbwBsAGsAYQB0AGEAACFBAHMAaQBhAC8ASwByAGEAcwBu
AG8AeQBhAHIAcwBrAAAxTgBvAHIAdABoACAAQQBzAGkAYQAgAFMAdABhAG4AZABhAHIAZAAgAFQA
aQBtAGUAACNBAHMAaQBhAC8ASwB1AGEAbABhAF8ATAB1AG0AcAB1AHIAABlBAHMAaQBhAC8ASwB1
AGMAaABpAG4AZwAAF0EAcwBpAGEALwBLAHUAdwBhAGkAdAAAFUEAcwBpAGEALwBNAGEAYwBhAHUA
ABlBAHMAaQBhAC8ATQBhAGcAYQBkAGEAbgAAG0EAcwBpAGEALwBNAGEAawBhAHMAcwBhAHIAABdB
AHMAaQBhAC8ATQBhAG4AaQBsAGEAABdBAHMAaQBhAC8ATQB1AHMAYwBhAHQAABlBAHMAaQBhAC8A
TgBpAGMAbwBzAGkAYQAAL0UALgAgAEUAdQByAG8AcABlACAAUwB0AGEAbgBkAGEAcgBkACAAVABp
AG0AZQAAI0EAcwBpAGEALwBOAG8AdgBvAGsAdQB6AG4AZQB0AHMAawAAO04ALgAgAEMAZQBuAHQA
cgBhAGwAIABBAHMAaQBhACAAUwB0AGEAbgBkAGEAcgBkACAAVABpAG0AZQAAIUEAcwBpAGEALwBO
AG8AdgBvAHMAaQBiAGkAcgBzAGsAABNBAHMAaQBhAC8ATwBtAHMAawAAE0EAcwBpAGEALwBPAHIA
YQBsAAAfQQBzAGkAYQAvAFAAaABuAG8AbQBfAFAAZQBuAGgAAB1BAHMAaQBhAC8AUABvAG4AdABp
AGEAbgBhAGsAAB1BAHMAaQBhAC8AUAB5AG8AbgBnAHkAYQBuAGcAACdLAG8AcgBlAGEAIABTAHQA
YQBuAGQAYQByAGQAIABUAGkAbQBlAAAVQQBzAGkAYQAvAFEAYQB0AGEAcgAAHUEAcwBpAGEALwBR
AHkAegB5AGwAbwByAGQAYQAAGUEAcwBpAGEALwBSAGEAbgBnAG8AbwBuAAArTQB5AGEAbgBtAGEA
cgAgAFMAdABhAG4AZABhAHIAZAAgAFQAaQBtAGUAABdBAHMAaQBhAC8AUgBpAHkAYQBkAGgAABdB
AHMAaQBhAC8AUwBhAGkAZwBvAG4AABtBAHMAaQBhAC8AUwBhAGsAaABhAGwAaQBuAAAzVgBsAGEA
ZABpAHYAbwBzAHQAbwBrACAAUwB0AGEAbgBkAGEAcgBkACAAVABpAG0AZQAAHUEAcwBpAGEALwBT
AGEAbQBhAHIAawBhAG4AZAAAFUEAcwBpAGEALwBTAGUAbwB1AGwAABtBAHMAaQBhAC8AUwBoAGEA
bgBnAGgAYQBpAAAdQQBzAGkAYQAvAFMAaQBuAGcAYQBwAG8AcgBlAAAXQQBzAGkAYQAvAFQAYQBp
AHAAZQBpAAApVABhAGkAcABlAGkAIABTAHQAYQBuAGQAYQByAGQAIABUAGkAbQBlAAAbQQBzAGkA
YQAvAFQAYQBzAGgAawBlAG4AdAAAGUEAcwBpAGEALwBUAGIAaQBsAGkAcwBpAAAtRwBlAG8AcgBn
AGkAYQBuACAAUwB0AGEAbgBkAGEAcgBkACAAVABpAG0AZQAAF0EAcwBpAGEALwBUAGUAaAByAGEA
bgAAJUkAcgBhAG4AIABTAHQAYQBuAGQAYQByAGQAIABUAGkAbQBlAAAZQQBzAGkAYQAvAFQAaABp
AG0AcABoAHUAABVBAHMAaQBhAC8AVABvAGsAeQBvAAAhQQBzAGkAYQAvAFUAbABhAGEAbgBiAGEA
YQB0AGEAcgAAF0EAcwBpAGEALwBVAHIAdQBtAHEAaQAAHUEAcwBpAGEALwBWAGkAZQBuAHQAaQBh
AG4AZQAAIUEAcwBpAGEALwBWAGwAYQBkAGkAdgBvAHMAdABvAGsAABlBAHMAaQBhAC8AWQBhAGsA
dQB0AHMAawAAK1kAYQBrAHUAdABzAGsAIABTAHQAYQBuAGQAYQByAGQAIABUAGkAbQBlAAAlQQBz
AGkAYQAvAFkAZQBrAGEAdABlAHIAaQBuAGIAdQByAGcAADVFAGsAYQB0AGUAcgBpAG4AYgB1AHIA
ZwAgAFMAdABhAG4AZABhAHIAZAAgAFQAaQBtAGUAABlBAHMAaQBhAC8AWQBlAHIAZQB2AGEAbgAA
LUMAYQB1AGMAYQBzAHUAcwAgAFMAdABhAG4AZABhAHIAZAAgAFQAaQBtAGUAAB9BAHQAbABhAG4A
dABpAGMALwBBAHoAbwByAGUAcwAAIUEAdABsAGEAbgB0AGkAYwAvAEIAZQByAG0AdQBkAGEAAB9B
AHQAbABhAG4AdABpAGMALwBDAGEAbgBhAHIAeQAAI0cATQBUACAAUwB0AGEAbgBkAGEAcgBkACAA
VABpAG0AZQAAJ0EAdABsAGEAbgB0AGkAYwAvAEMAYQBwAGUAXwBWAGUAcgBkAGUAADFDAGEAcABl
ACAAVgBlAHIAZABlACAAUwB0AGEAbgBkAGEAcgBkACAAVABpAG0AZQAAH0EAdABsAGEAbgB0AGkA
YwAvAEYAYQBlAHIAbwBlAAAhQQB0AGwAYQBuAHQAaQBjAC8ATQBhAGQAZQBpAHIAYQAAJUEAdABs
AGEAbgB0AGkAYwAvAFIAZQB5AGsAagBhAHYAaQBrAAAtQQB0AGwAYQBuAHQAaQBjAC8AUwBvAHUA
dABoAF8ARwBlAG8AcgBnAGkAYQAAJUEAdABsAGEAbgB0AGkAYwAvAFMAdABfAEgAZQBsAGUAbgBh
AAAlQQB1AHMAdAByAGEAbABpAGEALwBBAGQAZQBsAGEAaQBkAGUAADlDAGUAbgAuACAAQQB1AHMA
dAByAGEAbABpAGEAIABTAHQAYQBuAGQAYQByAGQAIABUAGkAbQBlAAAlQQB1AHMAdAByAGEAbABp
AGEALwBCAHIAaQBzAGIAYQBuAGUAADVFAC4AIABBAHUAcwB0AHIAYQBsAGkAYQAgAFMAdABhAG4A
ZABhAHIAZAAgAFQAaQBtAGUAACtBAHUAcwB0AHIAYQBsAGkAYQAvAEIAcgBvAGsAZQBuAF8ASABp
AGwAbAAAIUEAdQBzAHQAcgBhAGwAaQBhAC8AQwB1AHIAcgBpAGUAAC1UAGEAcwBtAGEAbgBpAGEA
IABTAHQAYQBuAGQAYQByAGQAIABUAGkAbQBlAAAhQQB1AHMAdAByAGEAbABpAGEALwBEAGEAcgB3
AGkAbgAAM0EAVQBTACAAQwBlAG4AdAByAGEAbAAgAFMAdABhAG4AZABhAHIAZAAgAFQAaQBtAGUA
ACFBAHUAcwB0AHIAYQBsAGkAYQAvAEgAbwBiAGEAcgB0AAAlQQB1AHMAdAByAGEAbABpAGEALwBM
AGkAbgBkAGUAbQBhAG4AACdBAHUAcwB0AHIAYQBsAGkAYQAvAE0AZQBsAGIAbwB1AHIAbgBlAAAz
QQBVAFMAIABFAGEAcwB0AGUAcgBuACAAUwB0AGEAbgBkAGEAcgBkACAAVABpAG0AZQAAH0EAdQBz
AHQAcgBhAGwAaQBhAC8AUABlAHIAdABoAAApQQB1AHMAdAByAGEAbABpAGEALwBRAHUAZQBlAG4A
cwBsAGEAbgBkAAAhQQB1AHMAdAByAGEAbABpAGEALwBTAHkAZABuAGUAeQAAHUEAdQBzAHQAcgBh
AGwAaQBhAC8AVwBlAHMAdAAAHUMAYQBuAGEAZABhAC8AQwBlAG4AdAByAGEAbAAAHUMAYQBuAGEA
ZABhAC8ARQBhAHMAdABlAHIAbgAAH0MAYQBuAGEAZABhAC8ATQBvAHUAbgB0AGEAaQBuAAAdQwBh
AG4AYQBkAGEALwBQAGEAYwBpAGYAaQBjAAAPQwBTAFQANgBDAEQAVAAAD0UAUwBUADUARQBEAFQA
AA9FAHQAYwAvAEcATQBUAAATRQB0AGMALwBHAE0AVAArADEAABVFAHQAYwAvAEcATQBUACsAMQAw
AAAtSABhAHcAYQBpAGkAYQBuACAAUwB0AGEAbgBkAGEAcgBkACAAVABpAG0AZQAAFUUAdABjAC8A
RwBNAFQAKwAxADEAAA1VAFQAQwAtADEAMQABFUUAdABjAC8ARwBNAFQAKwAxADIAAC1EAGEAdABl
AGwAaQBuAGUAIABTAHQAYQBuAGQAYQByAGQAIABUAGkAbQBlAAATRQB0AGMALwBHAE0AVAArADIA
ABNFAHQAYwAvAEcATQBUACsAMwAAE0UAdABjAC8ARwBNAFQAKwA0AAATRQB0AGMALwBHAE0AVAAr
ADUAABNFAHQAYwAvAEcATQBUACsANgAAE0UAdABjAC8ARwBNAFQAKwA3AAATRQB0AGMALwBHAE0A
VAAtADEAARVFAHQAYwAvAEcATQBUAC0AMQAwAAEVRQB0AGMALwBHAE0AVAAtADEAMQABFUUAdABj
AC8ARwBNAFQALQAxADIAAQ1VAFQAQwArADEAMgAAFUUAdABjAC8ARwBNAFQALQAxADMAASdUAG8A
bgBnAGEAIABTAHQAYQBuAGQAYQByAGQAIABUAGkAbQBlAAATRQB0AGMALwBHAE0AVAAtADIAARNF
AHQAYwAvAEcATQBUAC0AMwABE0UAdABjAC8ARwBNAFQALQA0AAETRQB0AGMALwBHAE0AVAAtADUA
ARNFAHQAYwAvAEcATQBUAC0ANgABE0UAdABjAC8ARwBNAFQALQA3AAETRQB0AGMALwBHAE0AVAAt
ADgAARNFAHQAYwAvAEcATQBUAC0AOQABIUUAdQByAG8AcABlAC8AQQBtAHMAdABlAHIAZABhAG0A
AB1FAHUAcgBvAHAAZQAvAEEAbgBkAG8AcgByAGEAABtFAHUAcgBvAHAAZQAvAEEAdABoAGUAbgBz
AAAjRwBUAEIAIABTAHQAYQBuAGQAYQByAGQAIABUAGkAbQBlAAAfRQB1AHIAbwBwAGUALwBCAGUA
bABnAHIAYQBkAGUAADlDAGUAbgB0AHIAYQBsACAARQB1AHIAbwBwAGUAIABTAHQAYQBuAGQAYQBy
AGQAIABUAGkAbQBlAAAbRQB1AHIAbwBwAGUALwBCAGUAcgBsAGkAbgAAI0UAdQByAG8AcABlAC8A
QgByAGEAdABpAHMAbABhAHYAYQAAH0UAdQByAG8AcABlAC8AQgByAHUAcwBzAGUAbABzAAAhRQB1
AHIAbwBwAGUALwBCAHUAYwBoAGEAcgBlAHMAdAAAH0UAdQByAG8AcABlAC8AQgB1AGQAYQBwAGUA
cwB0AAAfRQB1AHIAbwBwAGUALwBDAGgAaQBzAGkAbgBhAHUAACNFAHUAcgBvAHAAZQAvAEMAbwBw
AGUAbgBoAGEAZwBlAG4AABtFAHUAcgBvAHAAZQAvAEQAdQBiAGwAaQBuAAAhRQB1AHIAbwBwAGUA
LwBHAGkAYgByAGEAbAB0AGEAcgAAH0UAdQByAG8AcABlAC8ARwB1AGUAcgBuAHMAZQB5AAAfRQB1
AHIAbwBwAGUALwBIAGUAbABzAGkAbgBrAGkAACNGAEwARQAgAFMAdABhAG4AZABhAHIAZAAgAFQA
aQBtAGUAACVFAHUAcgBvAHAAZQAvAEkAcwBsAGUAXwBvAGYAXwBNAGEAbgAAH0UAdQByAG8AcABl
AC8ASQBzAHQAYQBuAGIAdQBsAAApVAB1AHIAawBlAHkAIABTAHQAYQBuAGQAYQByAGQAIABUAGkA
bQBlAAAbRQB1AHIAbwBwAGUALwBKAGUAcgBzAGUAeQAAJUUAdQByAG8AcABlAC8ASwBhAGwAaQBu
AGkAbgBnAHIAYQBkAAAzSwBhAGwAaQBuAGkAbgBnAHIAYQBkACAAUwB0AGEAbgBkAGEAcgBkACAA
VABpAG0AZQAAF0UAdQByAG8AcABlAC8ASwBpAGUAdgAAG0UAdQByAG8AcABlAC8ATABpAHMAYgBv
AG4AACFFAHUAcgBvAHAAZQAvAEwAagB1AGIAbABqAGEAbgBhAAAbRQB1AHIAbwBwAGUALwBMAG8A
bgBkAG8AbgAAI0UAdQByAG8AcABlAC8ATAB1AHgAZQBtAGIAbwB1AHIAZwAAG0UAdQByAG8AcABl
AC8ATQBhAGQAcgBpAGQAABlFAHUAcgBvAHAAZQAvAE0AYQBsAHQAYQAAIUUAdQByAG8AcABlAC8A
TQBhAHIAaQBlAGgAYQBtAG4AABlFAHUAcgBvAHAAZQAvAE0AaQBuAHMAawAAG0UAdQByAG8AcABl
AC8ATQBvAG4AYQBjAG8AABtFAHUAcgBvAHAAZQAvAE0AbwBzAGMAbwB3AAArUgB1AHMAcwBpAGEA
bgAgAFMAdABhAG4AZABhAHIAZAAgAFQAaQBtAGUAABdFAHUAcgBvAHAAZQAvAE8AcwBsAG8AABlF
AHUAcgBvAHAAZQAvAFAAYQByAGkAcwAAIUUAdQByAG8AcABlAC8AUABvAGQAZwBvAHIAaQBjAGEA
ABtFAHUAcgBvAHAAZQAvAFAAcgBhAGcAdQBlAAAXRQB1AHIAbwBwAGUALwBSAGkAZwBhAAAXRQB1
AHIAbwBwAGUALwBSAG8AbQBlAAAbRQB1AHIAbwBwAGUALwBTAGEAbQBhAHIAYQAAI0UAdQByAG8A
cABlAC8AUwBhAG4AXwBNAGEAcgBpAG4AbwAAH0UAdQByAG8AcABlAC8AUwBhAHIAYQBqAGUAdgBv
AAA9QwBlAG4AdAByAGEAbAAgAEUAdQByAG8AcABlAGEAbgAgAFMAdABhAG4AZABhAHIAZAAgAFQA
aQBtAGUAACNFAHUAcgBvAHAAZQAvAFMAaQBtAGYAZQByAG8AcABvAGwAABtFAHUAcgBvAHAAZQAv
AFMAawBvAHAAagBlAAAZRQB1AHIAbwBwAGUALwBTAG8AZgBpAGEAACFFAHUAcgBvAHAAZQAvAFMA
dABvAGMAawBoAG8AbABtAAAdRQB1AHIAbwBwAGUALwBUAGEAbABsAGkAbgBuAAAbRQB1AHIAbwBw
AGUALwBUAGkAcgBhAG4AZQAAH0UAdQByAG8AcABlAC8AVQB6AGgAZwBvAHIAbwBkAAAZRQB1AHIA
bwBwAGUALwBWAGEAZAB1AHoAAB1FAHUAcgBvAHAAZQAvAFYAYQB0AGkAYwBhAG4AABtFAHUAcgBv
AHAAZQAvAFYAaQBlAG4AbgBhAAAdRQB1AHIAbwBwAGUALwBWAGkAbABuAGkAdQBzAAAhRQB1AHIA
bwBwAGUALwBWAG8AbABnAG8AZwByAGEAZAAAG0UAdQByAG8AcABlAC8AVwBhAHIAcwBhAHcAABtF
AHUAcgBvAHAAZQAvAFoAYQBnAHIAZQBiAAAjRQB1AHIAbwBwAGUALwBaAGEAcABvAHIAbwB6AGgA
eQBlAAAbRQB1AHIAbwBwAGUALwBaAHUAcgBpAGMAaAAAJ0kAbgBkAGkAYQBuAC8AQQBuAHQAYQBu
AGEAbgBhAHIAaQB2AG8AABtJAG4AZABpAGEAbgAvAEMAaABhAGcAbwBzAAAhSQBuAGQAaQBhAG4A
LwBDAGgAcgBpAHMAdABtAGEAcwAAGUkAbgBkAGkAYQBuAC8AQwBvAGMAbwBzAAAbSQBuAGQAaQBh
AG4ALwBDAG8AbQBvAHIAbwAAIUkAbgBkAGkAYQBuAC8ASwBlAHIAZwB1AGUAbABlAG4AABdJAG4A
ZABpAGEAbgAvAE0AYQBoAGUAAC9NAGEAdQByAGkAdABpAHUAcwAgAFMAdABhAG4AZABhAHIAZAAg
AFQAaQBtAGUAAB9JAG4AZABpAGEAbgAvAE0AYQBsAGQAaQB2AGUAcwAAIUkAbgBkAGkAYQBuAC8A
TQBhAHUAcgBpAHQAaQB1AHMAAB1JAG4AZABpAGEAbgAvAE0AYQB5AG8AdAB0AGUAAB1JAG4AZABp
AGEAbgAvAFIAZQB1AG4AaQBvAG4AAA9NAFMAVAA3AE0ARABUAAAZUABhAGMAaQBmAGkAYwAvAEEA
cABpAGEAACdTAGEAbQBvAGEAIABTAHQAYQBuAGQAYQByAGQAIABUAGkAbQBlAAAhUABhAGMAaQBm
AGkAYwAvAEEAdQBjAGsAbABhAG4AZAAAG1AAYQBjAGkAZgBpAGMALwBFAGYAYQB0AGUAACNQAGEA
YwBpAGYAaQBjAC8ARQBuAGQAZQByAGIAdQByAHkAAB9QAGEAYwBpAGYAaQBjAC8ARgBhAGsAYQBv
AGYAbwAAGVAAYQBjAGkAZgBpAGMALwBGAGkAagBpAAAlRgBpAGoAaQAgAFMAdABhAG4AZABhAHIA
ZAAgAFQAaQBtAGUAACFQAGEAYwBpAGYAaQBjAC8ARgB1AG4AYQBmAHUAdABpAAAjUABhAGMAaQBm
AGkAYwAvAEcAYQBsAGEAcABhAGcAbwBzAAAnUABhAGMAaQBmAGkAYwAvAEcAdQBhAGQAYQBsAGMA
YQBuAGEAbAAAGVAAYQBjAGkAZgBpAGMALwBHAHUAYQBtAAAhUABhAGMAaQBmAGkAYwAvAEgAbwBu
AG8AbAB1AGwAdQAAIVAAYQBjAGkAZgBpAGMALwBKAG8AaABuAHMAdABvAG4AAEFQAGEAYwBpAGYA
aQBjAC8ATQBhAGoAdQByAG8AIABQAGEAYwBpAGYAaQBjAC8ASwB3AGEAagBhAGwAZQBpAG4AAB1Q
AGEAYwBpAGYAaQBjAC8ATQBpAGQAdwBhAHkAABtQAGEAYwBpAGYAaQBjAC8ATgBhAHUAcgB1AAAZ
UABhAGMAaQBmAGkAYwAvAE4AaQB1AGUAAB1QAGEAYwBpAGYAaQBjAC8ATgBvAHUAbQBlAGEAACNQ
AGEAYwBpAGYAaQBjAC8AUABhAGcAbwBfAFAAYQBnAG8AABtQAGEAYwBpAGYAaQBjAC8AUABhAGwA
YQB1AAA7UABhAGMAaQBmAGkAYwAvAFAAbwBuAGEAcABlACAAUABhAGMAaQBmAGkAYwAvAEsAbwBz
AHIAYQBlAAApUABhAGMAaQBmAGkAYwAvAFAAbwByAHQAXwBNAG8AcgBlAHMAYgB5AAAjUABhAGMA
aQBmAGkAYwAvAFIAYQByAG8AdABvAG4AZwBhAAAdUABhAGMAaQBmAGkAYwAvAFMAYQBpAHAAYQBu
AAAdUABhAGMAaQBmAGkAYwAvAFQAYQBoAGkAdABpAAAdUABhAGMAaQBmAGkAYwAvAFQAYQByAGEA
dwBhAAAjUABhAGMAaQBmAGkAYwAvAFQAbwBuAGcAYQB0AGEAcAB1AAAZUABhAGMAaQBmAGkAYwAv
AFQAcgB1AGsAABlQAGEAYwBpAGYAaQBjAC8AVwBhAGsAZQAAHVAAYQBjAGkAZgBpAGMALwBXAGEA
bABsAGkAcwAAD1AAUwBUADgAUABEAFQAABdVAFMALwBNAG8AdQBuAHQAYQBpAG4AADlVAG4AawBu
AG8AdwBuACAATwBsAHMAbwBuACAAdABpAG0AZQAgAHoAbwBuAGUAOgAgAHsAMAB9AAAAAAA9Ix7+
nB63T6XLid4BMEiaAAi3elxWGTTgiQiJhF3NgIDMkQMGEhUDBhIZAyAAAQQAABIVBAAAEhkFAAEB
EhkECAASFQQIABIZAwYSDAQAABIMBAgAEgwCBggDBhEUBAAAAAAEAQAAAAQgAQEOBCABAQgGAAES
URFVBCAAElkGIAIBDhJZBAcBEhUFIAEBEWEIAQACAAAAAAADAAABBCAAEm0EIAAScQUgARJ1HAMg
ABwDIAAOBQACAg4OBCABARwFAAIODhwDBwEORwEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC4w
AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRAuTkVUIEZyYW1ld29yayA0KAEAI1NUX2QzMDU5NmRm
OTU4YzRjMDQ4NjMwOWVhN2FlZDE5NjEwAAAFAQAAAAAWAQARQ29weXJpZ2h0IEAgIDIwMTkAAAgB
AAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwHAyQAAAAAAAAAAAADeyQAAACAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAA0MkAAAAAAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3Jl
ZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAAgAAAAAAA
AAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFjgAACwAwAAAAAAAAAA
AACwAzQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAAAAEAymKW
GwAAAQDKYpYbPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBsAGUA
SQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAEEAMAAAEAUwB0
AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAA7AIAAAEAMAAwADAAMAAwADQAYgAwAAAAcAAkAAEA
RgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABfAGQAMwAwADUAOQA2AGQAZgA5
ADUAOABjADQAYwAwADQAOAA2ADMAMAA5AGUAYQA3AGEAZQBkADEAOQA2ADEAMAAAAEAADwABAEYA
aQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA3ADAANgAyAC4AMgA1ADIAOQAwAAAAAABw
ACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAVABfAGQAMwAwADUAOQA2AGQAZgA5ADUA
OABjADQAYwAwADQAOAA2ADMAMAA5AGUAYQA3AGEAZQBkADEAOQA2ADEAMAAuAGQAbABsAAAASAAS
AAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAA
IAAyADAAMQA5AAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAVABf
AGQAMwAwADUAOQA2AGQAZgA5ADUAOABjADQAYwAwADQAOAA2ADMAMAA5AGUAYQA3AGEAZQBkADEA
OQA2ADEAMAAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwBk
ADMAMAA1ADkANgBkAGYAOQA1ADgAYwA0AGMAMAA0ADgANgAzADAAOQBlAGEANwBhAGUAZAAxADkA
NgAxADAAAABEAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADcAMAA2
ADIALgAyADUAMgA5ADAAAAAAAEgADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4A
AAAxAC4AMAAuADcAMAA2ADIALgAyADUAMgA5ADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAMAAAA8DkAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Well Loop\C# Script to Call Data Gumbo Well API"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Script Task"
          DTS:DTSID="{a49621ad-9f9c-4389-99d6-4a63b342d17c}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:MaxErrorCount="6"
          DTS:ObjectName="C# Script to Call Data Gumbo Well API"
          DTS:ThreadHint="1">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_ba93193d9f004c3b8e903ff8dbece5b7"
              VSTAMajorVersion="3"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::boolActiveInd,User::dblLatitude,User::dblLongitude,User::intCustomerIdForWell,User::intRigIdForWell,User::intWellId,User::objJobNum,User::objRigIdForWell,User::objRigReleaseDate,User::objSpudDate,User::objUwi,User::objWellNum,User::strAccessKey,User::strApiKey,User::strConvertedTimeZone,User::strCountry,User::strProvinceState,User::strServerName,User::strTimeZone,User::strWellName,System::UserName">
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_6efeb370d7b2456ab10cc5e0315338f2")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_6efeb370d7b2456ab10cc5e0315338f2")]
[assembly: AssemblyCopyright("Copyright @  2018")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[using System.Net;
using System.IO;
using System.Text;
using System.Web;
using System.Web.Helpers;
using System.Linq;
using System.Text.RegularExpressions;

#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion


namespace ST_6efeb370d7b2456ab10cc5e0315338f2
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            StringBuilder logMessage = new StringBuilder();
            bool fireAgain = false;
            int wellId = (int)Dts.Variables["User::intWellId"].Value;
            logMessage.AppendFormat("Processing well with id {0}.", wellId);

            string wellName = (String)Dts.Variables["User::strWellName"].Value;
            string uwi = Convert.ToString(Dts.Variables["User::objUwi"].Value);
            int customerId = (int)Dts.Variables["User::intCustomerIdForWell"].Value;
            string jobNum = Convert.ToString(Dts.Variables["User::objJobNum"].Value);
            string wellNum = Convert.ToString(Dts.Variables["User::objWellNum"].Value);

            DateTime? spudDate = GetDateTime("User::objSpudDate", "User::strConvertedTimeZone");
            DateTime? rigReleaseDate = GetDateTime("User::objRigReleaseDate", "User::strConvertedTimeZone");

            //DateTime? spudDate = String.IsNullOrEmpty(Dts.Variables["User::objSpudDate"].Value.ToString()) ? null : (DateTime?)Convert.ToDateTime(Dts.Variables["User::objSpudDate"].Value.ToString());
            //DateTime? rigReleaseDate = String.IsNullOrEmpty(Dts.Variables["User::objRigReleaseDate"].Value.ToString()) ? null : (DateTime?)Convert.ToDateTime(Dts.Variables["User::objRigReleaseDate"].Value.ToString());
            string provinceState = (string)Dts.Variables["User::strProvinceState"].Value;
            string country = (string)Dts.Variables["User::strCountry"].Value;
            double latitude = (double)Dts.Variables["User::dblLatitude"].Value;
            double longitude = (double)Dts.Variables["User::dblLongitude"].Value;
            bool activeInd = (bool)Dts.Variables["User::boolActiveInd"].Value;
            int? rigId = (int)Dts.Variables["User::intRigIdForWell"].Value;
            rigId = rigId.Value == 0 ? null : rigId;
            string timeZone = (String)Dts.Variables["User::strTimeZone"].Value;

            string serverName = (String)Dts.Variables["User::strServerName"].Value;
            string apiKey = (String)Dts.Variables["User::strApiKey"].Value;
            string accessKey = (String)Dts.Variables["User::strAccessKey"].Value;
            string currentUserId = (String)Dts.Variables["System::UserName"].Value;

            if (currentUserId != null)
            {
                currentUserId = currentUserId.Split('\\').Last();
            }

            ServicePointManager.ServerCertificateValidationCallback = delegate { return true; };
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls | SecurityProtocolType.Ssl3;

            try
            {
                string url = string.Format("https://{0}/api/well/{1}?apikey={2}&accesskey={3}", serverName, wellId, apiKey, accessKey);
                url = url.Replace(" ", "%20");
                url = url.Replace("$", "%24");

                DateTime now = DateTime.Now;
                Well existingWell = GetExistingWell(wellId, serverName, apiKey, accessKey);

                if (existingWell == null)
                {
                    logMessage.Append(" Not found - will insert.");
                    existingWell = new Well();
                    existingWell.wellId = wellId;
                }
                else
                {
                    logMessage.Append(" Entity found - will check if update is required.");
                }

                if (existingWell.Apply(wellName, uwi, customerId, jobNum, wellNum, spudDate, rigReleaseDate, provinceState, country, latitude, longitude, timeZone, activeInd, rigId, currentUserId))
                {
                    int retries = 2;
                    while (retries > 0)
                    {
                        try
                        {
                            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                            logMessage.Append(" Attempting write to DataGumbo API.");
                            string gumboPayload = Json.Encode(existingWell);

                            request.Method = "PUT";
                            request.ContentType = "application/json";

                            gumboPayload = EncodeNonAsciiCharacters(gumboPayload);

                            request.ContentLength = gumboPayload.Length;
                            StreamWriter requestWriter = new StreamWriter(request.GetRequestStream(), System.Text.Encoding.ASCII);
                            requestWriter.Write(gumboPayload);

                            requestWriter.Close();

                            WebResponse webResponse = request.GetResponse();
                            Stream webStream = webResponse.GetResponseStream();
                            StreamReader responseReader = new StreamReader(webStream);
                            string response = responseReader.ReadToEnd();
                            responseReader.Close();
                            retries = 0; // indicate success
                        }
                        catch (Exception e)
                        {
                            retries--;
                            if (retries > 0)
                            {
                                logMessage.Append(string.Format(" HTTP put failed with exception {0}. Will retry.", e.Message));
                            }
                            else
                            {
                                throw e;
                            }
                        }
                    }
                }
                else
                {
                    logMessage.Append(" No update required.");
                }

                Dts.TaskResult = (int)ScriptResults.Success;
                logMessage.Append("  Returning Success.");
                Dts.Events.FireInformation(0, "Gumbo SSIS", logMessage.ToString(), string.Empty, 0, ref fireAgain);
            }
            catch (Exception e)
            {
                logMessage.AppendFormat("  Encountered error: {0}.", e.Message);
                Dts.Events.FireError(0, "Gumbo SSIS", logMessage.ToString(), string.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        private Well GetExistingWell(int wellId, string serverName, string apiKey, string accessKey)
        {
            try
            {
                string url = string.Format("https://{0}/api/well/{1}?apikey={2}&accesskey={3}", serverName, wellId, apiKey, accessKey);
                url = url.Replace(" ", "%20");
                url = url.Replace("$", "%24");
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                WebResponse webResponse = request.GetResponse();
                Stream webStream = webResponse.GetResponseStream();
                StreamReader responseReader = new StreamReader(webStream);
                string response = responseReader.ReadToEnd();
                responseReader.Close();
                Well well = Json.Decode<Well>(response);
                return well;
            }
            catch (Exception e)
            {
                return null;
            }
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion


        #region DateTimeConversion
        private static bool DateCompare(DateTime? dtm1, DateTime? dtm2)
        {
            if (dtm1.HasValue)
            {
                if (dtm2.HasValue)
                {
                    DateTime d1 = dtm1.Value;
                    DateTime d2 = dtm2.Value;
                    return d1 == d2;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                return !dtm2.HasValue;
            }
        }

        public DateTime? GetDateTime(string dateTimeVariableName, string timezoneVariableName)
        {
            Object dtmOValue = Dts.Variables[dateTimeVariableName].Value;
            if (dtmOValue == null)
            {
                return null;
            }
            String dtmSValue = dtmOValue.ToString();

            if (string.IsNullOrEmpty(dtmSValue))
            {
                return null;
            }

            if (dtmSValue.Contains("+"))
            {
                dtmSValue = dtmSValue.Split(new [] {'+'})[0].Trim();
            }

            DateTime convertedValue = Convert.ToDateTime(dtmSValue);

            if (convertedValue.Kind == DateTimeKind.Unspecified)
            {
                TimeZoneInfo tzInfo = TimeZoneInfo.FindSystemTimeZoneById((String)Dts.Variables[timezoneVariableName].Value);
                TimeSpan offset = tzInfo.GetUtcOffset(convertedValue);
                DateTime afterAdjustment = convertedValue.Subtract(offset);
                return new DateTime(afterAdjustment.Year, afterAdjustment.Month, afterAdjustment.Day, afterAdjustment.Hour, afterAdjustment.Minute, afterAdjustment.Second, DateTimeKind.Utc);
            }
            else
            {
                return convertedValue;
            }
        }

        #endregion

        #region data class
        class Well
        {
            public int wellId { get; set; }
            public string wellName { get; set; }
            public string uwi { get; set; }
            public int customerId { get; set; }
            public string jobNum { get; set; }
            public string wellNum { get; set; }
            public DateTime? spudDate { get; set; }
            public DateTime? rigReleaseDate { get; set; }
            public string provinceState { get; set; }
            public string country { get; set; }
            public double latitude { get; set; }
            public double longitude { get; set; }
            public int? currentRigId { get; set; }
            public string timeZone { get; set; }
            public bool activeInd { get; set; }
            public string rowCreatedBy { get; set; }
            public string rowChangedBy { get; set; }
            public DateTime? rowCreatedDate { get; set; }
            public DateTime? rowChangedDate { get; set; }

            public bool Apply(string _wellName, string _uwi, int _customerId, string _jobNum, string _wellNum, DateTime? _spudDate, DateTime? _rigReleaseDate, string _provinceState, string _country, double _latitude, double _longitude, string _timeZone, bool _activeInd, int? _rigId, string currentUserId)
            {
                bool ret = false;
                if (rowCreatedBy == null)
                {
                    rowCreatedBy = currentUserId;
                    ret = true;
                }
                if (rowCreatedDate == null)
                {
                    rowCreatedDate = DateTime.Now;
                    ret = true;
                }
                if (wellName != _wellName)
                {
                    wellName = _wellName;
                    ret = true;
                }
                if (uwi != _uwi)
                {
                    uwi = _uwi;
                    ret = true;
                }
                if (customerId != _customerId)
                {
                    customerId = _customerId;
                    ret = true;
                }
                if (jobNum != _jobNum)
                {
                    jobNum = _jobNum;
                    ret = true;
                }
                if (wellNum != _wellNum)
                {
                    wellNum = _wellNum;
                    ret = true;
                }
                if (!DateCompare(spudDate, _spudDate))
                {
                    spudDate = _spudDate.HasValue ? _spudDate.Value.ToUniversalTime() : (DateTime?)null;
                    ret = true;
                }
                if (!DateCompare(rigReleaseDate, _rigReleaseDate))
                {
                    rigReleaseDate = _rigReleaseDate.HasValue ? _rigReleaseDate.Value.ToUniversalTime() : (DateTime?)null;
                    ret = true;
                }
                if (provinceState != _provinceState)
                {
                    provinceState = _provinceState;
                    ret = true;
                }
                if (country != _country)
                {
                    country = _country;
                    ret = true;
                }
                if (latitude != _latitude)
                {
                    latitude = _latitude;
                    ret = true;
                }
                if (longitude != _longitude)
                {
                    longitude = _longitude;
                    ret = true;
                }
                if (currentRigId == null)
                {
                    if (_rigId != null)
                    {
                        currentRigId = _rigId;
                        ret = true;
                    }
                }
                else
                {
                    if (_rigId == null)
                    {
                        currentRigId = _rigId;
                        ret = true;
                    }
                    else
                    {
                        if (currentRigId != _rigId)
                        {
                            currentRigId = _rigId;
                            ret = true;
                        }
                    }
                }
                if (timeZone != _timeZone)
                {
                    timeZone = _timeZone;
                    ret = true;
                }
                if (activeInd != _activeInd)
                {
                    activeInd = _activeInd;
                    ret = true;
                }
                if (ret)
                {
                    spudDate = _spudDate.HasValue ? _spudDate.Value.ToUniversalTime() : (DateTime?)null;
                    rigReleaseDate = _rigReleaseDate.HasValue ? _rigReleaseDate.Value.ToUniversalTime() : (DateTime?)null;
                    rowChangedBy = currentUserId;
                    rowChangedDate = DateTime.Now;
                }
                return ret;
            }
        }
        #endregion

        public static string EncodeNonAsciiCharacters(string value) 
        {
            return Regex.Replace(value, @"[^\x00-\x7F]", c => string.Format(@"\u{0:x4}", (int)c.Value[0]));
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_6efeb370d7b2456ab10cc5e0315338f2.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_6efeb370d7b2456ab10cc5e0315338f2.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_6efeb370d7b2456ab10cc5e0315338f2.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_6efeb370d7b2456ab10cc5e0315338f2.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_6efeb370d7b2456ab10cc5e0315338f2.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_6efeb370d7b2456ab10cc5e0315338f2</msb:CodeName>
		<msb:DisplayName>ST_6efeb370d7b2456ab10cc5e0315338f2</msb:DisplayName>
		<msb:ProjectId>{1776F3C1-F64C-4760-9326-CF94F83BEDA6}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_ba93193d9f004c3b8e903ff8dbece5b7.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_6efeb370d7b2456ab10cc5e0315338f2.Properties.Settings.get_Default():ST_6efeb370d7b2456ab10cc5e0315338f2.Properties.Sett" +
    "ings")]

namespace ST_6efeb370d7b2456ab10cc5e0315338f2.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="ST_ba93193d9f004c3b8e903ff8dbece5b7.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{CF78C4C7-B7A5-49E3-8077-C711CD04C8A4}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_6efeb370d7b2456ab10cc5e0315338f2</RootNamespace>
    <AssemblyName>ST_ba93193d9f004c3b8e903ff8dbece5b7</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Web" />
    <Reference Include="System.Web.Helpers, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
      <DesignTime>True</DesignTime>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\10.0\InstallDir#\devenv.exe" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <BinaryItem
                Name="ST_ba93193d9f004c3b8e903ff8dbece5b7.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAEdx3FwAAAAAAAAAAOAAAiELAQsAADgAAAAIAAAAAAAA/lYA
AAAgAAAAYAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACgAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAKhWAABTAAAAAGAAAAgEAAAAAAAAAAAAAAAAAAAA
AAAAAIAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAABDcAAAAgAAAAOAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAAgEAAAAYAAAAAYAAAA6AAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAIAAAAACAAAAQAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAADg
VgAAAAAAAEgAAAACAAUAEC0AAJgpAAABAAAAAAAAAFgsAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKA4AAAoqEzACAC0AAAABAAARfgEAAAQtIHIBAABw0AIA
AAIoDwAACm8QAAAKcxEAAAoKBoABAAAEfgEAAAQqGn4CAAAEKh4CgAIAAAQqGn4DAAAEKi5zBgAA
BoADAAAEKh4CKBQAAAoqChcqAAAbMBAAEAUAAAIAABFzFgAACgoWCwIoFwAACm8YAAAKcnMAAHBv
GQAACm8aAAAKpSUAAAEMBnKTAABwCIwlAAABbxsAAAomAigXAAAKbxgAAApyzQAAcG8ZAAAKbxoA
AAp0JgAAAQ0CKBcAAApvGAAACnLxAABwbxkAAApvGgAACigcAAAKEwQCKBcAAApvGAAACnILAQBw
bxkAAApvGgAACqUlAAABEwUCKBcAAApvGAAACnJBAQBwbxkAAApvGgAACigcAAAKEwYCKBcAAApv
GAAACnJhAQBwbxkAAApvGgAACigcAAAKEwcCcoMBAHBypwEAcCgLAAAGEwgCct0BAHBypwEAcCgL
AAAGEwkCKBcAAApvGAAACnINAgBwbxkAAApvGgAACnQmAAABEwoCKBcAAApvGAAACnI7AgBwbxkA
AApvGgAACnQmAAABEwsCKBcAAApvGAAACnJdAgBwbxkAAApvGgAACqUoAAABEwwCKBcAAApvGAAA
CnKBAgBwbxkAAApvGgAACqUoAAABEw0CKBcAAApvGAAACnKnAgBwbxkAAApvGgAACqUpAAABEw4S
DwIoFwAACm8YAAAKcs8CAHBvGQAACm8aAAAKpSUAAAEoHQAAChIPKB4AAAosBBEPKwoSIP4VAQAA
GxEgEw8CKBcAAApvGAAACnL7AgBwbxkAAApvGgAACnQmAAABExACKBcAAApvGAAACnIfAwBwbxkA
AApvGgAACnQmAAABExECKBcAAApvGAAACnJHAwBwbxkAAApvGgAACnQmAAABExICKBcAAApvGAAA
CnJnAwBwbxkAAApvGgAACnQmAAABExMCKBcAAApvGAAACnKNAwBwbxkAAApvGgAACnQmAAABExQR
FCweERQXjSoAAAETIREhFh9cnREhbx8AAAooAQAAKxMUfgQAAAQtERT+Bg4AAAZzIQAACoAEAAAE
fgQAAAQoIgAACiDwDAAAKCMAAApyrwMAcBqNAQAAARMiESIWERGiESIXCIwlAAABohEiGBESohEi
GRETohEiKCQAAAoTFREVchMEAHByFwQAcG8lAAAKExURFXIfBABwciMEAHBvJQAAChMVKCYAAAom
AggRERESERMoCQAABhMWERYtHQZyKwQAcG8nAAAKJnM3AAAGExYRFghvEQAABisMBnJfBABwbycA
AAomERYJEQQRBREGEQcRCBEJEQoRCxEMEQ0REBEOEQ8RFG82AAAGOeMAAAAYExc40QAAABEVKCgA
AAp0MAAAARMYBnLDBABwbycAAAomERYoKQAAChMZERhyCwUAcG8qAAAKERhyEwUAcG8rAAAKERko
DAAABhMZERgRGW8sAAAKam8tAAAKERhvLgAACigvAAAKczAAAAoTGhEaERlvMQAAChEabzIAAAoR
GG8zAAAKExsRG280AAAKExwRHHM1AAAKEx0RHW82AAAKJhEdbzcAAAoWExfeLBMeERcXWRMXERcW
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
AAooNQAABgYqHgIoDgAACioAAAAAAAAAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2Vz
LlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRy
YWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50
aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAEJTSkIBAAEAAAAAAAwAAAB2NC4w
LjMwMzE5AAAAAAUAbAAAAFgNAAAjfgAAxA0AADgRAAAjU3RyaW5ncwAAAAD8HgAAaAYAACNVUwBk
JQAAEAAAACNHVUlEAAAAdCUAACQEAAAjQmxvYgAAAAAAAAACAAABVx2iCQkLAAAA+iUzABYAAAEA
AABBAAAABgAAABsAAAA3AAAAMQAAAFwAAAACAAAATAAAAAYAAAADAAAAFgAAACoAAAACAAAAAQAA
AAYAAAABAAAAAgAAAAIAAAAAAAoAAQAAAAAABgDGAL8ACgDiAM0ADgBCARkBBgBeAb8ABgB0AWMB
BgClAZABBgA0Ar8ABgA/Ar8ABgCbCIEIBgDGCLQIBgDdCLQIBgD6CLQIBgAZCbQIBgAyCbQIBgBL
CbQIBgBmCbQIBgCBCbQIBgCaCbQIBgDTCbMJBgDzCbMJBgBICjUKBgBlCr8ABgBqCr8ABgCOCrQI
CgC6CqQKCgDTCqQKBgDoCrMJDgAKCxkBBgBaCywLCgBqCywLCgCIC3QLCgC/C3QLBgAWDAoMDgAk
DBkBEgB9DF0MEgCVDF0MBgCxDL8ABgDEDL8ABgDLDL8ABgDcDL8ABgDjDL8ABgDrDL8AFgAODQIN
BgA0DRkNCgBSDUcNCgCODUcNCgDWDUcNCgDoDUcNGgAKDvcNBgBYDk4OBgBwDgoMBgCDDk4OBgCQ
Dk4OCgCnDkcNBgDRDk4OBgDeDk4OBgDzDr8ADgAYDxkBBgCeD78ABgC0D78ABgDYD78ACgBQEDEQ
CgB3EDEQCgCtEDEQCgC/EDEQAAAAAAEAAAAAAAEAAQAAABAAMgA8AAUAAQABAAABEABrADwACQAD
AAUAAQAQAHQAfwANAAQACAADAQAAowAAABEABgAQAAMAEACxAAAABQAJABAAEQCEARMAEQCxARcA
EQD7ATkAEQDjC1kBEQCGEBIDBgZ5AnAAVoCBAnMAVoCJAnMAAQC9BHAAAQDVBOoAAQDvBOoAAQAE
BXAAAQAgBeoAAQA4BeoAAQBRBe0AAQBrBe0AAQCLBeoAAQCqBeoAAQDDBfUAAQDdBfUAAQD4BfgA
AQAWBuoAAQAwBv8AAQBLBuoAAQBpBuoAAQCHBu0AAQCnBu0AUCAAAAAAgxjBARsAAQBYIAAAAACT
CMcBHwABAJEgAAAAAJMI2wEkAAEAmCAAAAAAkwjnASkAAQCgIAAAAACWCAsCPQACALMgAAAAAIYY
wQEbAAIApyAAAAAAkRgDC0oBAgDAIAAAAACGAB8CGwACABAmAAAAAIEAJAJHAAIAyCYAAAAAkQBI
AlAABgAMJwAAAACGAFQCYAAIACEoAAAAAJYAYAJrAAoASygAAAAAhhjBARsACwC7IAAAAACRAJgL
TgELAAQoAAAAAJEAVhALAw8AUygAAAAAhgiRAoEAEABbKAAAAACGCJwChQAQAGQoAAAAAIYIpwKK
ABEAbCgAAAAAhgi0Ao4AEQB1KAAAAACGCMECigASAH0oAAAAAIYIyQKOABIAhigAAAAAhgjRAoEA
EwCOKAAAAACGCOAChQATAJcoAAAAAIYI7wKKABQAnygAAAAAhgj6Ao4AFACoKAAAAACGCAUDigAV
ALAoAAAAAIYIEQOOABUAuSgAAAAAhggdA5MAFgDBKAAAAACGCCoDnAAWAMooAAAAAIYINwOTABcA
0igAAAAAhghKA5wAFwDbKAAAAACGCF0DigAYAOMoAAAAAIYIbwOOABgA7CgAAAAAhgiBA4oAGQD0
KAAAAACGCI0DjgAZAP0oAAAAAIYImQOmABoABSkAAAAAhgimA6oAGgAOKQAAAACGCLMDpgAbABYp
AAAAAIYIwQOqABsAHykAAAAAhgjPA68AHAAnKQAAAACGCOADtwAcADApAAAAAIYI8QOKAB0AOCkA
AAAAhgj+A44AHQBBKQAAAACGCAsEwAAeAEkpAAAAAIYIGQTEAB4AUikAAAAAhggnBIoAHwBaKQAA
AACGCDgEjgAfAGMpAAAAAIYISQSKACAAaykAAAAAhghaBI4AIAB0KQAAAACGCGsEkwAhAHwpAAAA
AIYIfgScACEAhSkAAAAAhgiRBJMAIgCNKQAAAACGCKQEnAAiAJgpAAAAAIYAtwTJACMASSwAAAAA
hhjBARsAMgAAAAEAjgcAAAEAxwYAAAIAlAcAAAMAnwcAAAQApgcAAAEAsAcAAAIAtQcAAAEAugcA
AAIAzwcAAAEAjgcAAAEAowsAAAIAqgsAAAMAsQsAAAQAuAsAAAEAdRAAAAEAjgcAAAEAjgcAAAEA
jgcAAAEAjgcAAAEAjgcAAAEAjgcAAAEAjgcAAAEAjgcAAAEAjgcAAAEAjgcAAAEAjgcAAAEAjgcA
AAEAjgcAAAEAjgcAAAEAjgcAAAEAjgcAAAEAjgcAAAEAjgcAAAEAjgcAAAEA5AcAAAIA7gcAAAMA
8wcAAAQA/wcAAAUABwgAAAYAEAgAAAcAGggAAAgAKggAAAkAOQgAAAoAQggAAAsATAgAAAwAVwgA
AA0AYQgAAA4AbAgAAA8AcwhJAMEBjgBRAMEBjgBZAMEBjgBhAMEBjgBpAMEBjgBxAMEBjgB5AMEB
jgCBAMEBjgCJAMEBjgCRAMEBjgCZAMEBhQChAMEBGwCpAMEBGwAJAMEBGwCxAHwKIwGxAJcKKgEp
AMEBLwHJAMEBOwHZAMEBGwARAMEBGwDhAMEBGwAJAcEBGwAZADYMXgERAYcMZAEZAZ4MagEhAacM
cQEJAbcMdQE5AdMMfQEMAMEBiAEMAKcMjgExAfAMkwFZAUINmgEBAcEBqwFpAWYNsQFpAaMNuAEx
AbgNvwExAb8NxgFBAMcNzAEJAc8N0QF5AeEN2AGJAQ8OfQF5ARYOjgB5ASEOjgAxATEOgQB5ATwO
6AF5AV8O7QGZAXkO8wGhAcEB+QGpAZsOjgCpAaEOGwB5AbMOAwKxAb8O7QG5AcEBCQLBAekOigDB
AaEOGwDJAf0OigAxAbgNEAIRAQkPhQARASwPFgIJANMMigAxATcP6gDRAT0PHALRAU0PJwKJAVcP
ewIUAF4PwAAUAKcMjgFBAGsPpQIxAXcPtAIxAYUPuQIxAY4PigA5AZMPvgJBAKsPxALhAcEPygLh
AeEP0QJBAO4P2QJBAPcPgQBBAAAQgQBBAAoQgQBBABIQgQBBABsQgQBBACYQgQBBAMEB4QIUAMEB
iAEBAqcMigAxAbUQFwP5AcEBqwEJAr8NHAMZAMEBGwAxAcUQJQNBANMQKwMMAF4PwAAMAOMQjgEI
ABwAdwAIACAAfAApAJMAQQEuADMAswMuAEMA3AMuACMA3AMuADsA4gMuAFsA+QMuAGMAAgQuACsA
3AMuAAsAaQMuABMAswMuABsA3ANDAGsAfABJAJMAQQFhAJsAfACBAJsAfACDAKsAfAChAJsAfAAh
AZsAfABBAZsAfABhAZsAfACBAZsAfAChAZsAfADAAZsAfADBAZsAfADgAZsAfADhAZsAfAAAApsA
fAABApsAfAAgApsAfAAhApsAfABAApsAfABBApsAfABgApsAfABhApsAfACAApsAfACBApsAfACg
ApsAfAChApsAfADAApsAfADBApsAfADgApsAfADhApsAfAAAA5sAfAABA5sAfAAgA5sAfAAhA5sA
fABAA5sAfABBA5sAfABgA5sAfABhA5sAfACAA5sAfACgA5sAfADAA5sAfADgA5sAfAAABJsAfAAg
BJsAfABABJsAfABgBJsAfACABJsAfACgBJsAfADABJsAfADgBJsAfAAABZsAfAAgBZsAfABABZsA
fABgBZsAfACABZsAfACgBZsAfADABZsAfADgBZsAfAAABpsAfAAgBpsAfABABpsAfABgBpsAfACA
BpsAfACgBpsAfAA2ATAChwKtAu4CMAMCAAEAAwADAAYABAAAAHQBLwAAAPMBNAAAABcCQgAAAMcG
AgEAAM4GBgEAANcGBgEAANsGAgEAAOYGBgEAAO0GBgEAAPUGCgEAAP4GCgEAAA0HBgEAABsHBgEA
ACMHEwEAACwHEwEAADYHFwEAAEMHBgEAAEwHHwEAAFYHBgEAAGMHBgEAAHAHCgEAAH8HCgECAAIA
AwACAAMABQABAAQABQACAAUABwACABAACQABABEACQACABIACwABABMACwABABUADQACABQADQAB
ABcADwACABYADwACABgAEQABABkAEQACABoAEwABABsAEwABAB0AFQACABwAFQACAB4AFwABAB8A
FwACACAAGQABACEAGQACACIAGwABACMAGwABACUAHQACACQAHQABACcAHwACACYAHwACACgAIQAB
ACkAIQABACsAIwACACoAIwABAC0AJQACACwAJQACAC4AJwABAC8AJwACADAAKQABADEAKQABADMA
KwACADIAKwACADQALQABADUALQCCAZ4CBIAAAAEAAACiGytcAAAAAAAAEQoAAAQAAAAAAAAAAAAA
AAEAtgAAAAAABAAAAAAAAAAAAAAAAQC/AAAAAAALAAAAAAAAAAAAAAAKAPoAAAAAAAsAAAAAAAAA
AAAAAAoAPgwAAAAABAAAAAAAAAAAAAAAAQD2DAAAAAABAAAAAAAAAAAAAADfAfcNAAAAAAAAAAAB
AAAA9RAAAAUABAAGAAQAQQCnAYEAggIAAAAAADxNb2R1bGU+AFNUX2JhOTMxOTNkOWYwMDRjM2I4
ZTkwM2ZmOGRiZWNlNWI3LmRsbABSZXNvdXJjZXMAU1RfNmVmZWIzNzBkN2IyNDU2YWIxMGNjNWUw
MzE1MzM4ZjIuUHJvcGVydGllcwBTZXR0aW5ncwBTY3JpcHRNYWluAFNUXzZlZmViMzcwZDdiMjQ1
NmFiMTBjYzVlMDMxNTMzOGYyAFNjcmlwdFJlc3VsdHMAV2VsbABtc2NvcmxpYgBTeXN0ZW0AT2Jq
ZWN0AFN5c3RlbS5Db25maWd1cmF0aW9uAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAE1pY3Jvc29m
dC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3Jp
cHRUYXNrAFZTVEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBFbnVtAFN5c3RlbS5SZXNvdXJjZXMA
UmVzb3VyY2VNYW5hZ2VyAHJlc291cmNlTWFuAFN5c3RlbS5HbG9iYWxpemF0aW9uAEN1bHR1cmVJ
bmZvAHJlc291cmNlQ3VsdHVyZQAuY3RvcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAGdldF9DdWx0dXJl
AHNldF9DdWx0dXJlAEN1bHR1cmUAZGVmYXVsdEluc3RhbmNlAGdldF9EZWZhdWx0AERlZmF1bHQA
TWFpbgBHZXRFeGlzdGluZ1dlbGwATnVsbGFibGVgMQBEYXRlVGltZQBEYXRlQ29tcGFyZQBHZXRE
YXRlVGltZQBFbmNvZGVOb25Bc2NpaUNoYXJhY3RlcnMAdmFsdWVfXwBTdWNjZXNzAEZhaWx1cmUA
Z2V0X3dlbGxJZABzZXRfd2VsbElkAGdldF93ZWxsTmFtZQBzZXRfd2VsbE5hbWUAZ2V0X3V3aQBz
ZXRfdXdpAGdldF9jdXN0b21lcklkAHNldF9jdXN0b21lcklkAGdldF9qb2JOdW0Ac2V0X2pvYk51
bQBnZXRfd2VsbE51bQBzZXRfd2VsbE51bQBnZXRfc3B1ZERhdGUAc2V0X3NwdWREYXRlAGdldF9y
aWdSZWxlYXNlRGF0ZQBzZXRfcmlnUmVsZWFzZURhdGUAZ2V0X3Byb3ZpbmNlU3RhdGUAc2V0X3By
b3ZpbmNlU3RhdGUAZ2V0X2NvdW50cnkAc2V0X2NvdW50cnkAZ2V0X2xhdGl0dWRlAHNldF9sYXRp
dHVkZQBnZXRfbG9uZ2l0dWRlAHNldF9sb25naXR1ZGUAZ2V0X2N1cnJlbnRSaWdJZABzZXRfY3Vy
cmVudFJpZ0lkAGdldF90aW1lWm9uZQBzZXRfdGltZVpvbmUAZ2V0X2FjdGl2ZUluZABzZXRfYWN0
aXZlSW5kAGdldF9yb3dDcmVhdGVkQnkAc2V0X3Jvd0NyZWF0ZWRCeQBnZXRfcm93Q2hhbmdlZEJ5
AHNldF9yb3dDaGFuZ2VkQnkAZ2V0X3Jvd0NyZWF0ZWREYXRlAHNldF9yb3dDcmVhdGVkRGF0ZQBn
ZXRfcm93Q2hhbmdlZERhdGUAc2V0X3Jvd0NoYW5nZWREYXRlAEFwcGx5ADx3ZWxsSWQ+a19fQmFj
a2luZ0ZpZWxkADx3ZWxsTmFtZT5rX19CYWNraW5nRmllbGQAPHV3aT5rX19CYWNraW5nRmllbGQA
PGN1c3RvbWVySWQ+a19fQmFja2luZ0ZpZWxkADxqb2JOdW0+a19fQmFja2luZ0ZpZWxkADx3ZWxs
TnVtPmtfX0JhY2tpbmdGaWVsZAA8c3B1ZERhdGU+a19fQmFja2luZ0ZpZWxkADxyaWdSZWxlYXNl
RGF0ZT5rX19CYWNraW5nRmllbGQAPHByb3ZpbmNlU3RhdGU+a19fQmFja2luZ0ZpZWxkADxjb3Vu
dHJ5PmtfX0JhY2tpbmdGaWVsZAA8bGF0aXR1ZGU+a19fQmFja2luZ0ZpZWxkADxsb25naXR1ZGU+
a19fQmFja2luZ0ZpZWxkADxjdXJyZW50UmlnSWQ+a19fQmFja2luZ0ZpZWxkADx0aW1lWm9uZT5r
X19CYWNraW5nRmllbGQAPGFjdGl2ZUluZD5rX19CYWNraW5nRmllbGQAPHJvd0NyZWF0ZWRCeT5r
X19CYWNraW5nRmllbGQAPHJvd0NoYW5nZWRCeT5rX19CYWNraW5nRmllbGQAPHJvd0NyZWF0ZWRE
YXRlPmtfX0JhY2tpbmdGaWVsZAA8cm93Q2hhbmdlZERhdGU+a19fQmFja2luZ0ZpZWxkAHdlbGxJ
ZAB3ZWxsTmFtZQB1d2kAY3VzdG9tZXJJZABqb2JOdW0Ad2VsbE51bQBzcHVkRGF0ZQByaWdSZWxl
YXNlRGF0ZQBwcm92aW5jZVN0YXRlAGNvdW50cnkAbGF0aXR1ZGUAbG9uZ2l0dWRlAGN1cnJlbnRS
aWdJZAB0aW1lWm9uZQBhY3RpdmVJbmQAcm93Q3JlYXRlZEJ5AHJvd0NoYW5nZWRCeQByb3dDcmVh
dGVkRGF0ZQByb3dDaGFuZ2VkRGF0ZQB2YWx1ZQBzZXJ2ZXJOYW1lAGFwaUtleQBhY2Nlc3NLZXkA
ZHRtMQBkdG0yAGRhdGVUaW1lVmFyaWFibGVOYW1lAHRpbWV6b25lVmFyaWFibGVOYW1lAF93ZWxs
TmFtZQBfdXdpAF9jdXN0b21lcklkAF9qb2JOdW0AX3dlbGxOdW0AX3NwdWREYXRlAF9yaWdSZWxl
YXNlRGF0ZQBfcHJvdmluY2VTdGF0ZQBfY291bnRyeQBfbGF0aXR1ZGUAX2xvbmdpdHVkZQBfdGlt
ZVpvbmUAX2FjdGl2ZUluZABfcmlnSWQAY3VycmVudFVzZXJJZABTeXN0ZW0uUnVudGltZS5WZXJz
aW9uaW5nAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBTeXN0ZW0uUmVmbGVjdGlvbgBBc3NlbWJs
eVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb25m
aWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBBc3NlbWJseVByb2R1
Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtB
dHRyaWJ1dGUAQXNzZW1ibHlDdWx0dXJlQXR0cmlidXRlAEFzc2VtYmx5VmVyc2lvbkF0dHJpYnV0
ZQBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNB
dHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAU1RfYmE5MzE5M2Q5ZjAwNGMz
YjhlOTAzZmY4ZGJlY2U1YjcAU3lzdGVtLkRpYWdub3N0aWNzAERlYnVnZ2VyTm9uVXNlckNvZGVB
dHRyaWJ1dGUAVHlwZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBBc3NlbWJs
eQBnZXRfQXNzZW1ibHkAU3lzdGVtLkNvbXBvbmVudE1vZGVsAEVkaXRvckJyb3dzYWJsZUF0dHJp
YnV0ZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQAuY2N0
b3IAU1NJU1NjcmlwdFRhc2tFbnRyeVBvaW50QXR0cmlidXRlAFN5c3RlbS5TZWN1cml0eS5Dcnlw
dG9ncmFwaHkuWDUwOUNlcnRpZmljYXRlcwBYNTA5Q2VydGlmaWNhdGUAWDUwOUNoYWluAFN5c3Rl
bS5OZXQuU2VjdXJpdHkAU3NsUG9saWN5RXJyb3JzADxNYWluPmJfXzAAcGFyYW0wAHBhcmFtMQBw
YXJhbTIAcGFyYW0zAFJlbW90ZUNlcnRpZmljYXRlVmFsaWRhdGlvbkNhbGxiYWNrAENTJDw+OV9f
Q2FjaGVkQW5vbnltb3VzTWV0aG9kRGVsZWdhdGUxAFN5c3RlbS5UZXh0AFN0cmluZ0J1aWxkZXIA
U2NyaXB0T2JqZWN0TW9kZWwAZ2V0X0R0cwBNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFnZWREVFMA
TWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBWYXJpYWJsZXMAZ2V0X1ZhcmlhYmxlcwBW
YXJpYWJsZQBnZXRfSXRlbQBnZXRfVmFsdWUASW50MzIAQXBwZW5kRm9ybWF0AFN0cmluZwBDb252
ZXJ0AFRvU3RyaW5nAERvdWJsZQBCb29sZWFuAENoYXIAU3BsaXQAU3lzdGVtLkNvcmUAU3lzdGVt
LkxpbnEARW51bWVyYWJsZQBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYwBJRW51bWVyYWJsZWAx
AExhc3QAU3lzdGVtLk5ldABTZXJ2aWNlUG9pbnRNYW5hZ2VyAHNldF9TZXJ2ZXJDZXJ0aWZpY2F0
ZVZhbGlkYXRpb25DYWxsYmFjawBTZWN1cml0eVByb3RvY29sVHlwZQBzZXRfU2VjdXJpdHlQcm90
b2NvbABGb3JtYXQAUmVwbGFjZQBnZXRfTm93AEFwcGVuZABXZWJSZXF1ZXN0AENyZWF0ZQBIdHRw
V2ViUmVxdWVzdABTeXN0ZW0uV2ViLkhlbHBlcnMASnNvbgBFbmNvZGUAc2V0X01ldGhvZABzZXRf
Q29udGVudFR5cGUAZ2V0X0xlbmd0aABzZXRfQ29udGVudExlbmd0aABTeXN0ZW0uSU8AU3RyZWFt
AEdldFJlcXVlc3RTdHJlYW0ARW5jb2RpbmcAZ2V0X0FTQ0lJAFN0cmVhbVdyaXRlcgBUZXh0V3Jp
dGVyAFdyaXRlAENsb3NlAFdlYlJlc3BvbnNlAEdldFJlc3BvbnNlAEdldFJlc3BvbnNlU3RyZWFt
AFN0cmVhbVJlYWRlcgBUZXh0UmVhZGVyAFJlYWRUb0VuZABFeGNlcHRpb24AZ2V0X01lc3NhZ2UA
c2V0X1Rhc2tSZXN1bHQARXZlbnRzT2JqZWN0V3JhcHBlcgBnZXRfRXZlbnRzAEVtcHR5AEZpcmVJ
bmZvcm1hdGlvbgBGaXJlRXJyb3IARGVjb2RlAGdldF9IYXNWYWx1ZQBvcF9FcXVhbGl0eQBJc051
bGxPckVtcHR5AENvbnRhaW5zAFRyaW0AVG9EYXRlVGltZQBEYXRlVGltZUtpbmQAZ2V0X0tpbmQA
VGltZVpvbmVJbmZvAEZpbmRTeXN0ZW1UaW1lWm9uZUJ5SWQAVGltZVNwYW4AR2V0VXRjT2Zmc2V0
AFN1YnRyYWN0AGdldF9ZZWFyAGdldF9Nb250aABnZXRfRGF5AGdldF9Ib3VyAGdldF9NaW51dGUA
Z2V0X1NlY29uZABTeXN0ZW0uVGV4dC5SZWd1bGFyRXhwcmVzc2lvbnMATWF0Y2gAPEVuY29kZU5v
bkFzY2lpQ2hhcmFjdGVycz5iX18yAGMATWF0Y2hFdmFsdWF0b3IAQ1MkPD45X19DYWNoZWRBbm9u
eW1vdXNNZXRob2REZWxlZ2F0ZTMAQ2FwdHVyZQBnZXRfQ2hhcnMAUmVnZXgAb3BfSW5lcXVhbGl0
eQBUb1VuaXZlcnNhbFRpbWUAR2V0VmFsdWVPckRlZmF1bHQAU1RfNmVmZWIzNzBkN2IyNDU2YWIx
MGNjNWUwMzE1MzM4ZjIuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAABxUwBUAF8ANgBl
AGYAZQBiADMANwAwAGQANwBiADIANAA1ADYAYQBiADEAMABjAGMANQBlADAAMwAxADUAMwAzADgA
ZgAyAC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAAAfVQBzAGUAcgA6
ADoAaQBuAHQAVwBlAGwAbABJAGQAADlQAHIAbwBjAGUAcwBzAGkAbgBnACAAdwBlAGwAbAAgAHcA
aQB0AGgAIABpAGQAIAB7ADAAfQAuAAAjVQBzAGUAcgA6ADoAcwB0AHIAVwBlAGwAbABOAGEAbQBl
AAAZVQBzAGUAcgA6ADoAbwBiAGoAVQB3AGkAADVVAHMAZQByADoAOgBpAG4AdABDAHUAcwB0AG8A
bQBlAHIASQBkAEYAbwByAFcAZQBsAGwAAB9VAHMAZQByADoAOgBvAGIAagBKAG8AYgBOAHUAbQAA
IVUAcwBlAHIAOgA6AG8AYgBqAFcAZQBsAGwATgB1AG0AACNVAHMAZQByADoAOgBvAGIAagBTAHAA
dQBkAEQAYQB0AGUAADVVAHMAZQByADoAOgBzAHQAcgBDAG8AbgB2AGUAcgB0AGUAZABUAGkAbQBl
AFoAbwBuAGUAAC9VAHMAZQByADoAOgBvAGIAagBSAGkAZwBSAGUAbABlAGEAcwBlAEQAYQB0AGUA
AC1VAHMAZQByADoAOgBzAHQAcgBQAHIAbwB2AGkAbgBjAGUAUwB0AGEAdABlAAAhVQBzAGUAcgA6
ADoAcwB0AHIAQwBvAHUAbgB0AHIAeQAAI1UAcwBlAHIAOgA6AGQAYgBsAEwAYQB0AGkAdAB1AGQA
ZQAAJVUAcwBlAHIAOgA6AGQAYgBsAEwAbwBuAGcAaQB0AHUAZABlAAAnVQBzAGUAcgA6ADoAYgBv
AG8AbABBAGMAdABpAHYAZQBJAG4AZAAAK1UAcwBlAHIAOgA6AGkAbgB0AFIAaQBnAEkAZABGAG8A
cgBXAGUAbABsAAAjVQBzAGUAcgA6ADoAcwB0AHIAVABpAG0AZQBaAG8AbgBlAAAnVQBzAGUAcgA6
ADoAcwB0AHIAUwBlAHIAdgBlAHIATgBhAG0AZQAAH1UAcwBlAHIAOgA6AHMAdAByAEEAcABpAEsA
ZQB5AAAlVQBzAGUAcgA6ADoAcwB0AHIAQQBjAGMAZQBzAHMASwBlAHkAACFTAHkAcwB0AGUAbQA6
ADoAVQBzAGUAcgBOAGEAbQBlAABjaAB0AHQAcABzADoALwAvAHsAMAB9AC8AYQBwAGkALwB3AGUA
bABsAC8AewAxAH0APwBhAHAAaQBrAGUAeQA9AHsAMgB9ACYAYQBjAGMAZQBzAHMAawBlAHkAPQB7
ADMAfQAAAyAAAAclADIAMAAAAyQAAAclADIANAAAMyAATgBvAHQAIABmAG8AdQBuAGQAIAAtACAA
dwBpAGwAbAAgAGkAbgBzAGUAcgB0AC4AAWMgAEUAbgB0AGkAdAB5ACAAZgBvAHUAbgBkACAALQAg
AHcAaQBsAGwAIABjAGgAZQBjAGsAIABpAGYAIAB1AHAAZABhAHQAZQAgAGkAcwAgAHIAZQBxAHUA
aQByAGUAZAAuAAFHIABBAHQAdABlAG0AcAB0AGkAbgBnACAAdwByAGkAdABlACAAdABvACAARABh
AHQAYQBHAHUAbQBiAG8AIABBAFAASQAuAAAHUABVAFQAACFhAHAAcABsAGkAYwBhAHQAaQBvAG4A
LwBqAHMAbwBuAABhIABIAFQAVABQACAAcAB1AHQAIABmAGEAaQBsAGUAZAAgAHcAaQB0AGgAIABl
AHgAYwBlAHAAdABpAG8AbgAgAHsAMAB9AC4AIABXAGkAbABsACAAcgBlAHQAcgB5AC4AACkgAE4A
bwAgAHUAcABkAGEAdABlACAAcgBlAHEAdQBpAHIAZQBkAC4AACkgACAAUgBlAHQAdQByAG4AaQBu
AGcAIABTAHUAYwBjAGUAcwBzAC4AABVHAHUAbQBiAG8AIABTAFMASQBTAAAzIAAgAEUAbgBjAG8A
dQBuAHQAZQByAGUAZAAgAGUAcgByAG8AcgA6ACAAewAwAH0ALgAAAysAABFcAHUAewAwADoAeAA0
AH0AABlbAF4AXAB4ADAAMAAtAFwAeAA3AEYAXQABAAAA1Uom2Zd2ekiOIKvjTMKwWwAIt3pcVhk0
4IkIiYRdzYCAzJEDBhIVAwYSGQMgAAEEAAASFQQAABIZBQABARIZBAgAEhUECAASGQMGEgwEAAAS
DAQIABIMCCAEEhgIDg4ODwACAhURHQERIRURHQERIQogAhURHQERIQ4OBAABDg4CBggDBhEUBAAA
AAAEAQAAAAMgAAgEIAEBCAMgAA4EIAEBDgggABURHQERIQkgAQEVER0BESEDIAANBCABAQ0HIAAV
ER0BCAggAQEVER0BCAMgAAIEIAEBAiAgDwIODggODhURHQERIRURHQERIQ4ODQ0OAhURHQEIDgIG
DgcGFREdAREhAgYNBgYVER0BCAIGAgMoAAgDKAAOCCgAFREdAREhAygADQcoABURHQEIAygAAgYA
ARJZEV0EIAASYQYgAgEOEmEEBwESFQUgAQERaQgBAAIAAAAAAAMAAAEKAAQCHBJ1EnkRfQQGEoCB
BSAAEoCJBSAAEoCNBiABEoCRHAMgABwHIAISgIUOHAQAAQ4cBRURHQEIBSABARMABCAAEwAGIAEd
Dh0DDBABAR4AFRKAsQEeAAMKAQ4FIAIBHBgGAAEBEoCBBgABARGAuQYAAg4OHRwFIAIODg4EAAAR
IQYgARKAhQ4GAAESgL0OCDG/OFatNk41BCABAQoFIAASgMkFAAASgM0JIAIBEoDJEoDNBSAAEoDZ
BiABARKAyQUAAg4OHAUgABKA6QogBgEIDg4OCBACCCAFAggODg4ISgcjEoCFAggODggODhURHQER
IRURHQERIQ4ODQ0CFREdAQgODg4ODg4SGAgSgMEOEoDREoDZEoDJEoDdEoDlEoDlFREdAQgdAx0c
BhABAR4ADgQKARIYFgcJDhKAwRKA2RKAyRKA3Q4SGBIYHRwGFREdAREhBwACAhEhESEGBwIRIREh
BAABAg4EIAECDgUAAREhDgUgABGA7QYAARKA8Q4HIAERgPURIQcgAREhEYD1DCAHAQgICAgICBGA
7RwHCRwOESESgPERgPURIRURHQERIRURHQERIR0DBgABDhKA+QQGEoD9BCABAwgIAAMODg4SgP0F
AAICDg4EIAARITgHDQIVER0BESEVER0BESERIRURHQERIREhFREdAQgVER0BCBURHQEIFREdAREh
ESEVER0BESERIUkBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuNQEAVA4URnJhbWV3b3JrRGlz
cGxheU5hbWUSLk5FVCBGcmFtZXdvcmsgNC41KAEAI1NUXzZlZmViMzcwZDdiMjQ1NmFiMTBjYzVl
MDMxNTMzOGYyAAAFAQAAAAAWAQARQ29weXJpZ2h0IEAgIDIwMTgAAAgBAAgAAAAAAB4BAAEAVAIW
V3JhcE5vbkV4Y2VwdGlvblRocm93cwEAAADQVgAAAAAAAAAAAADuVgAAACAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAA4FYAAAAAAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8l
ACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAAgAAAAAAA
AAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhgAACwAwAAAAAAAAAA
AACwAzQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAAAAEAK1yi
GwAAAQArXKIbPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBsAGUA
SQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAEEAMAAAEAUwB0
AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAA7AIAAAEAMAAwADAAMAAwADQAYgAwAAAAcAAkAAEA
RgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABfADYAZQBmAGUAYgAzADcAMABk
ADcAYgAyADQANQA2AGEAYgAxADAAYwBjADUAZQAwADMAMQA1ADMAMwA4AGYAMgAAAEAADwABAEYA
aQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA3ADAANwA0AC4AMgAzADUAOQA1AAAAAABw
ACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAVABfAGIAYQA5ADMAMQA5ADMAZAA5AGYA
MAAwADQAYwAzAGIAOABlADkAMAAzAGYAZgA4AGQAYgBlAGMAZQA1AGIANwAuAGQAbABsAAAASAAS
AAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAA
IAAyADAAMQA4AAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAVABf
AGIAYQA5ADMAMQA5ADMAZAA5AGYAMAAwADQAYwAzAGIAOABlADkAMAAzAGYAZgA4AGQAYgBlAGMA
ZQA1AGIANwAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwA2
AGUAZgBlAGIAMwA3ADAAZAA3AGIAMgA0ADUANgBhAGIAMQAwAGMAYwA1AGUAMAAzADEANQAzADMA
OABmADIAAABEAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADcAMAA3
ADQALgAyADMANQA5ADUAAAAAAEgADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4A
AAAxAC4AMAAuADcAMAA3ADQALgAyADMANQA5ADUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAMAAAAADcAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Well Loop\C# Script to Clean Up Old WAPS"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Script Task"
          DTS:DTSID="{75886631-8FE6-42DC-849D-9BAB5E041889}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="C# Script to Clean Up Old WAPS"
          DTS:ThreadHint="3">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_34a889bd5abe49a4a67121924343113f"
              VSTAMajorVersion="3"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::intWellId,User::strAccessKey,User::strApiKey,User::strListOfValidWapIds,User::strServerName,System::UserName">
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[using System.Net;
using System.IO;
using System.Text;
using System.Web;
using System.Web.Helpers;
using System.Linq;

#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion


namespace ST_34a889bd5abe49a4a67121924343113f
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            StringBuilder logMessage = new StringBuilder();
            string wapIdList = (string)Dts.Variables["User::strListOfValidWapIds"].Value;
            int wellId = (int)Dts.Variables["User::intWellId"].Value;
            logMessage.AppendFormat("Checking if well activity periods need to be deleted for well {0} - valid list of wap ids: {1}.", wellId, wapIdList);

            string serverName = (String)Dts.Variables["User::strServerName"].Value;
            string apiKey = (String)Dts.Variables["User::strApiKey"].Value;
            string accessKey = (String)Dts.Variables["User::strAccessKey"].Value;
            string currentUserId = (String)Dts.Variables["System::UserName"].Value;

            if (currentUserId != null)
            {
                currentUserId = currentUserId.Split('\\').Last();
            }

            ServicePointManager.ServerCertificateValidationCallback = delegate { return true; };
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls | SecurityProtocolType.Ssl3;

            try
            {
                string url = string.Format("https://{0}/api/wellActivityPeriod?wellId={1}&apikey={2}&accesskey={3}", serverName, wellId, apiKey, accessKey);
                url = url.Replace(" ", "%20");
                url = url.Replace("$", "%24");

                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                WebResponse webResponse = request.GetResponse();
                Stream webStream = webResponse.GetResponseStream();
                StreamReader responseReader = new StreamReader(webStream);
                string response = responseReader.ReadToEnd();
                responseReader.Close();
                WellActivityPeriod[] wellActivityPeriods = Json.Decode<WellActivityPeriod[]>(response);
                int[] validRemarkIds = string.IsNullOrEmpty(wapIdList) ? new int[] { } : wapIdList.Split((",").ToCharArray()).Select(s => Convert.ToInt32(s)).ToArray();

                WellActivityPeriod[] toDelete = wellActivityPeriods.Where(or => !validRemarkIds.Contains(or.wellActivityPeriodId)).ToArray();

                if (toDelete.Any())
                {
                    foreach (WellActivityPeriod wap in toDelete)
                    {
                        logMessage.AppendFormat(" Attempting delete of well activity period with id {0}.", wap.wellActivityPeriodId);
                        url = string.Format("https://{0}/api/wellActivityPeriod/{1}?apikey={2}&accesskey={3}", serverName, wap.wellActivityPeriodId, apiKey, accessKey);
                        request = (HttpWebRequest)WebRequest.Create(url);
                        string gumboPayload = Json.Encode(wap);

                        request.Method = "DELETE";
                        request.ContentType = "application/json";
                        request.ContentLength = gumboPayload.Length;
                        StreamWriter requestWriter = new StreamWriter(request.GetRequestStream(), System.Text.Encoding.ASCII);
                        requestWriter.Write(gumboPayload);
                        requestWriter.Close();
                        webResponse = request.GetResponse();
                        webStream = webResponse.GetResponseStream();
                        responseReader = new StreamReader(webStream);
                        response = responseReader.ReadToEnd();
                        responseReader.Close();
                    }
                }
                else
                {
                    logMessage.Append(" No deleted required.");
                }

                Dts.TaskResult = (int)ScriptResults.Success;
                logMessage.Append("  Returning Success.");
                bool fireAgain = false;
                Dts.Events.FireInformation(0, "Gumbo SSIS", logMessage.ToString(), string.Empty, 0, ref fireAgain);

            }
            catch (Exception e)
            {
                logMessage.AppendFormat("  Encountered error: {0}.", e.Message);
                Dts.Events.FireError(0, "Gumbo SSIS", logMessage.ToString(), string.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }


        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        #region data class
        class WellActivityPeriod
        {
            public int wellActivityPeriodId { get; set; }
            public int wellId { get; set; }
            public int rigId { get; set; }
            public DateTime? startDateTime { get; set; }
            public DateTime? endDateTime { get; set; }
            public string rowCreatedBy { get; set; }
            public string rowChangedBy { get; set; }
            public DateTime? rowCreatedDate { get; set; }
            public DateTime? rowChangedDate { get; set; }

        }
        #endregion

    }
}]]></ProjectItem>
              <ProjectItem
                Name="ST_34a889bd5abe49a4a67121924343113f.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{27AE93AA-11CB-4FCC-A25F-0316788CB4FE}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_34a889bd5abe49a4a67121924343113f</RootNamespace>
    <AssemblyName>ST_34a889bd5abe49a4a67121924343113f</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Web.Helpers, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
      <DesignTime>True</DesignTime>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\10.0\InstallDir#\devenv.exe" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_34a889bd5abe49a4a67121924343113f</msb:CodeName>
		<msb:DisplayName>ST_34a889bd5abe49a4a67121924343113f</msb:DisplayName>
		<msb:ProjectId>{D416C446-C7D3-445F-BFFD-457E25A841C6}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_34a889bd5abe49a4a67121924343113f.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_34a889bd5abe49a4a67121924343113f.Properties.Settings.get_Default():ST_34a889bd5abe49a4a67121924343113f.Properties.Sett" +
    "ings")]

namespace ST_34a889bd5abe49a4a67121924343113f.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_34a889bd5abe49a4a67121924343113f")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_34a889bd5abe49a4a67121924343113f")]
[assembly: AssemblyCopyright("Copyright @  2019")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_34a889bd5abe49a4a67121924343113f.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_34a889bd5abe49a4a67121924343113f.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_34a889bd5abe49a4a67121924343113f.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_34a889bd5abe49a4a67121924343113f.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_34a889bd5abe49a4a67121924343113f.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_34a889bd5abe49a4a67121924343113f.dll">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
AAQqIgIDfQwAAAQqHgJ7DQAABCoiAgN9DQAABCoeAnsOAAAEKiICA30OAAAEKh4Cew8AAAQqIgID
fQ8AAAQqHgJ7EAAABCoiAgN9EAAABCoeAnsRAAAEKiICA30RAAAEKh4CKA4AAAoqAAAAAAAAALQA
AADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIs
IFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1
NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAA
UEFEUEFEULQAAABCU0pCAQABAAAAAAAMAAAAdjQuMC4zMDMxOQAAAAAFAGwAAAAsCQAAI34AAJgJ
AACsDAAAI1N0cmluZ3MAAAAARBYAAIgEAAAjVVMAzBoAABAAAAAjR1VJRAAAANwaAAAsAwAAI0Js
b2IAAAAAAAAAAgAAAVcdogkJCwAAAPolMwAWAAABAAAAOQAAAAcAAAASAAAAIAAAABAAAABHAAAA
AgAAAC8AAAACAAAAAwAAAAwAAAAWAAAAAgAAAAEAAAAGAAAAAQAAAAMAAAAIAAAAAAAKAAEAAAAA
AAYA1ADNAAoA8ADbAA4AUAEnAQYAbAHNAAYAggFxAQYAswGeAQYApgLNAAYAsQLNAAYALwUVBQYA
WgVIBQYAcQVIBQYAjgVIBQYArQVIBQYAxgVIBQYA3wVIBQYA+gVIBQYAFQZIBQYALgZIBQYAZwZH
BgYAhwZHBgYAuAalBgYA1QbNAAYA2gbNAAYA/gZIBQoAKgcUBwoAQwcUBwYAWAdHBg4AegcnAQYA
+gfMBwoACgjMBwoAKAgUCAoAXwgUCAYAtwjNAAYA5QjNABIADQkBCQYAMwkYCQYAVglKCQ4AZAkn
ARYAvQmdCRYA1QmdCQYA8QnNAAYA+AnNAAYACwrNAAoAJgobCgoAYgobCgoAmwobCgoArQobCgoA
vAobCgYA3grUCgYA9wrUCgYABAvUChoAMgsfCwYAwQtKCQYA1AvUCgYA4QvUCg4ACAwnAQYARgzN
AAAAAAABAAAAAAABAAEAAAAQADIAPAAFAAEAAQAAARAAawA8AAkAAwAFAAEAEAB0AH8ADQAEAAgA
AwEAAKMAAAARAAYADAADABAAsQAAAAUACQAMAAMBEACcBwAABQASAB8AEQCSARMAEQC/ARcAEQAJ
AjkAEQCDCNkAEQC+COMABgYyAkcAVoA6AkoAVoBCAkoAAQCOA0cAAQC0A0cAAQDMA0cAAQDjA30A
AQACBH0AAQAfBIUAAQA9BIUAAQBbBH0AAQB7BH0ABgCvB8QAUCAAAAAAgxjPARsAAQBYIAAAAACT
CNUBHwABAJEgAAAAAJMI6QEkAAEAmCAAAAAAkwj1ASkAAQCgIAAAAACWCBkCPQACALMgAAAAAIYY
zwEbAAIApyAAAAAAkRhzB8AAAgDkIAAAAACGAC0CGwACAOAkAAAAAIYYzwEbAAIAwyAAAAAAkQA4
CM4AAgDGIAAAAACRAKoI3gAGAOgkAAAAAIYISgJYAAcA8CQAAAAAhghjAlwABwD5JAAAAACGCHwC
WAAIAAElAAAAAIYIhwJcAAgACiUAAAAAhgiSAlgACQASJQAAAACGCJwCXAAJABslAAAAAIYIugJh
AAoAIyUAAAAAhgjMAmoACgAsJQAAAACGCN4CYQALADQlAAAAAIYI7gJqAAsAPSUAAAAAhgj+AnQA
DABFJQAAAACGCA8DeAAMAE4lAAAAAIYIIAN0AA0AViUAAAAAhggxA3gADQBfJQAAAACGCEIDYQAO
AGclAAAAAIYIVQNqAA4AcCUAAAAAhghoA2EADwB4JQAAAACGCHsDagAPAIElAAAAAIYYzwEbABAA
uyAAAAAAhhjPARsAEADOIAAAAACGAL4HyAAQAAAAAQAPBQAAAQBDCAAAAgBKCAAAAwBRCAAABABY
CAAAAQC1CAAAAQAPBQAAAQAPBQAAAQAPBQAAAQAPBQAAAQAPBQAAAQAPBQAAAQAPBQAAAQAPBQAA
AQAPBQAAAQDJB0kAzwF4AFEAzwF4AFkAzwF4AGEAzwF4AGkAzwF4AHEAzwF4AHkAzwF4AIEAzwF4
AIkAzwF4AJEAzwF4AJkAzwFcAKEAzwEbAKkAzwEbAAkAzwEbALEA7AaZALEABwegACkAzwGlAMkA
zwGxANkAzwEbABEAzwEbAOEAzwEbABEB7QjeABkBQQnsACkBzwEbABkAdgn+ADEBxwkEATkB3gkK
AUEB5wkRASkB/gkVAUkBEAoeARkBFgolAQEBzwE2AWEBOgo8AWEBdwpDAUkBjApKAUkBkwpRAXEB
pgpXAXEByApeAYEB5QpkAZEBzwFqAZkBDwt0AJkBGQsbAKEBNwt6AUkBPguHAUkBTAuMAQwAzwE2
ARkBWAuZARkBXwu5ARQAzwE2ARkBZwvQARkBbQvvASkB/gn7AaEBcQsDAnEBeAt4AHEBgwt4AEkB
kwtYAHEBngsIAnEBsAtkAakBygsNArEBzwETArkB7At4ALkBGQsbACkB8gsdAjEB+QtcADEBHAwk
AgkAJwx0AEkBMAyFAMEBNgwqAskBUAx0AMEBXAw1AhkAzwEbAAgAHABOAAgAIABTACkAkwC3AC4A
OwDtAi4AWwAEAy4AMwC+Ai4AQwDnAi4AYwANAy4AEwC+Ai4ACwB0Ai4AGwDnAi4AIwDnAi4AKwDn
AkMAawBTAEkAkwC3AGEAmwBTAIEAmwBTAIMAqwBTAKEAmwBTAOMAmwBTACEBmwBTAEABmwBTAEEB
mwBTAGABmwBTAGEBmwBTAIABmwBTAIEBmwBTAKABmwBTAKEBmwBTAMABmwBTAMEBmwBTAOABmwBT
AOEBmwBTAAACmwBTAAECmwBTACACmwBTACECmwBTAEACmwBTAGACmwBTAIACmwBTAKACmwBTAMAC
mwBTAOACmwBTAAADmwBTACADmwBTAEADmwBTAGADmwBTAIADmwBTAKADmwBTAKwAPgICAAEAAwAD
AAYABAAAAIIBLwAAAAECNAAAACUCQgAAAJsEiAAAALAEiAAAALcEiAAAAL0EjAAAAMsEjAAAANcE
lQAAAOQElQAAAPEEjAAAAAAFjAACAAIAAwACAAMABQABAAQABQACAAUABwACAAwACQABAA0ACQAB
AA8ACwACAA4ACwACABAADQABABEADQACABIADwABABMADwABABUAEQACABQAEQACABYAEwABABcA
EwACABgAFQABABkAFQABABsAFwACABoAFwACABwAGQABAB0AGQCRAccBBIAAAAEAAACBGwNdAAAA
AAAAfwAAAAQAAAAAAAAAAAAAAAEAxAAAAAAABAAAAAAAAAAAAAAAAQDNAAAAAAALAAAAAAAAAAAA
AAAKAAgBAAAAAAQAAAAAAAAAAAAAAAEA9QgAAAAACwAAAAAAAAAAAAAACgB+CQAAAAABAAAAAAAA
AAAAAABxAR8LAAAAAAAAAAABAAAAZgwAAAUABAAGAAQABwAEAC8A+gA/ADIBVwCBAV8AtAFhAPoA
ZQDqAWEA6gFnAOoBAAAAAAA8TW9kdWxlPgBTVF8zNGE4ODliZDVhYmU0OWE0YTY3MTIxOTI0MzQz
MTEzZi5kbGwAUmVzb3VyY2VzAFNUXzM0YTg4OWJkNWFiZTQ5YTRhNjcxMjE5MjQzNDMxMTNmLlBy
b3BlcnRpZXMAU2V0dGluZ3MAU2NyaXB0TWFpbgBTVF8zNGE4ODliZDVhYmU0OWE0YTY3MTIxOTI0
MzQzMTEzZgBTY3JpcHRSZXN1bHRzAFdlbGxBY3Rpdml0eVBlcmlvZABtc2NvcmxpYgBTeXN0ZW0A
T2JqZWN0AFN5c3RlbS5Db25maWd1cmF0aW9uAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAE1pY3Jv
c29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5T
Y3JpcHRUYXNrAFZTVEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBFbnVtAFN5c3RlbS5SZXNvdXJj
ZXMAUmVzb3VyY2VNYW5hZ2VyAHJlc291cmNlTWFuAFN5c3RlbS5HbG9iYWxpemF0aW9uAEN1bHR1
cmVJbmZvAHJlc291cmNlQ3VsdHVyZQAuY3RvcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAGdldF9DdWx0
dXJlAHNldF9DdWx0dXJlAEN1bHR1cmUAZGVmYXVsdEluc3RhbmNlAGdldF9EZWZhdWx0AERlZmF1
bHQATWFpbgB2YWx1ZV9fAFN1Y2Nlc3MARmFpbHVyZQBnZXRfd2VsbEFjdGl2aXR5UGVyaW9kSWQA
c2V0X3dlbGxBY3Rpdml0eVBlcmlvZElkAGdldF93ZWxsSWQAc2V0X3dlbGxJZABnZXRfcmlnSWQA
c2V0X3JpZ0lkAE51bGxhYmxlYDEARGF0ZVRpbWUAZ2V0X3N0YXJ0RGF0ZVRpbWUAc2V0X3N0YXJ0
RGF0ZVRpbWUAZ2V0X2VuZERhdGVUaW1lAHNldF9lbmREYXRlVGltZQBnZXRfcm93Q3JlYXRlZEJ5
AHNldF9yb3dDcmVhdGVkQnkAZ2V0X3Jvd0NoYW5nZWRCeQBzZXRfcm93Q2hhbmdlZEJ5AGdldF9y
b3dDcmVhdGVkRGF0ZQBzZXRfcm93Q3JlYXRlZERhdGUAZ2V0X3Jvd0NoYW5nZWREYXRlAHNldF9y
b3dDaGFuZ2VkRGF0ZQA8d2VsbEFjdGl2aXR5UGVyaW9kSWQ+a19fQmFja2luZ0ZpZWxkADx3ZWxs
SWQ+a19fQmFja2luZ0ZpZWxkADxyaWdJZD5rX19CYWNraW5nRmllbGQAPHN0YXJ0RGF0ZVRpbWU+
a19fQmFja2luZ0ZpZWxkADxlbmREYXRlVGltZT5rX19CYWNraW5nRmllbGQAPHJvd0NyZWF0ZWRC
eT5rX19CYWNraW5nRmllbGQAPHJvd0NoYW5nZWRCeT5rX19CYWNraW5nRmllbGQAPHJvd0NyZWF0
ZWREYXRlPmtfX0JhY2tpbmdGaWVsZAA8cm93Q2hhbmdlZERhdGU+a19fQmFja2luZ0ZpZWxkAHdl
bGxBY3Rpdml0eVBlcmlvZElkAHdlbGxJZAByaWdJZABzdGFydERhdGVUaW1lAGVuZERhdGVUaW1l
AHJvd0NyZWF0ZWRCeQByb3dDaGFuZ2VkQnkAcm93Q3JlYXRlZERhdGUAcm93Q2hhbmdlZERhdGUA
dmFsdWUAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1dGUA
U3lzdGVtLlJlZmxlY3Rpb24AQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0
aW9uQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseUNvbXBh
bnlBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0
cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAEFzc2VtYmx5Q3VsdHVyZUF0dHJpYnV0
ZQBBc3NlbWJseVZlcnNpb25BdHRyaWJ1dGUAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNl
cwBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0
cmlidXRlAFN5c3RlbS5EaWFnbm9zdGljcwBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAFR5
cGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUAQXNzZW1ibHkAZ2V0X0Fzc2Vt
Ymx5AFN5c3RlbS5Db21wb25lbnRNb2RlbABFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUARWRpdG9y
QnJvd3NhYmxlU3RhdGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUALmNjdG9yAFNTSVNTY3Jp
cHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQA8PmNfX0Rpc3BsYXlDbGFzczUAdmFsaWRSZW1hcmtJ
ZHMAPE1haW4+Yl9fMgBvcgBTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5Llg1MDlDZXJ0aWZp
Y2F0ZXMAWDUwOUNlcnRpZmljYXRlAFg1MDlDaGFpbgBTeXN0ZW0uTmV0LlNlY3VyaXR5AFNzbFBv
bGljeUVycm9ycwA8TWFpbj5iX18wAHBhcmFtMABwYXJhbTEAcGFyYW0yAHBhcmFtMwBSZW1vdGVD
ZXJ0aWZpY2F0ZVZhbGlkYXRpb25DYWxsYmFjawBDUyQ8PjlfX0NhY2hlZEFub255bW91c01ldGhv
ZERlbGVnYXRlMwA8TWFpbj5iX18xAHMARnVuY2AyAENTJDw+OV9fQ2FjaGVkQW5vbnltb3VzTWV0
aG9kRGVsZWdhdGU0AENvbnZlcnQAVG9JbnQzMgBTeXN0ZW0uQ29yZQBTeXN0ZW0uTGlucQBFbnVt
ZXJhYmxlAFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljAElFbnVtZXJhYmxlYDEAQ29udGFpbnMA
U3lzdGVtLlRleHQAU3RyaW5nQnVpbGRlcgBTY3JpcHRPYmplY3RNb2RlbABnZXRfRHRzAE1pY3Jv
c29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1l
AFZhcmlhYmxlcwBnZXRfVmFyaWFibGVzAFZhcmlhYmxlAGdldF9JdGVtAGdldF9WYWx1ZQBTdHJp
bmcASW50MzIAQXBwZW5kRm9ybWF0AENoYXIAU3BsaXQATGFzdABTeXN0ZW0uTmV0AFNlcnZpY2VQ
b2ludE1hbmFnZXIAc2V0X1NlcnZlckNlcnRpZmljYXRlVmFsaWRhdGlvbkNhbGxiYWNrAFNlY3Vy
aXR5UHJvdG9jb2xUeXBlAHNldF9TZWN1cml0eVByb3RvY29sAEZvcm1hdABSZXBsYWNlAFdlYlJl
cXVlc3QAQ3JlYXRlAEh0dHBXZWJSZXF1ZXN0AFdlYlJlc3BvbnNlAEdldFJlc3BvbnNlAFN5c3Rl
bS5JTwBTdHJlYW0AR2V0UmVzcG9uc2VTdHJlYW0AU3RyZWFtUmVhZGVyAFRleHRSZWFkZXIAUmVh
ZFRvRW5kAENsb3NlAFN5c3RlbS5XZWIuSGVscGVycwBKc29uAERlY29kZQBJc051bGxPckVtcHR5
AFRvQ2hhckFycmF5AFNlbGVjdABUb0FycmF5AFdoZXJlAEFueQBFbmNvZGUAc2V0X01ldGhvZABz
ZXRfQ29udGVudFR5cGUAZ2V0X0xlbmd0aABzZXRfQ29udGVudExlbmd0aABHZXRSZXF1ZXN0U3Ry
ZWFtAEVuY29kaW5nAGdldF9BU0NJSQBTdHJlYW1Xcml0ZXIAVGV4dFdyaXRlcgBXcml0ZQBBcHBl
bmQAc2V0X1Rhc2tSZXN1bHQARXZlbnRzT2JqZWN0V3JhcHBlcgBnZXRfRXZlbnRzAFRvU3RyaW5n
AEVtcHR5AEZpcmVJbmZvcm1hdGlvbgBFeGNlcHRpb24AZ2V0X01lc3NhZ2UARmlyZUVycm9yAFNU
XzM0YTg4OWJkNWFiZTQ5YTRhNjcxMjE5MjQzNDMxMTNmLlByb3BlcnRpZXMuUmVzb3VyY2VzLnJl
c291cmNlcwAAAAAAcVMAVABfADMANABhADgAOAA5AGIAZAA1AGEAYgBlADQAOQBhADQAYQA2ADcA
MQAyADEAOQAyADQAMwA0ADMAMQAxADMAZgAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBv
AHUAcgBjAGUAcwAANVUAcwBlAHIAOgA6AHMAdAByAEwAaQBzAHQATwBmAFYAYQBsAGkAZABXAGEA
cABJAGQAcwAAH1UAcwBlAHIAOgA6AGkAbgB0AFcAZQBsAGwASQBkAACAv0MAaABlAGMAawBpAG4A
ZwAgAGkAZgAgAHcAZQBsAGwAIABhAGMAdABpAHYAaQB0AHkAIABwAGUAcgBpAG8AZABzACAAbgBl
AGUAZAAgAHQAbwAgAGIAZQAgAGQAZQBsAGUAdABlAGQAIABmAG8AcgAgAHcAZQBsAGwAIAB7ADAA
fQAgAC0AIAB2AGEAbABpAGQAIABsAGkAcwB0ACAAbwBmACAAdwBhAHAAIABpAGQAcwA6ACAAewAx
AH0ALgABJ1UAcwBlAHIAOgA6AHMAdAByAFMAZQByAHYAZQByAE4AYQBtAGUAAB9VAHMAZQByADoA
OgBzAHQAcgBBAHAAaQBLAGUAeQAAJVUAcwBlAHIAOgA6AHMAdAByAEEAYwBjAGUAcwBzAEsAZQB5
AAAhUwB5AHMAdABlAG0AOgA6AFUAcwBlAHIATgBhAG0AZQAAgI1oAHQAdABwAHMAOgAvAC8AewAw
AH0ALwBhAHAAaQAvAHcAZQBsAGwAQQBjAHQAaQB2AGkAdAB5AFAAZQByAGkAbwBkAD8AdwBlAGwA
bABJAGQAPQB7ADEAfQAmAGEAcABpAGsAZQB5AD0AewAyAH0AJgBhAGMAYwBlAHMAcwBrAGUAeQA9
AHsAMwB9AAADIAAAByUAMgAwAAADJAAAByUAMgA0AAADLAAAbyAAQQB0AHQAZQBtAHAAdABpAG4A
ZwAgAGQAZQBsAGUAdABlACAAbwBmACAAdwBlAGwAbAAgAGEAYwB0AGkAdgBpAHQAeQAgAHAAZQBy
AGkAbwBkACAAdwBpAHQAaAAgAGkAZAAgAHsAMAB9AC4AAH9oAHQAdABwAHMAOgAvAC8AewAwAH0A
LwBhAHAAaQAvAHcAZQBsAGwAQQBjAHQAaQB2AGkAdAB5AFAAZQByAGkAbwBkAC8AewAxAH0APwBh
AHAAaQBrAGUAeQA9AHsAMgB9ACYAYQBjAGMAZQBzAHMAawBlAHkAPQB7ADMAfQAADUQARQBMAEUA
VABFAAAhYQBwAHAAbABpAGMAYQB0AGkAbwBuAC8AagBzAG8AbgAAKyAATgBvACAAZABlAGwAZQB0
AGUAZAAgAHIAZQBxAHUAaQByAGUAZAAuAAApIAAgAFIAZQB0AHUAcgBuAGkAbgBnACAAUwB1AGMA
YwBlAHMAcwAuAAAVRwB1AG0AYgBvACAAUwBTAEkAUwAAMyAAIABFAG4AYwBvAHUAbgB0AGUAcgBl
AGQAIABlAHIAcgBvAHIAOgAgAHsAMAB9AC4AAAAAANyX9/tPi5lIsoYljF6yG9sACLd6XFYZNOCJ
CImEXc2AgMyRAwYSFQMGEhkDIAABBAAAEhUEAAASGQUAAQESGQQIABIVBAgAEhkDBhIMBAAAEgwE
CAASDAIGCAMGERQEAAAAAAQBAAAAAyAACAQgAQEICCAAFREdAREhCSABARURHQERIQMgAA4EIAEB
DgcGFREdAREhAgYOAygACAgoABURHQERIQMoAA4GAAESWRFdBCAAEmEGIAIBDhJhBAcBEhUFIAEB
EWkIAQACAAAAAAADAAABAwYdCAUgAQISGAoABAIcEnUSeRF9BAYSgIEEAAEIDggGFRKAhQIOCA0Q
AQICFRKAkQEeAB4AAwoBCAUgABKAmQUgABKAnQYgARKAoRwDIAAcCCADEoCVDhwcBiABHQ4dAwwQ
AQEeABUSgJEBHgADCgEOBSACARwYBgABARKAgQYAAQERgLUGAAIODh0cBSACDg4OBgABEoC5DgUg
ABKAwQUgABKAxQYgAQESgMUIMb84Vq02TjUGEAEBHgAOBQoBHRIYBAABAg4EIAAdAwcVEoCFAg4I
GhACAhUSgJEBHgEVEoCRAR4AFRKAhQIeAB4BBAoCDggNEAEBHR4AFRKAkQEeAAgVEoCFAhIYAhkQ
AQIVEoCRAR4AFRKAkQEeABUSgIUCHgACBAoBEhgLEAEBAhUSgJEBHgAHIAISgJUOHAQAAQ4cBCAB
AQoFAAASgNUJIAIBEoDFEoDVBiABEoCVDgUgABKA4QogBgEIDg4OCBACCCAFAggODg4INQcaEoCV
DggODg4ODhKAvRKAwRKAxRKAyQ4dEhgdEhgSGA4SgNkCEhwSgOUdAx0cHRIYCB0cSQEAGi5ORVRG
cmFtZXdvcmssVmVyc2lvbj12NC41AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1l
d29yayA0LjUoAQAjU1RfMzRhODg5YmQ1YWJlNDlhNGE2NzEyMTkyNDM0MzExM2YAAAUBAAAAABYB
ABFDb3B5cmlnaHQgQCAgMjAxOQAACAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhy
b3dzAXhEAAAAAAAAAAAAAI5EAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAACARAAAAAAAAAAAX0Nv
ckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAA
GAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhgAACw
AwAAAAAAAAAAAACwAzQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAA
AQAAAAEAA12BGwAAAQADXYEbPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQBy
AEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAE
EAMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAA7AIAAAEAMAAwADAAMAAwADQAYgAw
AAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABfADMANABhADgA
OAA5AGIAZAA1AGEAYgBlADQAOQBhADQAYQA2ADcAMQAyADEAOQAyADQAMwA0ADMAMQAxADMAZgAA
AEAADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA3ADAANAAxAC4AMgAzADgA
MQAxAAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAVABfADMANABhADgAOAA5
AGIAZAA1AGEAYgBlADQAOQBhADQAYQA2ADcAMQAyADEAOQAyADQAMwA0ADMAMQAxADMAZgAuAGQA
bABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBo
AHQAIABAACAAIAAyADAAMQA5AAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0A
ZQAAAFMAVABfADMANABhADgAOAA5AGIAZAA1AGEAYgBlADQAOQBhADQAYQA2ADcAMQAyADEAOQAy
ADQAMwA0ADMAMQAxADMAZgAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAA
AABTAFQAXwAzADQAYQA4ADgAOQBiAGQANQBhAGIAZQA0ADkAYQA0AGEANgA3ADEAMgAxADkAMgA0
ADMANAAzADEAMQAzAGYAAABEAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4A
MAAuADcAMAA0ADEALgAyADMAOAAxADEAAAAAAEgADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQBy
AHMAaQBvAG4AAAAxAC4AMAAuADcAMAA0ADEALgAyADMAOAAxADEAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAMAAAAoDQAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Well Loop\C# Script to Delete Child Well"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Script Task"
          DTS:DTSID="{5E115D51-3E69-4E7E-9594-A9990EC573F9}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="C# Script to Delete Child Well"
          DTS:ThreadHint="4">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_303ac6cceb4843a2aca392fd868b6f4d"
              VSTAMajorVersion="3"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadOnlyVariables="User::intWellId,User::strAccessKey,User::strApiKey,User::strServerName,System::UserName">
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="ST_303ac6cceb4843a2aca392fd868b6f4d.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{D474B823-727C-4C02-B462-1A0800ED6129}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_303ac6cceb4843a2aca392fd868b6f4d</RootNamespace>
    <AssemblyName>ST_303ac6cceb4843a2aca392fd868b6f4d</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Web.Helpers, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
      <DesignTime>True</DesignTime>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\10.0\InstallDir#\devenv.exe" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[using System.Net;
using System.IO;
using System.Text;
using System.Web;
using System.Web.Helpers;
using System.Linq;

#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion

namespace ST_303ac6cceb4843a2aca392fd868b6f4d
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            StringBuilder logMessage = new StringBuilder();
            try
            {
                bool fireAgain = false;
                int wellId = (int)Dts.Variables["User::intWellId"].Value;
                logMessage.AppendFormat("Deleting well with id {0}.", wellId);
                string serverName = (String)Dts.Variables["User::strServerName"].Value;
                string apiKey = (String)Dts.Variables["User::strApiKey"].Value;
                string accessKey = (String)Dts.Variables["User::strAccessKey"].Value;
                string currentUserId = (String)Dts.Variables["System::UserName"].Value;

                if (currentUserId != null)
                {
                    currentUserId = currentUserId.Split('\\').Last();
                }

                ServicePointManager.ServerCertificateValidationCallback = delegate { return true; };
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls | SecurityProtocolType.Ssl3;

                DateTime now = DateTime.Now;
                logMessage.Append(" Getting child well."); 
                Well childWell = GetExistingWell(wellId, serverName, apiKey, accessKey);

                if (childWell == null)
                {
                    logMessage.Append(" Child well not found - will not attempt delete.");
                }
                else
                {
                    logMessage.Append(" Child well found - will attempt delete.");
                }

                int retries = 2;
                while (retries > 0 && childWell != null)
                {
                    try
                    {
                        string url = string.Format("https://{0}/api/well/{1}?apikey={2}&accesskey={3}", serverName, wellId, apiKey, accessKey);
                        url = url.Replace(" ", "%20");
                        url = url.Replace("$", "%24");

                        HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                        string gumboPayload = Json.Encode(childWell);

                        request.Method = "DELETE";
                        request.ContentType = "application/json";
                        request.ContentLength = gumboPayload.Length;
                        StreamWriter requestWriter = new StreamWriter(request.GetRequestStream(), System.Text.Encoding.ASCII);
                        requestWriter.Write(gumboPayload);
                        requestWriter.Close();

                        WebResponse webResponse = request.GetResponse();
                        Stream webStream = webResponse.GetResponseStream();
                        StreamReader responseReader = new StreamReader(webStream);
                        string response = responseReader.ReadToEnd();
                        responseReader.Close();
                        retries = 0; // indicate success
                    }
                    catch (Exception e)
                    {
                        retries--;
                        if (retries > 0)
                        {
                            logMessage.Append(string.Format(" HTTP put failed with exception {0}. Will retry.", e.Message));
                        }
                        else
                        {
                            throw e;
                        }
                    }
                }
                Dts.TaskResult = (int)ScriptResults.Success;
                logMessage.Append("  Returning Success.");
                Dts.Events.FireInformation(0, "Gumbo SSIS", logMessage.ToString(), string.Empty, 0, ref fireAgain);
            }
            catch (Exception e)
            {
                logMessage.AppendFormat("  Encountered error: {0}.", e.Message);
                Dts.Events.FireError(0, "Gumbo SSIS", logMessage.ToString(), string.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        private Well GetExistingWell(int wellId, string serverName, string apiKey, string accessKey)
        {
            try
            {
                string url = string.Format("https://{0}/api/well/{1}?apikey={2}&accesskey={3}", serverName, wellId, apiKey, accessKey);
                url = url.Replace(" ", "%20");
                url = url.Replace("$", "%24");
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                WebResponse webResponse = request.GetResponse();
                Stream webStream = webResponse.GetResponseStream();
                StreamReader responseReader = new StreamReader(webStream);
                string response = responseReader.ReadToEnd();
                responseReader.Close();
                Well well = Json.Decode<Well>(response);
                return well;
            }
            catch (Exception e)
            {
                return null;
            }
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        #region data class
        class Well
        {
            public int wellId { get; set; }
            public string wellName { get; set; }
            public string uwi { get; set; }
            public int customerId { get; set; }
            public string jobNum { get; set; }
            public string wellNum { get; set; }
            public DateTime? spudDate { get; set; }
            public DateTime? rigReleaseDate { get; set; }
            public string provinceState { get; set; }
            public string country { get; set; }
            public double latitude { get; set; }
            public double longitude { get; set; }
            public int? currentRigId { get; set; }
            public string timeZone { get; set; }
            public bool activeInd { get; set; }
            public string rowCreatedBy { get; set; }
            public string rowChangedBy { get; set; }
            public DateTime? rowCreatedDate { get; set; }
            public DateTime? rowChangedDate { get; set; }

        }
        #endregion

    }
}]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_303ac6cceb4843a2aca392fd868b6f4d</msb:CodeName>
		<msb:DisplayName>ST_303ac6cceb4843a2aca392fd868b6f4d</msb:DisplayName>
		<msb:ProjectId>{DCBB6502-04F5-4398-AAE0-29B0AD5D970C}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_303ac6cceb4843a2aca392fd868b6f4d.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_303ac6cceb4843a2aca392fd868b6f4d.Properties.Settings.get_Default():ST_303ac6cceb4843a2aca392fd868b6f4d.Properties.Sett" +
    "ings")]

namespace ST_303ac6cceb4843a2aca392fd868b6f4d.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_303ac6cceb4843a2aca392fd868b6f4d")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_303ac6cceb4843a2aca392fd868b6f4d")]
[assembly: AssemblyCopyright("Copyright @  2019")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_303ac6cceb4843a2aca392fd868b6f4d.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_303ac6cceb4843a2aca392fd868b6f4d.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_303ac6cceb4843a2aca392fd868b6f4d.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_303ac6cceb4843a2aca392fd868b6f4d.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_303ac6cceb4843a2aca392fd868b6f4d.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_303ac6cceb4843a2aca392fd868b6f4d.dll">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
ew4AAAQqIgIDfQ4AAAQqHgJ7DwAABCoiAgN9DwAABCoeAnsQAAAEKiICA30QAAAEKh4CexEAAAQq
IgIDfREAAAQqHgJ7EgAABCoiAgN9EgAABCoeAnsTAAAEKiICA30TAAAEKh4CexQAAAQqIgIDfRQA
AAQqHgJ7FQAABCoiAgN9FQAABCoeAnsWAAAEKiICA30WAAAEKh4CexcAAAQqIgIDfRcAAAQqHgJ7
GAAABCoiAgN9GAAABCoeAnsZAAAEKiICA30ZAAAEKh4CexoAAAQqIgIDfRoAAAQqHgIoDgAACioA
AAAAALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNj
b3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1i
NzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAA
AAAAAAAAUEFEUEFEULQAAABCU0pCAQABAAAAAAAMAAAAdjQuMC4zMDMxOQAAAAAFAGwAAACECwAA
I34AAPALAABgDgAAI1N0cmluZ3MAAAAAUBoAALwDAAAjVVMADB4AABAAAAAjR1VJRAAAABweAADk
AgAAI0Jsb2IAAAAAAAAAAgAAAVcdogEJCwAAAPolMwAWAAABAAAANwAAAAYAAAAaAAAAMgAAABwA
AAA+AAAAAgAAAEoAAAADAAAAAwAAABYAAAAqAAAAAQAAAAYAAAABAAAAAgAAAAIAAAAAAAoAAQAA
AAAABgDGAL8ACgDiAM0ADgBCARkBBgBeAb8ABgB0AWMBBgClAZABBgDYAr8ABgDjAr8ABgCTB3kH
BgC+B6wHBgDVB6wHBgDyB6wHBgARCKwHBgAqCKwHBgBDCKwHBgBeCKwHBgB5CKwHBgCSCKwHBgDL
CKsIBgDrCKsIBgAcCQkJBgA5Cb8ABgA+Cb8ABgBiCawHCgCOCXgJCgCnCXgJBgC8CasIDgDeCRkB
BgAuCgAKCgA+CgAKCgBcCkgKCgCTCkgKBgDqCt4KDgD4ChkBEgBRCzELEgBpCzELBgCFC78ABgCY
C78ABgCfC78AFgDCC7YLBgDoC80LCgAGDPsLCgBCDPsLCgCKDPsLCgCcDPsLGgC+DKsMBgAMDQIN
BgAkDd4KBgA3DQINBgBEDQINCgBbDfsLBgCFDQINBgCSDQINBgCnDb8ADgDMDRkBAAAAAAEAAAAA
AAEAAQAAABAAMgA8AAUAAQABAAABEABrADwACQADAAUAAQAQAHQAfwANAAQACAADAQAAowAAABEA
BQAMAAMAEACxAAAABQAIAAwAEQCEARMAEQCxARcAEQD7ATkAEQC3ChgBBgY0AlAAVoA8AlMAVoBE
AlMAAQCGBFAAAQCeBKkAAQC4BKkAAQDNBFAAAQDpBKkAAQABBakAAQAaBawAAQA0BawAAQBUBakA
AQBzBakAAQCMBbQAAQCmBbQAAQDBBbcAAQDfBakAAQD5Bb4AAQAUBqkAAQAyBqkAAQBQBqwAAQBw
BqwAUCAAAAAAgxjBARsAAQBYIAAAAACTCMcBHwABAJEgAAAAAJMI2wEkAAEAmCAAAAAAkwjnASkA
AQCgIAAAAACWCAsCPQACALMgAAAAAIYYwQEbAAIApyAAAAAAkRjXCQkBAgDAIAAAAACGAB8CGwAC
APgjAAAAAIEAJAJHAAIAsCQAAAAAhhjBARsABgC7IAAAAACRAGwKDQEGALgkAAAAAIYITAJhAAoA
wCQAAAAAhghXAmUACgDJJAAAAACGCGICagALANEkAAAAAIYIbwJuAAsA2iQAAAAAhgh8AmoADADi
JAAAAACGCIQCbgAMAOskAAAAAIYIjAJhAA0A8yQAAAAAhgibAmUADQD8JAAAAACGCKoCagAOAAQl
AAAAAIYItQJuAA4ADSUAAAAAhgjAAmoADwAVJQAAAACGCMwCbgAPAB4lAAAAAIYI7AJzABAAJiUA
AAAAhgj5AnwAEAAvJQAAAACGCAYDcwARADclAAAAAIYIGQN8ABEAQCUAAAAAhggsA2oAEgBIJQAA
AACGCD4DbgASAFElAAAAAIYIUANqABMAWSUAAAAAhghcA24AEwBiJQAAAACGCGgDhgAUAGolAAAA
AIYIdQOKABQAcyUAAAAAhgiCA4YAFQB7JQAAAACGCJADigAVAIQlAAAAAIYIngOPABYAjCUAAAAA
hgivA5cAFgCVJQAAAACGCMADagAXAJ0lAAAAAIYIzQNuABcApiUAAAAAhgjaA6AAGACuJQAAAACG
COgDpAAYALclAAAAAIYI9gNqABkAvyUAAAAAhggHBG4AGQDIJQAAAACGCBgEagAaANAlAAAAAIYI
KQRuABoA2SUAAAAAhgg6BHMAGwDhJQAAAACGCE0EfAAbAOolAAAAAIYIYARzABwA8iUAAAAAhghz
BHwAHAD7JQAAAACGGMEBGwAdAAAAAQBXBwAAAQCQBgAAAgBdBwAAAwBoBwAABABvBwAAAQB3CgAA
AgB+CgAAAwCFCgAABACMCgAAAQBXBwAAAQBXBwAAAQBXBwAAAQBXBwAAAQBXBwAAAQBXBwAAAQBX
BwAAAQBXBwAAAQBXBwAAAQBXBwAAAQBXBwAAAQBXBwAAAQBXBwAAAQBXBwAAAQBXBwAAAQBXBwAA
AQBXBwAAAQBXBwAAAQBXB0kAwQFuAFEAwQFuAFkAwQFuAGEAwQFuAGkAwQFuAHEAwQFuAHkAwQFu
AIEAwQFuAIkAwQFuAJEAwQFuAJkAwQFlAKEAwQEbAKkAwQEbAAkAwQEbALEAUAniALEAawnpACkA
wQHuAMkAwQH6ANkAwQEbABEAwQEbAOEAwQEbAAkBwQEbABkACgsdAREBWwsjARkBcgspASEBewsw
AQkBiws0ATEBpAs8AUEB9gtDAQEBwQFUAVEBGgxaAVEBVwxhAUEAbAxoAQkBdAxtATEBewx0ATEB
ggx7AWEBlQyBAXEBwwyRAWEBygxuAGEB1QxuADEB5QxhAGEB8AyWAWEBEw2bAYEBLQ2hAYkBwQGn
AZEBTw1uAJEBVQ0bAGEBZw2xAZkBcw2bAaEBwQG3AakBnQ1qAKkBVQ0bALEBsQ1qADEBewy+AREB
vQ1lABEB4A3EAQkA6w1qADEB9A2pALkB+g3KAbkBCg7VAXEBFA4IAhkAwQEbAAgAGABXAAgAHABc
ACkAkwAAAS4AMwB1Ai4AQwCeAi4AIwCeAi4AOwCkAi4AWwC7Ai4AYwDEAi4AKwCeAi4ACwArAi4A
EwB1Ai4AGwCeAkMAawBcAEkAkwAAAWEAmwBcAIEAmwBcAIMAqwBcAAEBmwBcACEBmwBcAEEBmwBc
AGABmwBcAGEBmwBcAIABmwBcAIEBmwBcAKABmwBcAKEBmwBcAMABmwBcAMEBmwBcAOABmwBcAOEB
mwBcAAACmwBcAAECmwBcACACmwBcACECmwBcAEACmwBcAEECmwBcAGACmwBcAGECmwBcAIACmwBc
AIECmwBcAKACmwBcAKECmwBcAMACmwBcAMECmwBcAOACmwBcAOECmwBcAAADmwBcAAEDmwBcACAD
mwBcACEDmwBcAEADmwBcAEEDmwBcAGADmwBcAIADmwBcAKADmwBcAMADmwBcAOADmwBcAAAEmwBc
ACAEmwBcAEAEmwBcAGAEmwBcAIAEmwBcAKAEmwBcAMAEmwBcAOAEmwBcAAAFmwBcACAFmwBcAEAF
mwBcAGAFmwBcAIAFmwBcAKAFmwBcAMAFmwBcAOAFmwBcAAAGmwBcACAGmwBcAPUA3gEUAgIAAQAD
AAMABgAEAAAAdAEvAAAA8wE0AAAAFwJCAAAAkAbBAAAAlwbFAAAAoAbFAAAApAbBAAAArwbFAAAA
tgbFAAAAvgbJAAAAxwbJAAAA1gbFAAAA5AbFAAAA7AbSAAAA9QbSAAAA/wbWAAAADAfFAAAAFQfe
AAAAHwfFAAAALAfFAAAAOQfJAAAASAfJAAIAAgADAAIAAwAFAAEABAAFAAIABQAHAAIADAAJAAEA
DQAJAAIADgALAAEADwALAAEAEQANAAIAEAANAAEAEwAPAAIAEgAPAAIAFAARAAEAFQARAAIAFgAT
AAEAFwATAAEAGQAVAAIAGAAVAAIAGgAXAAEAGwAXAAIAHAAZAAEAHQAZAAIAHgAbAAEAHwAbAAEA
IQAdAAIAIAAdAAEAIwAfAAIAIgAfAAIAJAAhAAEAJQAhAAEAJwAjAAIAJgAjAAEAKQAlAAIAKAAl
AAIAKgAnAAEAKwAnAAIALAApAAEALQApAAEALwArAAIALgArAAIAMAAtAAEAMQAtAASAAAABAAAA
LhwPYAAAAAAAAH8AAAAEAAAAAAAAAAAAAAABALYAAAAAAAQAAAAAAAAAAAAAAAEAvwAAAAAACwAA
AAAAAAAAAAAACgD6AAAAAAALAAAAAAAAAAAAAAAKABILAAAAAAQAAAAAAAAAAAAAAAEAqgsAAAAA
AgAAAAAAAAAAAAAAiAGrDAAAAAAAAAAAAQAAABsOAAAFAAQABgAEADsAUAF7AA8CAAAAAAA8TW9k
dWxlPgBTVF8zMDNhYzZjY2ViNDg0M2EyYWNhMzkyZmQ4NjhiNmY0ZC5kbGwAUmVzb3VyY2VzAFNU
XzMwM2FjNmNjZWI0ODQzYTJhY2EzOTJmZDg2OGI2ZjRkLlByb3BlcnRpZXMAU2V0dGluZ3MAU2Ny
aXB0TWFpbgBTVF8zMDNhYzZjY2ViNDg0M2EyYWNhMzkyZmQ4NjhiNmY0ZABTY3JpcHRSZXN1bHRz
AFdlbGwAbXNjb3JsaWIAU3lzdGVtAE9iamVjdABTeXN0ZW0uQ29uZmlndXJhdGlvbgBBcHBsaWNh
dGlvblNldHRpbmdzQmFzZQBNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sATWljcm9zb2Z0
LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBWU1RBUlRTY3JpcHRPYmplY3RNb2RlbEJh
c2UARW51bQBTeXN0ZW0uUmVzb3VyY2VzAFJlc291cmNlTWFuYWdlcgByZXNvdXJjZU1hbgBTeXN0
ZW0uR2xvYmFsaXphdGlvbgBDdWx0dXJlSW5mbwByZXNvdXJjZUN1bHR1cmUALmN0b3IAZ2V0X1Jl
c291cmNlTWFuYWdlcgBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQBDdWx0dXJlAGRlZmF1bHRJbnN0
YW5jZQBnZXRfRGVmYXVsdABEZWZhdWx0AE1haW4AR2V0RXhpc3RpbmdXZWxsAHZhbHVlX18AU3Vj
Y2VzcwBGYWlsdXJlAGdldF93ZWxsSWQAc2V0X3dlbGxJZABnZXRfd2VsbE5hbWUAc2V0X3dlbGxO
YW1lAGdldF91d2kAc2V0X3V3aQBnZXRfY3VzdG9tZXJJZABzZXRfY3VzdG9tZXJJZABnZXRfam9i
TnVtAHNldF9qb2JOdW0AZ2V0X3dlbGxOdW0Ac2V0X3dlbGxOdW0ATnVsbGFibGVgMQBEYXRlVGlt
ZQBnZXRfc3B1ZERhdGUAc2V0X3NwdWREYXRlAGdldF9yaWdSZWxlYXNlRGF0ZQBzZXRfcmlnUmVs
ZWFzZURhdGUAZ2V0X3Byb3ZpbmNlU3RhdGUAc2V0X3Byb3ZpbmNlU3RhdGUAZ2V0X2NvdW50cnkA
c2V0X2NvdW50cnkAZ2V0X2xhdGl0dWRlAHNldF9sYXRpdHVkZQBnZXRfbG9uZ2l0dWRlAHNldF9s
b25naXR1ZGUAZ2V0X2N1cnJlbnRSaWdJZABzZXRfY3VycmVudFJpZ0lkAGdldF90aW1lWm9uZQBz
ZXRfdGltZVpvbmUAZ2V0X2FjdGl2ZUluZABzZXRfYWN0aXZlSW5kAGdldF9yb3dDcmVhdGVkQnkA
c2V0X3Jvd0NyZWF0ZWRCeQBnZXRfcm93Q2hhbmdlZEJ5AHNldF9yb3dDaGFuZ2VkQnkAZ2V0X3Jv
d0NyZWF0ZWREYXRlAHNldF9yb3dDcmVhdGVkRGF0ZQBnZXRfcm93Q2hhbmdlZERhdGUAc2V0X3Jv
d0NoYW5nZWREYXRlADx3ZWxsSWQ+a19fQmFja2luZ0ZpZWxkADx3ZWxsTmFtZT5rX19CYWNraW5n
RmllbGQAPHV3aT5rX19CYWNraW5nRmllbGQAPGN1c3RvbWVySWQ+a19fQmFja2luZ0ZpZWxkADxq
b2JOdW0+a19fQmFja2luZ0ZpZWxkADx3ZWxsTnVtPmtfX0JhY2tpbmdGaWVsZAA8c3B1ZERhdGU+
a19fQmFja2luZ0ZpZWxkADxyaWdSZWxlYXNlRGF0ZT5rX19CYWNraW5nRmllbGQAPHByb3ZpbmNl
U3RhdGU+a19fQmFja2luZ0ZpZWxkADxjb3VudHJ5PmtfX0JhY2tpbmdGaWVsZAA8bGF0aXR1ZGU+
a19fQmFja2luZ0ZpZWxkADxsb25naXR1ZGU+a19fQmFja2luZ0ZpZWxkADxjdXJyZW50UmlnSWQ+
a19fQmFja2luZ0ZpZWxkADx0aW1lWm9uZT5rX19CYWNraW5nRmllbGQAPGFjdGl2ZUluZD5rX19C
YWNraW5nRmllbGQAPHJvd0NyZWF0ZWRCeT5rX19CYWNraW5nRmllbGQAPHJvd0NoYW5nZWRCeT5r
X19CYWNraW5nRmllbGQAPHJvd0NyZWF0ZWREYXRlPmtfX0JhY2tpbmdGaWVsZAA8cm93Q2hhbmdl
ZERhdGU+a19fQmFja2luZ0ZpZWxkAHdlbGxJZAB3ZWxsTmFtZQB1d2kAY3VzdG9tZXJJZABqb2JO
dW0Ad2VsbE51bQBzcHVkRGF0ZQByaWdSZWxlYXNlRGF0ZQBwcm92aW5jZVN0YXRlAGNvdW50cnkA
bGF0aXR1ZGUAbG9uZ2l0dWRlAGN1cnJlbnRSaWdJZAB0aW1lWm9uZQBhY3RpdmVJbmQAcm93Q3Jl
YXRlZEJ5AHJvd0NoYW5nZWRCeQByb3dDcmVhdGVkRGF0ZQByb3dDaGFuZ2VkRGF0ZQB2YWx1ZQBz
ZXJ2ZXJOYW1lAGFwaUtleQBhY2Nlc3NLZXkAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBUYXJn
ZXRGcmFtZXdvcmtBdHRyaWJ1dGUAU3lzdGVtLlJlZmxlY3Rpb24AQXNzZW1ibHlUaXRsZUF0dHJp
YnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0
dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRl
AEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAEFz
c2VtYmx5Q3VsdHVyZUF0dHJpYnV0ZQBBc3NlbWJseVZlcnNpb25BdHRyaWJ1dGUAU3lzdGVtLlJ1
bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAFJ1
bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAFN5c3RlbS5EaWFnbm9zdGljcwBEZWJ1Z2dlck5v
blVzZXJDb2RlQXR0cmlidXRlAFR5cGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5k
bGUAQXNzZW1ibHkAZ2V0X0Fzc2VtYmx5AFN5c3RlbS5Db21wb25lbnRNb2RlbABFZGl0b3JCcm93
c2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlU3RhdGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRy
aWJ1dGUALmNjdG9yAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBTeXN0ZW0uU2Vj
dXJpdHkuQ3J5cHRvZ3JhcGh5Llg1MDlDZXJ0aWZpY2F0ZXMAWDUwOUNlcnRpZmljYXRlAFg1MDlD
aGFpbgBTeXN0ZW0uTmV0LlNlY3VyaXR5AFNzbFBvbGljeUVycm9ycwA8TWFpbj5iX18wAHBhcmFt
MABwYXJhbTEAcGFyYW0yAHBhcmFtMwBSZW1vdGVDZXJ0aWZpY2F0ZVZhbGlkYXRpb25DYWxsYmFj
awBDUyQ8PjlfX0NhY2hlZEFub255bW91c01ldGhvZERlbGVnYXRlMQBTeXN0ZW0uVGV4dABTdHJp
bmdCdWlsZGVyAFNjcmlwdE9iamVjdE1vZGVsAGdldF9EdHMATWljcm9zb2Z0LlNxbFNlcnZlci5N
YW5hZ2VkRFRTAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAVmFyaWFibGVzAGdldF9W
YXJpYWJsZXMAVmFyaWFibGUAZ2V0X0l0ZW0AZ2V0X1ZhbHVlAEludDMyAEFwcGVuZEZvcm1hdABT
dHJpbmcAQ2hhcgBTcGxpdABTeXN0ZW0uQ29yZQBTeXN0ZW0uTGlucQBFbnVtZXJhYmxlAFN5c3Rl
bS5Db2xsZWN0aW9ucy5HZW5lcmljAElFbnVtZXJhYmxlYDEATGFzdABTeXN0ZW0uTmV0AFNlcnZp
Y2VQb2ludE1hbmFnZXIAc2V0X1NlcnZlckNlcnRpZmljYXRlVmFsaWRhdGlvbkNhbGxiYWNrAFNl
Y3VyaXR5UHJvdG9jb2xUeXBlAHNldF9TZWN1cml0eVByb3RvY29sAGdldF9Ob3cAQXBwZW5kAEZv
cm1hdABSZXBsYWNlAFdlYlJlcXVlc3QAQ3JlYXRlAEh0dHBXZWJSZXF1ZXN0AFN5c3RlbS5XZWIu
SGVscGVycwBKc29uAEVuY29kZQBzZXRfTWV0aG9kAHNldF9Db250ZW50VHlwZQBnZXRfTGVuZ3Ro
AHNldF9Db250ZW50TGVuZ3RoAFN5c3RlbS5JTwBTdHJlYW0AR2V0UmVxdWVzdFN0cmVhbQBFbmNv
ZGluZwBnZXRfQVNDSUkAU3RyZWFtV3JpdGVyAFRleHRXcml0ZXIAV3JpdGUAQ2xvc2UAV2ViUmVz
cG9uc2UAR2V0UmVzcG9uc2UAR2V0UmVzcG9uc2VTdHJlYW0AU3RyZWFtUmVhZGVyAFRleHRSZWFk
ZXIAUmVhZFRvRW5kAEV4Y2VwdGlvbgBnZXRfTWVzc2FnZQBzZXRfVGFza1Jlc3VsdABFdmVudHNP
YmplY3RXcmFwcGVyAGdldF9FdmVudHMAVG9TdHJpbmcARW1wdHkARmlyZUluZm9ybWF0aW9uAEZp
cmVFcnJvcgBEZWNvZGUAU1RfMzAzYWM2Y2NlYjQ4NDNhMmFjYTM5MmZkODY4YjZmNGQuUHJvcGVy
dGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAAAAAHFTAFQAXwAzADAAMwBhAGMANgBjAGMAZQBiADQA
OAA0ADMAYQAyAGEAYwBhADMAOQAyAGYAZAA4ADYAOABiADYAZgA0AGQALgBQAHIAbwBwAGUAcgB0
AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAB9VAHMAZQByADoAOgBpAG4AdABXAGUAbABsAEkA
ZAAANUQAZQBsAGUAdABpAG4AZwAgAHcAZQBsAGwAIAB3AGkAdABoACAAaQBkACAAewAwAH0ALgAA
J1UAcwBlAHIAOgA6AHMAdAByAFMAZQByAHYAZQByAE4AYQBtAGUAAB9VAHMAZQByADoAOgBzAHQA
cgBBAHAAaQBLAGUAeQAAJVUAcwBlAHIAOgA6AHMAdAByAEEAYwBjAGUAcwBzAEsAZQB5AAAhUwB5
AHMAdABlAG0AOgA6AFUAcwBlAHIATgBhAG0AZQAAKSAARwBlAHQAdABpAG4AZwAgAGMAaABpAGwA
ZAAgAHcAZQBsAGwALgAAYSAAQwBoAGkAbABkACAAdwBlAGwAbAAgAG4AbwB0ACAAZgBvAHUAbgBk
ACAALQAgAHcAaQBsAGwAIABuAG8AdAAgAGEAdAB0AGUAbQBwAHQAIABkAGUAbABlAHQAZQAuAAFR
IABDAGgAaQBsAGQAIAB3AGUAbABsACAAZgBvAHUAbgBkACAALQAgAHcAaQBsAGwAIABhAHQAdABl
AG0AcAB0ACAAZABlAGwAZQB0AGUALgABY2gAdAB0AHAAcwA6AC8ALwB7ADAAfQAvAGEAcABpAC8A
dwBlAGwAbAAvAHsAMQB9AD8AYQBwAGkAawBlAHkAPQB7ADIAfQAmAGEAYwBjAGUAcwBzAGsAZQB5
AD0AewAzAH0AAAMgAAAHJQAyADAAAAMkAAAHJQAyADQAAA1EAEUATABFAFQARQAAIWEAcABwAGwA
aQBjAGEAdABpAG8AbgAvAGoAcwBvAG4AAGEgAEgAVABUAFAAIABwAHUAdAAgAGYAYQBpAGwAZQBk
ACAAdwBpAHQAaAAgAGUAeABjAGUAcAB0AGkAbwBuACAAewAwAH0ALgAgAFcAaQBsAGwAIAByAGUA
dAByAHkALgAAKSAAIABSAGUAdAB1AHIAbgBpAG4AZwAgAFMAdQBjAGMAZQBzAHMALgAAFUcAdQBt
AGIAbwAgAFMAUwBJAFMAADMgACAARQBuAGMAbwB1AG4AdABlAHIAZQBkACAAZQByAHIAbwByADoA
IAB7ADAAfQAuAAAAAAAK0OesexzeQIHV92nnlZsjAAi3elxWGTTgiQiJhF3NgIDMkQMGEhUDBhIZ
AyAAAQQAABIVBAAAEhkFAAEBEhkECAASFQQIABIZAwYSDAQAABIMBAgAEgwIIAQSGAgODg4CBggD
BhEUBAAAAAAEAQAAAAMgAAgEIAEBCAMgAA4EIAEBDgggABURHQERIQkgAQEVER0BESEDIAANBCAB
AQ0HIAAVER0BCAggAQEVER0BCAMgAAIEIAEBAgIGDgcGFREdAREhAgYNBgYVER0BCAIGAgMoAAgD
KAAOCCgAFREdAREhAygADQcoABURHQEIAygAAgYAARJZEV0EIAASYQYgAgEOEmEEBwESFQUgAQER
aQgBAAIAAAAAAAMAAAEKAAQCHBJ1EnkRfQQGEoCBBSAAEoCJBSAAEoCNBiABEoCRHAMgABwHIAIS
gIUOHAYgAR0OHQMMEAEBHgAVEoClAR4AAwoBDgUgAgEcGAYAAQESgIEGAAEBEYCtBAAAESEGIAES
gIUOBgACDg4dHAUgAg4ODgYAARKAsQ4IMb84Vq02TjUEAAEOHAQgAQEKBSAAEoC9BQAAEoDBCSAC
ARKAvRKAwQUgABKAzQYgAQESgL0FAAIODhwFIAASgN0KIAYBCA4ODggQAgggBQIIDg4OCCkHFBKA
hQIIDg4ODhIYCA4SgLUOEoDFEoDNEoC9EoDREoDZEoDZHQMdHAYQAQEeAA4ECgESGBYHCQ4SgLUS
gM0SgL0SgNEOEhgSGB0cSQEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC41AQBUDhRGcmFtZXdv
cmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29yayA0LjUoAQAjU1RfMzAzYWM2Y2NlYjQ4NDNhMmFj
YTM5MmZkODY4YjZmNGQAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAxOQAACAEACAAAAAAAHgEA
AQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQDoRwAAAAAAAAAAAAD+RwAAACAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAA8EcAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAAABgA
AIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYYAAAsAMA
AAAAAAAAAAAAsAM0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4AAAEA
AAABAA9gLhwAAAEAD2AuHD8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEAcgBG
AGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACwBBAD
AAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAOwCAAABADAAMAAwADAAMAA0AGIAMAAA
AHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQAXwAzADAAMwBhAGMA
NgBjAGMAZQBiADQAOAA0ADMAYQAyAGEAYwBhADMAOQAyAGYAZAA4ADYAOABiADYAZgA0AGQAAABA
AA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANwAyADEANAAuADIANAA1ADkA
MQAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwAzADAAMwBhAGMANgBj
AGMAZQBiADQAOAA0ADMAYQAyAGEAYwBhADMAOQAyAGYAZAA4ADYAOABiADYAZgA0AGQALgBkAGwA
bAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcAaAB0
ACAAQAAgACAAMgAwADEAOQAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUA
AABTAFQAXwAzADAAMwBhAGMANgBjAGMAZQBiADQAOAA0ADMAYQAyAGEAYwBhADMAOQAyAGYAZAA4
ADYAOABiADYAZgA0AGQALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAA
UwBUAF8AMwAwADMAYQBjADYAYwBjAGUAYgA0ADgANAAzAGEAMgBhAGMAYQAzADkAMgBmAGQAOAA2
ADgAYgA2AGYANABkAAAARAAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAA
LgA3ADIAMQA0AC4AMgA0ADUAOQAxAAAAAABIAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBz
AGkAbwBuAAAAMQAuADAALgA3ADIAMQA0AC4AMgA0ADUAOQAxAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAADAAAABA4AAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Well Loop\Connect Time Loop"
          DTS:CreationName="STOCK:FOREACHLOOP"
          DTS:Description="Foreach Loop Container"
          DTS:DTSID="{b5287836-a405-418d-b6b4-c529fed9ed1c}"
          DTS:ExecutableType="STOCK:FOREACHLOOP"
          DTS:LocaleID="-1"
          DTS:MaxErrorCount="6"
          DTS:ObjectName="Connect Time Loop">
          <DTS:ForEachEnumerator
            DTS:CreationName="Microsoft.SqlServer.Dts.Runtime.Enumerators.ADO.ForEachADOEnumerator, Microsoft.SqlServer.ForEachADOEnumerator, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
            DTS:DTSID="{ed64c369-7154-4a09-a124-eca5052161b5}"
            DTS:ObjectName="{4F357A1D-CA44-434A-8085-25C4D1BB103C}">
            <DTS:ObjectData>
              <FEEADO
                EnumType="EnumerateRowsInFirstTable"
                VarName="User::objConnectTimeList" />
            </DTS:ObjectData>
          </DTS:ForEachEnumerator>
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Well Loop\Connect Time Loop\C# Script to Call Data Gumbo Connect Time API"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Script Task"
              DTS:DTSID="{a534cf34-7f10-4982-98b3-6a4b34001d32}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="C# Script to Call Data Gumbo Connect Time API"
              DTS:ThreadHint="1">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:ObjectData>
                <ScriptProject
                  Name="ST_bd20eecdffa544b6b96cb2a89e6ebf31"
                  VSTAMajorVersion="3"
                  VSTAMinorVersion="0"
                  Language="CSharp"
                  ReadOnlyVariables="User::strBitDepthUomForConnectTimes,User::dblAvgReamCirculateConditionTime,User::dblAvgStoSConnectTime,User::dblAvgSurveyTime,User::dblAvgWtoWConnectTime,User::intFromDepth,User::intNumberOfConnections,User::intToDepth,User::intWellConnectTimeId,User::intWellIdForConnectTime,User::objDrillerNames,User::objFromDateTime,User::objRemarkForConnectTime,User::objToDateTime,User::strAccessKey,User::strActivityDescription,User::strApiKey,User::strConvertedTimeZone,User::strServerName,User::strSinglesOrStands,System::UserName">
                  <ProjectItem
                    Name="Properties\AssemblyInfo.cs"
                    Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_13d20bac687e44288104f2830a51da74")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_13d20bac687e44288104f2830a51da74")]
[assembly: AssemblyCopyright("Copyright @  2018")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Resources.resx"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
                  <ProjectItem
                    Name="ScriptMain.cs"
                    Encoding="UTF8"><![CDATA[using System.Net;
using System.IO;
using System.Text;
using System.Web;
using System.Web.Helpers;
using System.Linq;
using System.Text.RegularExpressions;

#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion


namespace ST_13d20bac687e44288104f2830a51da74
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            StringBuilder logMessage = new StringBuilder();
            bool fireAgain = false;
            int wellConnectTimeId = (int)Dts.Variables["User::intWellConnectTimeId"].Value;
            logMessage.AppendFormat("Processing well connect time with id {0}.", wellConnectTimeId); 
            int wellId = (int)Dts.Variables["User::intWellIdForConnectTime"].Value;

            DateTime? fromDateTime = GetDateTime("User::objFromDateTime", "User::strConvertedTimeZone");
            DateTime? toDateTime = GetDateTime("User::objToDateTime", "User::strConvertedTimeZone");
            
            double fromDepth = Convert.ToDouble(Dts.Variables["User::intFromDepth"].Value);
            double toDepth = Convert.ToDouble(Dts.Variables["User::intToDepth"].Value);
            string activityDescription = (String)Dts.Variables["User::strActivityDescription"].Value;
            string drillerNames = Dts.Variables["User::objDrillerNames"].Value.ToString();
            string singleOrStands = (String)Dts.Variables["User::strSinglesOrStands"].Value;
            int numberOfConnections = (int)Dts.Variables["User::intNumberOfConnections"].Value;
            double avgWtoWConnectTime = (double)Dts.Variables["User::dblAvgWtoWConnectTime"].Value;
            double avgStoSConnectTime = (double)Dts.Variables["User::dblAvgStoSConnectTime"].Value;
            double avgReamCirculateCondtionTime = (double)Dts.Variables["User::dblAvgReamCirculateConditionTime"].Value;
            double avgSurveyTime = (double)Dts.Variables["User::dblAvgSurveyTime"].Value;
            string remark = Dts.Variables["User::objRemarkForConnectTime"].Value.ToString();
            string bitDepthUomForConnectTimes = Dts.Variables["User::strBitDepthUomForConnectTimes"].Value.ToString();
            bool activeInd = true;

            string serverName = (String)Dts.Variables["User::strServerName"].Value;
            string apiKey = (String)Dts.Variables["User::strApiKey"].Value;
            string accessKey = (String)Dts.Variables["User::strAccessKey"].Value;
            string currentUserId = (String)Dts.Variables["System::UserName"].Value;

            if (currentUserId != null)
            {
                currentUserId = currentUserId.Split('\\').Last();
            }

            if (bitDepthUomForConnectTimes == "feet")
            {
                fromDepth *= 0.3048;
                toDepth *= 0.3048;
            }

            ServicePointManager.ServerCertificateValidationCallback = delegate { return true; };
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls | SecurityProtocolType.Ssl3;

            try
            {
                string url = string.Format("https://{0}/api/connectTime/{1}?apikey={2}&accesskey={3}", serverName, wellConnectTimeId, apiKey, accessKey);
                url = url.Replace(" ", "%20");
                url = url.Replace("$", "%24");

                DateTime now = DateTime.Now;
                ConnectTime existingConnectTime = GetExistingConnectTime(wellConnectTimeId, serverName, apiKey, accessKey);

                if (existingConnectTime == null)
                {
                    logMessage.Append(" Not found - will insert."); 
                    existingConnectTime = new ConnectTime();
                    existingConnectTime.connectTimeId = wellConnectTimeId;
                }
                else
                {
                    logMessage.Append(" Entity found - will check if update is required.");
                }

                if (existingConnectTime.Apply(wellId, fromDateTime, toDateTime, fromDepth, toDepth, activityDescription, drillerNames, singleOrStands, numberOfConnections, avgWtoWConnectTime, avgStoSConnectTime, avgReamCirculateCondtionTime, avgSurveyTime, remark, activeInd, currentUserId))
                {
                    int retries = 2;
                    while (retries > 0)
                    {
                        try
                        {
                            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                            logMessage.Append(" Attempting write to DataGumbo API.");
                            string gumboPayload = Json.Encode(existingConnectTime);

                            request.Method = "PUT";
                            request.ContentType = "application/json";
                            gumboPayload = EncodeNonAsciiCharacters(gumboPayload);
                            request.ContentLength = gumboPayload.Length;
                            StreamWriter requestWriter = new StreamWriter(request.GetRequestStream(), System.Text.Encoding.ASCII);
                            requestWriter.Write(gumboPayload);
                            requestWriter.Close();

                            WebResponse webResponse = request.GetResponse();
                            Stream webStream = webResponse.GetResponseStream();
                            StreamReader responseReader = new StreamReader(webStream);
                            string response = responseReader.ReadToEnd();
                            responseReader.Close();
                            retries = 0; // indicate success
                        }
                        catch (Exception e)
                        {
                            retries--;
                            if (retries > 0)
                            {
                                logMessage.Append(string.Format(" HTTP put failed with exception {0}. Will retry.", e.Message));
                            }
                            else
                            {
                                throw e;
                            }
                        }
                    }
                }
                else
                {
                    logMessage.Append(" No update required.");
                }
                Dts.TaskResult = (int)ScriptResults.Success;
                logMessage.Append("  Returning Success.");
                Dts.Events.FireInformation(0, "Gumbo SSIS", logMessage.ToString(), string.Empty, 0, ref fireAgain);
            }
            catch (Exception e)
            {
                logMessage.AppendFormat("  Encountered error: {0}.", e.Message);
                Dts.Events.FireError(0, "Gumbo SSIS", logMessage.ToString(), string.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        private ConnectTime GetExistingConnectTime(int tourSheetFormationId, string serverName, string apiKey, string accessKey)
        {
            try
            {
                string url = string.Format("https://{0}/api/connectTime/{1}?apikey={2}&accesskey={3}", serverName, tourSheetFormationId, apiKey, accessKey);
                url = url.Replace(" ", "%20");
                url = url.Replace("$", "%24");
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                WebResponse webResponse = request.GetResponse();
                Stream webStream = webResponse.GetResponseStream();
                StreamReader responseReader = new StreamReader(webStream);
                string response = responseReader.ReadToEnd();
                responseReader.Close();
                ConnectTime tourSheetFormation = Json.Decode<ConnectTime>(response);
                return tourSheetFormation;
            }
            catch (Exception e)
            {
                return null;
            }
        }

 
        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        #region data class
        class ConnectTime
        {
            public int connectTimeId { get; set; }
            public int wellId { get; set; }
            public DateTime? startDateTime { get; set; }
            public DateTime? endDateTime { get; set; }
            public double fromDepth { get; set; }
            public double toDepth { get; set; }
            public string activityDescription { get; set; }
            public string drillerNames { get; set; }
            public string singleOrStands { get; set; }
            public int numberOfConnections { get; set; }
            public double avgWtoWConnectTime { get; set; }
            public double avgStoSConnectTime { get; set; }
            public double avgReamCirculateConditionTime { get; set; }
            public double avgSurveyTime { get; set; }
            public string remark { get; set; }
            public bool activeInd { get; set; }
            public string rowCreatedBy { get; set; }
            public string rowChangedBy { get; set; }
            public DateTime? rowCreatedDate { get; set; }
            public DateTime? rowChangedDate { get; set; }

            public bool Apply(int _wellId, DateTime? _startDateTime, DateTime? _endDateTime, double _fromDepth, double _toDepth, 
                string _activityDescription, string _drillerNames, string _singleOrStands, int _numberOfConnections,
                double _avgWtoWConnectTime, double _avgStoSConnectTime, double _avgReamCirculateConditionTime, double _avgSurveyTime,
                string _remark, bool _activeInd, string currentUserId)
            {
                bool ret = false;
                if (rowCreatedBy == null)
                {
                    rowCreatedBy = currentUserId;
                    ret = true;
                }
                if (rowCreatedDate == null)
                {
                    rowCreatedDate = DateTime.Now;
                    ret = true;
                }
                if (wellId != _wellId)
                {
                    wellId = _wellId;
                    ret = true;
                }
                if (!DateCompare(startDateTime, _startDateTime))
                {
                    startDateTime = _startDateTime.HasValue ? _startDateTime.Value.ToUniversalTime() : (DateTime?)null;
                    ret = true;
                }
                if (!DateCompare(endDateTime, _endDateTime))
                {
                    endDateTime = _endDateTime.HasValue ? _endDateTime.Value.ToUniversalTime() : (DateTime?)null;
                    ret = true;
                }
                if (fromDepth != _fromDepth)
                {
                    fromDepth = _fromDepth;
                    ret = true;
                }
                if (toDepth != _toDepth)
                {
                    toDepth = _toDepth;
                    ret = true;
                }
                if (activityDescription != _activityDescription)
                {
                    activityDescription = _activityDescription;
                    ret = true;
                }
                if (drillerNames != _drillerNames)
                {
                    drillerNames = _drillerNames;
                    ret = true;
                }
                if (singleOrStands != _singleOrStands)
                {
                    singleOrStands = _singleOrStands;
                    ret = true;
                }
                if (numberOfConnections != _numberOfConnections)
                {
                    numberOfConnections = _numberOfConnections;
                    ret = true;
                }
                if (avgWtoWConnectTime != _avgWtoWConnectTime)
                {
                    avgWtoWConnectTime = _avgWtoWConnectTime;
                    ret = true;
                }
                if (avgStoSConnectTime != _avgStoSConnectTime)
                {
                    avgStoSConnectTime = _avgStoSConnectTime;
                    ret = true;
                }
                if (avgReamCirculateConditionTime != _avgReamCirculateConditionTime)
                {
                    avgReamCirculateConditionTime = _avgReamCirculateConditionTime;
                    ret = true;
                }
                if (avgSurveyTime != _avgSurveyTime)
                {
                    avgSurveyTime = _avgSurveyTime;
                    ret = true;
                }
                if (remark != _remark)
                {
                    remark = _remark;
                    ret = true;
                }
 
                if (activeInd != _activeInd)
                {
                    activeInd = _activeInd;
                    ret = true;
                }
                if (ret)
                {
                    startDateTime = _startDateTime.HasValue ? _startDateTime.Value.ToUniversalTime() : (DateTime?)null;
                    endDateTime = _endDateTime.HasValue ? _endDateTime.Value.ToUniversalTime() : (DateTime?)null;
                    rowChangedBy = currentUserId;
                    rowChangedDate = DateTime.Now;
                }
                return ret;
            }
        }
        #endregion

        #region DateTimeConversion
        private static bool DateCompare(DateTime? dtm1, DateTime? dtm2)
        {
            if (dtm1.HasValue)
            {
                if (dtm2.HasValue)
                {
                    DateTime d1 = dtm1.Value;
                    DateTime d2 = dtm2.Value;
                    return d1 == d2;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                return !dtm2.HasValue;
            }
        }

        public DateTime? GetDateTime(string dateTimeVariableName, string timezoneVariableName)
        {
            Object dtmOValue = Dts.Variables[dateTimeVariableName].Value;
            if (dtmOValue == null)
            {
                return null;
            }
            String dtmSValue = dtmOValue.ToString();

            if (string.IsNullOrEmpty(dtmSValue))
            {
                return null;
            }

            DateTime convertedValue = Convert.ToDateTime(dtmSValue);

            if (convertedValue.Kind == DateTimeKind.Unspecified)
            {
                TimeZoneInfo tzInfo = TimeZoneInfo.FindSystemTimeZoneById((String)Dts.Variables[timezoneVariableName].Value);
                TimeSpan offset = tzInfo.GetUtcOffset(convertedValue);
                DateTime afterAdjustment = convertedValue.Subtract(offset);
                return new DateTime(afterAdjustment.Year, afterAdjustment.Month, afterAdjustment.Day, afterAdjustment.Hour, afterAdjustment.Minute, afterAdjustment.Second, DateTimeKind.Utc);
            }
            else
            {
                return convertedValue;
            }
        }

        #endregion


        public static string EncodeNonAsciiCharacters(string value)
        {
            return Regex.Replace(value, @"[^\x00-\x7F]", c => string.Format(@"\u{0:x4}", (int)c.Value[0]));
        }
    }
}]]></ProjectItem>
                  <ProjectItem
                    Name="ST_bd20eecdffa544b6b96cb2a89e6ebf31.csproj"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{1BE7D76D-5D0E-4185-A6F9-E4B855F2C7B4}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_13d20bac687e44288104f2830a51da74</RootNamespace>
    <AssemblyName>ST_bd20eecdffa544b6b96cb2a89e6ebf31</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Web.Helpers, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
      <DesignTime>True</DesignTime>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\10.0\InstallDir#\devenv.exe" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
                  <ProjectItem
                    Name="Project"
                    Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_13d20bac687e44288104f2830a51da74</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_13d20bac687e44288104f2830a51da74</msb:DisplayName>
		<msb:ProjectId>{368D564C-355B-450F-A328-A209AFAA07DC}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_bd20eecdffa544b6b96cb2a89e6ebf31.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_13d20bac687e44288104f2830a51da74.Properties.Settings.get_Default():ST_13d20bac687e44288104f2830a51da74.Properties.Sett" +
    "ings")]

namespace ST_13d20bac687e44288104f2830a51da74.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.settings"
                    Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Resources.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_13d20bac687e44288104f2830a51da74.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_13d20bac687e44288104f2830a51da74.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_13d20bac687e44288104f2830a51da74.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_13d20bac687e44288104f2830a51da74.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_13d20bac687e44288104f2830a51da74.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
                  <BinaryItem
                    Name="ST_bd20eecdffa544b6b96cb2a89e6ebf31.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAG4jLl0AAAAAAAAAAOAAAiELAQsAADoAAAAIAAAAAAAAvlkA
AAAgAAAAYAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACgAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAGRZAABXAAAAAGAAAAgEAAAAAAAAAAAAAAAAAAAA
AAAAAIAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAxDkAAAAgAAAAOgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAAgEAAAAYAAAAAYAAAA8AAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAIAAAAACAAAAQgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAACg
WQAAAAAAAEgAAAACAAUAyCwAAJwsAAABAAAAAAAAABAsAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKA4AAAoqEzACAC0AAAABAAARfgEAAAQtIHIBAABw0AIA
AAIoDwAACm8QAAAKcxEAAAoKBoABAAAEfgEAAAQqGn4CAAAEKh4CgAIAAAQqGn4DAAAEKi5zBgAA
BoADAAAEKh4CKBQAAAoqChcqAAAbMBEAQgUAAAIAABFzFgAACgoWCwIoFwAACm8YAAAKcnMAAHBv
GQAACm8aAAAKpSUAAAEMBnKpAABwCIwlAAABbxsAAAomAigXAAAKbxgAAApy/QAAcG8ZAAAKbxoA
AAqlJQAAAQ0CcjkBAHByZQEAcCgLAAAGEwQCcpsBAHByZQEAcCgLAAAGEwUCKBcAAApvGAAACnLD
AQBwbxkAAApvGgAACigcAAAKEwYCKBcAAApvGAAACnLpAQBwbxkAAApvGgAACigcAAAKEwcCKBcA
AApvGAAACnILAgBwbxkAAApvGgAACnQnAAABEwgCKBcAAApvGAAACnJFAgBwbxkAAApvGgAACm8d
AAAKEwkCKBcAAApvGAAACnJxAgBwbxkAAApvGgAACnQnAAABEwoCKBcAAApvGAAACnKjAgBwbxkA
AApvGgAACqUlAAABEwsCKBcAAApvGAAACnLdAgBwbxkAAApvGgAACqUoAAABEwwCKBcAAApvGAAA
CnIVAwBwbxkAAApvGgAACqUoAAABEw0CKBcAAApvGAAACnJNAwBwbxkAAApvGgAACqUoAAABEw4C
KBcAAApvGAAACnKbAwBwbxkAAApvGgAACqUoAAABEw8CKBcAAApvGAAACnLJAwBwbxkAAApvGgAA
Cm8dAAAKExACKBcAAApvGAAACnIFBABwbxkAAApvGgAACm8dAAAKExEXExICKBcAAApvGAAACnJN
BABwbxkAAApvGgAACnQnAAABExMCKBcAAApvGAAACnJ1BABwbxkAAApvGgAACnQnAAABExQCKBcA
AApvGAAACnKVBABwbxkAAApvGgAACnQnAAABExUCKBcAAApvGAAACnK7BABwbxkAAApvGgAACnQn
AAABExYRFiweERYXjSkAAAETIhEiFh9cnREibx4AAAooAQAAKxMWERFy3QQAcCggAAAKLBwRBiP9
h/Tb14HTP1oTBhEHI/2H9NvXgdM/WhMHfgQAAAQtERT+Bg4AAAZzIQAACoAEAAAEfgQAAAQoIgAA
CiDwDAAAKCMAAApy5wQAcBqNAQAAARMjESMWEROiESMXCIwlAAABohEjGBEUohEjGREVohEjKCQA
AAoTFxEXclkFAHByXQUAcG8lAAAKExcRF3JlBQBwcmkFAHBvJQAAChMXKCYAAAomAggRExEUERUo
CQAABhMYERgtHQZycQUAcG8nAAAKJnM5AAAGExgRGAhvEQAABisMBnKlBQBwbycAAAomERgJEQQR
BREGEQcRCBEJEQoRCxEMEQ0RDhEPERAREhEWbzgAAAY54wAAABgTGTjRAAAAERcoKAAACnQvAAAB
ExoGcgkGAHBvJwAACiYRGCgpAAAKExsRGnJRBgBwbyoAAAoRGnJZBgBwbysAAAoRGygMAAAGExsR
GhEbbywAAApqby0AAAoRGm8uAAAKKC8AAApzMAAAChMcERwRG28xAAAKERxvMgAAChEabzMAAAoT
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
LCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRv
a2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQC
AAAAAAAAAAAAAABQQURQQURQtAAAAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAA
AIQNAAAjfgAA8A0AABQTAAAjU3RyaW5ncwAAAAAEIQAAqAcAACNVUwCsKAAAEAAAACNHVUlEAAAA
vCgAAOADAAAjQmxvYgAAAAAAAAACAAABVx2iCQkLAAAA+iUzABYAAAEAAABAAAAABgAAABwAAAA5
AAAAMwAAAFcAAAACAAAATwAAAAYAAAADAAAAFwAAACwAAAABAAAAAQAAAAYAAAABAAAAAgAAAAIA
AAAAAAoAAQAAAAAABgDNAMYACgDpANQADgBJASABBgBlAcYABgB7AWoBBgCsAZcBBgBCAsYABgBN
AsYABgCVCnsKBgDACq4KBgDXCq4KBgD0Cq4KBgATC64KBgAsC64KBgBFC64KBgBgC64KBgB7C64K
BgCUC64KBgDNC60LBgDtC60LBgBCDC8MBgBfDMYABgBkDMYABgCIDK4KCgC0DJ4MCgDNDJ4MBgDi
DK0LDgAEDSABBgBUDSYNCgBkDSYNCgCCDW4NCgC5DW4NBgAQDgQODgAeDiABEgB3DlcOEgCPDlcO
BgCrDsYABgC+DsYABgDPDsYABgDfDsYABgDmDsYAFgAJD/0OBgAvDxQPCgBZD04PCgCVD04PCgDd
D04PCgDvD04PGgAREP4PBgBfEFUQBgB3EAQOBgCKEFUQBgCXEFUQCgCuEE4PBgDYEFUQBgDlEFUQ
BgD6EMYADgAfESABBgCLEcYABgChEcYABgDFEcYACgA9Eh4SCgBkEh4SCgCaEh4SCgCsEh4SAAAA
AAEAAAAAAAEAAQAAABAAMgA8AAUAAQABAAABEABrADwACQADAAUAAQAQAHQAfwANAAQACAADAQAA
owAAABEABgAQAAMAEACxAAAABQAJABAAEQCLARMAEQC4ARcAEQACAjkAEQDdDTYBEQBzEuYCBgaH
AnAAVoCPAnMAVoCXAnMAAQCFBXAAAQCkBXAAAQC8BdYAAQDbBdYAAQD4Bd4AAQATBt4AAQAsBuEA
AQBRBuEAAQBvBuEAAQCPBnAAAQC0Bt4AAQDYBt4AAQD8Bt4AAQArB94AAQBKB+EAAQBiB+QAAQB9
B+EAAQCbB+EAAQC5B9YAAQDZB9YAUCAAAAAAgxjIARsAAQBYIAAAAACTCM4BHwABAJEgAAAAAJMI
4gEkAAEAmCAAAAAAkwjuASkAAQCgIAAAAACWCBICPQACALMgAAAAAIYYyAEbAAIApyAAAAAAkRj9
DCcBAgDAIAAAAACGACYCGwACAEQmAAAAAIEAKwJHAAIA/CYAAAAAkQBWAlAABgBAJwAAAACGAGIC
YAAIACooAAAAAJYAbgJrAAoAVCgAAAAAhhjIARsACwC7IAAAAACRAJINKwELAA0oAAAAAJEAQxLf
Ag8AXCgAAAAAhgifAoEAEABkKAAAAACGCLEChQAQAG0oAAAAAIYIwwKBABEAdSgAAAAAhgjOAoUA
EQB+KAAAAACGCNkCigASAIYoAAAAAIYI6wKTABIAjygAAAAAhgj9AooAEwCXKAAAAACGCA0DkwAT
AKAoAAAAAIYIHQOdABQAqCgAAAAAhggrA6EAFACxKAAAAACGCDkDnQAVALkoAAAAAIYIRQOhABUA
wigAAAAAhghRA6YAFgDKKAAAAACGCGkDqgAWANMoAAAAAIYIgQOmABcA2ygAAAAAhgiSA6oAFwDk
KAAAAACGCKMDpgAYAOwoAAAAAIYItgOqABgA9SgAAAAAhgjJA4EAGQD9KAAAAACGCOEDhQAZAAYp
AAAAAIYI+QOdABoADikAAAAAhggQBKEAGgAXKQAAAACGCCcEnQAbAB8pAAAAAIYIPgShABsAKCkA
AAAAhghVBJ0AHAAwKQAAAACGCHcEoQAcADkpAAAAAIYImQSdAB0AQSkAAAAAhgirBKEAHQBKKQAA
AACGCL0EpgAeAFIpAAAAAIYIyASqAB4AWykAAAAAhgjTBK8AHwBjKQAAAACGCOEEswAfAGwpAAAA
AIYI7wSmACAAdCkAAAAAhggABaoAIAB9KQAAAACGCBEFpgAhAIUpAAAAAIYIIgWqACEAjikAAAAA
hggzBYoAIgCWKQAAAACGCEYFkwAiAJ8pAAAAAIYIWQWKACMApykAAAAAhghsBZMAIwCwKQAAAACG
AH8FuAAkAAMsAAAAAIYYyAEbADQAAAABABkJAAABAB8JAAACADQJAAADAD8JAAAEAEYJAAABAFAJ
AAACAFUJAAABAFoJAAACAG8JAAABABkJAAABAJ0NAAACAKQNAAADAKsNAAAEALINAAABAGISAAAB
ABkJAAABABkJAAABABkJAAABABkJAAABABkJAAABABkJAAABABkJAAABABkJAAABABkJAAABABkJ
AAABABkJAAABABkJAAABABkJAAABABkJAAABABkJAAABABkJAAABABkJAAABABkJAAABABkJAAAB
ABkJAAABAIQJAAACAIwJAAADAJsJAAAEAKgJAAAFALMJAAAGALwJAAAHANEJAAAIAN8JAAAJAO8J
AAAKAAQKAAALABgKAAAMACwKAAANAEsKAAAOAFoKAAAPAGIKAAAQAG0KSQDIAaoAUQDIAaoAWQDI
AaoAYQDIAaoAaQDIAaoAcQDIAaoAeQDIAaoAgQDIAaoAiQDIAaoAkQDIAaoAmQDIAYUAoQDIARsA
qQDIARsACQDIARsAsQB2DAABsQCRDAcBKQDIAQwByQDIARgB2QDIARsAEQDIARsA4QDIARsACQHI
ARsAGQAwDjsBEQGBDkEBGQGYDkcBIQGhDk4BCQGxDlIBMQHGDloBCQDWDqYAOQHrDl8BUQE9D2YB
OQFCD3cBAQHIAX0BYQFtD4MBYQGqD4oBOQG/D5EBOQHGD5gBQQDOD54BCQHWD6MBcQHoD6oBgQEW
ELoBcQEdEKoAcQEoEKoAOQE4EIEAcQFDEL8BcQFmEMQBkQGAEMoBmQHIAdABoQGiEKoAoQGoEBsA
cQG6ENoBqQHGEMQBsQHIAeABuQHwEKYAuQGoEBsAwQEEEaYAOQG/D+cBEQEQEYUAEQEzEe0BOQE+
EeEAyQFEEfMByQFUEf4BgQFeEUsCDABlEa8ADAChDnUCQQBCD3oCOQFyEYkCMQGAEY4CQQCYEZQC
2QGuEZoC2QHOEaECQQDbEakCQQDkEYEAQQDtEYEAQQD3EYEAQQD/EYEAQQAIEoEAQQATEoEAQQDI
AbECDADIAb4C+QGhDqYAOQGiEusC8QHIAX0BAQLGD/ACGQDIARsAQQCyEvkCOQHCEncBCAAcAHcA
CAAgAHwAKQCTAB4BLgAzAHIDLgBDAJsDLgAjAJsDLgA7AKEDLgBbALgDLgBjAMEDLgArAJsDLgAL
ACgDLgATAHIDLgAbAJsDQwBrAHwASQCTAB4BYQCbAHwAgQCbAHwAgwCrAHwAoQCbAHwAIQGbAHwA
QQGbAHwAYQGbAHwAgQGbAHwAoQGbAHwAwAGbAHwAwQGbAHwA4AGbAHwA4QGbAHwAAAKbAHwAAQKb
AHwAIAKbAHwAIQKbAHwAQAKbAHwAQQKbAHwAYAKbAHwAYQKbAHwAgAKbAHwAgQKbAHwAoAKbAHwA
oQKbAHwAwAKbAHwAwQKbAHwA4AKbAHwA4QKbAHwAAAObAHwAAQObAHwAIAObAHwAIQObAHwAQAOb
AHwAQQObAHwAYAObAHwAYQObAHwAgAObAHwAgQObAHwAoAObAHwAwAObAHwA4AObAHwAAASbAHwA
IASbAHwAQASbAHwAYASbAHwAgASbAHwAoASbAHwAwASbAHwA4ASbAHwAAAWbAHwAIAWbAHwAQAWb
AHwAYAWbAHwAgAWbAHwAoAWbAHwAwAWbAHwA4AWbAHwAAAabAHwAIAabAHwAQAabAHwAYAabAHwA
gAabAHwAoAabAHwAwAabAHwA4AabAHwAEwEHAlcCggLEAv4CAgABAAMAAwAGAAQAAAB7AS8AAAD6
ATQAAAAeAkIAAAD5B+cAAAAHCOcAAAAOCOsAAAAcCOsAAAAoCPQAAAAyCPQAAAA6CPgAAABOCPgA
AABbCPgAAABqCOcAAAB+CPQAAACRCPQAAACkCPQAAADCCPQAAADQCPgAAADXCPwAAADhCPgAAADu
CPgAAAD7COsAAAAKCesAAgACAAMAAgADAAUAAQAEAAUAAgAFAAcAAgAQAAkAAQARAAkAAgASAAsA
AQATAAsAAQAVAA0AAgAUAA0AAQAXAA8AAgAWAA8AAgAYABEAAQAZABEAAgAaABMAAQAbABMAAQAd
ABUAAgAcABUAAgAeABcAAQAfABcAAQAhABkAAgAgABkAAQAjABsAAgAiABsAAgAkAB0AAQAlAB0A
AgAmAB8AAQAnAB8AAQApACEAAgAoACEAAgAqACMAAQArACMAAgAsACUAAQAtACUAAQAvACcAAgAu
ACcAAgAwACkAAQAxACkAAgAyACsAAQAzACsAAQA1AC0AAgA0AC0AAgA2AC8AAQA3AC8AbgIEgAAA
AQAAAOAbv1YAAAAAAAALDAAABAAAAAAAAAAAAAAAAQC9AAAAAAAEAAAAAAAAAAAAAAABAMYAAAAA
AAsAAAAAAAAAAAAAAAoAAQEAAAAACwAAAAAAAAAAAAAACgA4DgAAAAAEAAAAAAAAAAAAAAABAPEO
AAAAAAEAAAAAAAAAAAAAALEB/g8AAAAAAAAAAAEAAADQEgAABQAEAAYABAA/AHMBfwBSAgAAAAAA
PE1vZHVsZT4AU1RfYmQyMGVlY2RmZmE1NDRiNmI5NmNiMmE4OWU2ZWJmMzEuZGxsAFJlc291cmNl
cwBTVF8xM2QyMGJhYzY4N2U0NDI4ODEwNGYyODMwYTUxZGE3NC5Qcm9wZXJ0aWVzAFNldHRpbmdz
AFNjcmlwdE1haW4AU1RfMTNkMjBiYWM2ODdlNDQyODgxMDRmMjgzMGE1MWRhNzQAU2NyaXB0UmVz
dWx0cwBDb25uZWN0VGltZQBtc2NvcmxpYgBTeXN0ZW0AT2JqZWN0AFN5c3RlbS5Db25maWd1cmF0
aW9uAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFz
awBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAFZTVEFSVFNjcmlwdE9i
amVjdE1vZGVsQmFzZQBFbnVtAFN5c3RlbS5SZXNvdXJjZXMAUmVzb3VyY2VNYW5hZ2VyAHJlc291
cmNlTWFuAFN5c3RlbS5HbG9iYWxpemF0aW9uAEN1bHR1cmVJbmZvAHJlc291cmNlQ3VsdHVyZQAu
Y3RvcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAEN1bHR1cmUA
ZGVmYXVsdEluc3RhbmNlAGdldF9EZWZhdWx0AERlZmF1bHQATWFpbgBHZXRFeGlzdGluZ0Nvbm5l
Y3RUaW1lAE51bGxhYmxlYDEARGF0ZVRpbWUARGF0ZUNvbXBhcmUAR2V0RGF0ZVRpbWUARW5jb2Rl
Tm9uQXNjaWlDaGFyYWN0ZXJzAHZhbHVlX18AU3VjY2VzcwBGYWlsdXJlAGdldF9jb25uZWN0VGlt
ZUlkAHNldF9jb25uZWN0VGltZUlkAGdldF93ZWxsSWQAc2V0X3dlbGxJZABnZXRfc3RhcnREYXRl
VGltZQBzZXRfc3RhcnREYXRlVGltZQBnZXRfZW5kRGF0ZVRpbWUAc2V0X2VuZERhdGVUaW1lAGdl
dF9mcm9tRGVwdGgAc2V0X2Zyb21EZXB0aABnZXRfdG9EZXB0aABzZXRfdG9EZXB0aABnZXRfYWN0
aXZpdHlEZXNjcmlwdGlvbgBzZXRfYWN0aXZpdHlEZXNjcmlwdGlvbgBnZXRfZHJpbGxlck5hbWVz
AHNldF9kcmlsbGVyTmFtZXMAZ2V0X3NpbmdsZU9yU3RhbmRzAHNldF9zaW5nbGVPclN0YW5kcwBn
ZXRfbnVtYmVyT2ZDb25uZWN0aW9ucwBzZXRfbnVtYmVyT2ZDb25uZWN0aW9ucwBnZXRfYXZnV3Rv
V0Nvbm5lY3RUaW1lAHNldF9hdmdXdG9XQ29ubmVjdFRpbWUAZ2V0X2F2Z1N0b1NDb25uZWN0VGlt
ZQBzZXRfYXZnU3RvU0Nvbm5lY3RUaW1lAGdldF9hdmdSZWFtQ2lyY3VsYXRlQ29uZGl0aW9uVGlt
ZQBzZXRfYXZnUmVhbUNpcmN1bGF0ZUNvbmRpdGlvblRpbWUAZ2V0X2F2Z1N1cnZleVRpbWUAc2V0
X2F2Z1N1cnZleVRpbWUAZ2V0X3JlbWFyawBzZXRfcmVtYXJrAGdldF9hY3RpdmVJbmQAc2V0X2Fj
dGl2ZUluZABnZXRfcm93Q3JlYXRlZEJ5AHNldF9yb3dDcmVhdGVkQnkAZ2V0X3Jvd0NoYW5nZWRC
eQBzZXRfcm93Q2hhbmdlZEJ5AGdldF9yb3dDcmVhdGVkRGF0ZQBzZXRfcm93Q3JlYXRlZERhdGUA
Z2V0X3Jvd0NoYW5nZWREYXRlAHNldF9yb3dDaGFuZ2VkRGF0ZQBBcHBseQA8Y29ubmVjdFRpbWVJ
ZD5rX19CYWNraW5nRmllbGQAPHdlbGxJZD5rX19CYWNraW5nRmllbGQAPHN0YXJ0RGF0ZVRpbWU+
a19fQmFja2luZ0ZpZWxkADxlbmREYXRlVGltZT5rX19CYWNraW5nRmllbGQAPGZyb21EZXB0aD5r
X19CYWNraW5nRmllbGQAPHRvRGVwdGg+a19fQmFja2luZ0ZpZWxkADxhY3Rpdml0eURlc2NyaXB0
aW9uPmtfX0JhY2tpbmdGaWVsZAA8ZHJpbGxlck5hbWVzPmtfX0JhY2tpbmdGaWVsZAA8c2luZ2xl
T3JTdGFuZHM+a19fQmFja2luZ0ZpZWxkADxudW1iZXJPZkNvbm5lY3Rpb25zPmtfX0JhY2tpbmdG
aWVsZAA8YXZnV3RvV0Nvbm5lY3RUaW1lPmtfX0JhY2tpbmdGaWVsZAA8YXZnU3RvU0Nvbm5lY3RU
aW1lPmtfX0JhY2tpbmdGaWVsZAA8YXZnUmVhbUNpcmN1bGF0ZUNvbmRpdGlvblRpbWU+a19fQmFj
a2luZ0ZpZWxkADxhdmdTdXJ2ZXlUaW1lPmtfX0JhY2tpbmdGaWVsZAA8cmVtYXJrPmtfX0JhY2tp
bmdGaWVsZAA8YWN0aXZlSW5kPmtfX0JhY2tpbmdGaWVsZAA8cm93Q3JlYXRlZEJ5PmtfX0JhY2tp
bmdGaWVsZAA8cm93Q2hhbmdlZEJ5PmtfX0JhY2tpbmdGaWVsZAA8cm93Q3JlYXRlZERhdGU+a19f
QmFja2luZ0ZpZWxkADxyb3dDaGFuZ2VkRGF0ZT5rX19CYWNraW5nRmllbGQAY29ubmVjdFRpbWVJ
ZAB3ZWxsSWQAc3RhcnREYXRlVGltZQBlbmREYXRlVGltZQBmcm9tRGVwdGgAdG9EZXB0aABhY3Rp
dml0eURlc2NyaXB0aW9uAGRyaWxsZXJOYW1lcwBzaW5nbGVPclN0YW5kcwBudW1iZXJPZkNvbm5l
Y3Rpb25zAGF2Z1d0b1dDb25uZWN0VGltZQBhdmdTdG9TQ29ubmVjdFRpbWUAYXZnUmVhbUNpcmN1
bGF0ZUNvbmRpdGlvblRpbWUAYXZnU3VydmV5VGltZQByZW1hcmsAYWN0aXZlSW5kAHJvd0NyZWF0
ZWRCeQByb3dDaGFuZ2VkQnkAcm93Q3JlYXRlZERhdGUAcm93Q2hhbmdlZERhdGUAdmFsdWUAdG91
clNoZWV0Rm9ybWF0aW9uSWQAc2VydmVyTmFtZQBhcGlLZXkAYWNjZXNzS2V5AGR0bTEAZHRtMgBk
YXRlVGltZVZhcmlhYmxlTmFtZQB0aW1lem9uZVZhcmlhYmxlTmFtZQBfd2VsbElkAF9zdGFydERh
dGVUaW1lAF9lbmREYXRlVGltZQBfZnJvbURlcHRoAF90b0RlcHRoAF9hY3Rpdml0eURlc2NyaXB0
aW9uAF9kcmlsbGVyTmFtZXMAX3NpbmdsZU9yU3RhbmRzAF9udW1iZXJPZkNvbm5lY3Rpb25zAF9h
dmdXdG9XQ29ubmVjdFRpbWUAX2F2Z1N0b1NDb25uZWN0VGltZQBfYXZnUmVhbUNpcmN1bGF0ZUNv
bmRpdGlvblRpbWUAX2F2Z1N1cnZleVRpbWUAX3JlbWFyawBfYWN0aXZlSW5kAGN1cnJlbnRVc2Vy
SWQAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1dGUAU3lz
dGVtLlJlZmxlY3Rpb24AQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9u
QXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlB
dHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmli
dXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAEFzc2VtYmx5Q3VsdHVyZUF0dHJpYnV0ZQBB
c3NlbWJseVZlcnNpb25BdHRyaWJ1dGUAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBD
b21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmli
dXRlAFNUX2JkMjBlZWNkZmZhNTQ0YjZiOTZjYjJhODllNmViZjMxAFN5c3RlbS5EaWFnbm9zdGlj
cwBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAFR5cGUAUnVudGltZVR5cGVIYW5kbGUAR2V0
VHlwZUZyb21IYW5kbGUAQXNzZW1ibHkAZ2V0X0Fzc2VtYmx5AFN5c3RlbS5Db21wb25lbnRNb2Rl
bABFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlU3RhdGUAQ29tcGlsZXJH
ZW5lcmF0ZWRBdHRyaWJ1dGUALmNjdG9yAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0
ZQBTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5Llg1MDlDZXJ0aWZpY2F0ZXMAWDUwOUNlcnRp
ZmljYXRlAFg1MDlDaGFpbgBTeXN0ZW0uTmV0LlNlY3VyaXR5AFNzbFBvbGljeUVycm9ycwA8TWFp
bj5iX18wAHBhcmFtMABwYXJhbTEAcGFyYW0yAHBhcmFtMwBSZW1vdGVDZXJ0aWZpY2F0ZVZhbGlk
YXRpb25DYWxsYmFjawBDUyQ8PjlfX0NhY2hlZEFub255bW91c01ldGhvZERlbGVnYXRlMQBTeXN0
ZW0uVGV4dABTdHJpbmdCdWlsZGVyAFNjcmlwdE9iamVjdE1vZGVsAGdldF9EdHMATWljcm9zb2Z0
LlNxbFNlcnZlci5NYW5hZ2VkRFRTAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAVmFy
aWFibGVzAGdldF9WYXJpYWJsZXMAVmFyaWFibGUAZ2V0X0l0ZW0AZ2V0X1ZhbHVlAEludDMyAEFw
cGVuZEZvcm1hdABDb252ZXJ0AFRvRG91YmxlAFN0cmluZwBUb1N0cmluZwBEb3VibGUAQ2hhcgBT
cGxpdABTeXN0ZW0uQ29yZQBTeXN0ZW0uTGlucQBFbnVtZXJhYmxlAFN5c3RlbS5Db2xsZWN0aW9u
cy5HZW5lcmljAElFbnVtZXJhYmxlYDEATGFzdABvcF9FcXVhbGl0eQBTeXN0ZW0uTmV0AFNlcnZp
Y2VQb2ludE1hbmFnZXIAc2V0X1NlcnZlckNlcnRpZmljYXRlVmFsaWRhdGlvbkNhbGxiYWNrAFNl
Y3VyaXR5UHJvdG9jb2xUeXBlAHNldF9TZWN1cml0eVByb3RvY29sAEZvcm1hdABSZXBsYWNlAGdl
dF9Ob3cAQXBwZW5kAFdlYlJlcXVlc3QAQ3JlYXRlAEh0dHBXZWJSZXF1ZXN0AFN5c3RlbS5XZWIu
SGVscGVycwBKc29uAEVuY29kZQBzZXRfTWV0aG9kAHNldF9Db250ZW50VHlwZQBnZXRfTGVuZ3Ro
AHNldF9Db250ZW50TGVuZ3RoAFN5c3RlbS5JTwBTdHJlYW0AR2V0UmVxdWVzdFN0cmVhbQBFbmNv
ZGluZwBnZXRfQVNDSUkAU3RyZWFtV3JpdGVyAFRleHRXcml0ZXIAV3JpdGUAQ2xvc2UAV2ViUmVz
cG9uc2UAR2V0UmVzcG9uc2UAR2V0UmVzcG9uc2VTdHJlYW0AU3RyZWFtUmVhZGVyAFRleHRSZWFk
ZXIAUmVhZFRvRW5kAEV4Y2VwdGlvbgBnZXRfTWVzc2FnZQBzZXRfVGFza1Jlc3VsdABFdmVudHNP
YmplY3RXcmFwcGVyAGdldF9FdmVudHMARW1wdHkARmlyZUluZm9ybWF0aW9uAEZpcmVFcnJvcgBE
ZWNvZGUAZ2V0X0hhc1ZhbHVlAElzTnVsbE9yRW1wdHkAVG9EYXRlVGltZQBEYXRlVGltZUtpbmQA
Z2V0X0tpbmQAVGltZVpvbmVJbmZvAEZpbmRTeXN0ZW1UaW1lWm9uZUJ5SWQAVGltZVNwYW4AR2V0
VXRjT2Zmc2V0AFN1YnRyYWN0AGdldF9ZZWFyAGdldF9Nb250aABnZXRfRGF5AGdldF9Ib3VyAGdl
dF9NaW51dGUAZ2V0X1NlY29uZABTeXN0ZW0uVGV4dC5SZWd1bGFyRXhwcmVzc2lvbnMATWF0Y2gA
PEVuY29kZU5vbkFzY2lpQ2hhcmFjdGVycz5iX18yAGMATWF0Y2hFdmFsdWF0b3IAQ1MkPD45X19D
YWNoZWRBbm9ueW1vdXNNZXRob2REZWxlZ2F0ZTMAQ2FwdHVyZQBnZXRfQ2hhcnMAUmVnZXgAVG9V
bml2ZXJzYWxUaW1lAG9wX0luZXF1YWxpdHkAU1RfMTNkMjBiYWM2ODdlNDQyODgxMDRmMjgzMGE1
MWRhNzQuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAAAAcVMAVABfADEAMwBkADIAMABi
AGEAYwA2ADgANwBlADQANAAyADgAOAAxADAANABmADIAOAAzADAAYQA1ADEAZABhADcANAAuAFAA
cgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAANVUAcwBlAHIAOgA6AGkAbgB0
AFcAZQBsAGwAQwBvAG4AbgBlAGMAdABUAGkAbQBlAEkAZAAAU1AAcgBvAGMAZQBzAHMAaQBuAGcA
IAB3AGUAbABsACAAYwBvAG4AbgBlAGMAdAAgAHQAaQBtAGUAIAB3AGkAdABoACAAaQBkACAAewAw
AH0ALgAAO1UAcwBlAHIAOgA6AGkAbgB0AFcAZQBsAGwASQBkAEYAbwByAEMAbwBuAG4AZQBjAHQA
VABpAG0AZQAAK1UAcwBlAHIAOgA6AG8AYgBqAEYAcgBvAG0ARABhAHQAZQBUAGkAbQBlAAA1VQBz
AGUAcgA6ADoAcwB0AHIAQwBvAG4AdgBlAHIAdABlAGQAVABpAG0AZQBaAG8AbgBlAAAnVQBzAGUA
cgA6ADoAbwBiAGoAVABvAEQAYQB0AGUAVABpAG0AZQAAJVUAcwBlAHIAOgA6AGkAbgB0AEYAcgBv
AG0ARABlAHAAdABoAAAhVQBzAGUAcgA6ADoAaQBuAHQAVABvAEQAZQBwAHQAaAAAOVUAcwBlAHIA
OgA6AHMAdAByAEEAYwB0AGkAdgBpAHQAeQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AACtVAHMAZQBy
ADoAOgBvAGIAagBEAHIAaQBsAGwAZQByAE4AYQBtAGUAcwAAMVUAcwBlAHIAOgA6AHMAdAByAFMA
aQBuAGcAbABlAHMATwByAFMAdABhAG4AZABzAAA5VQBzAGUAcgA6ADoAaQBuAHQATgB1AG0AYgBl
AHIATwBmAEMAbwBuAG4AZQBjAHQAaQBvAG4AcwAAN1UAcwBlAHIAOgA6AGQAYgBsAEEAdgBnAFcA
dABvAFcAQwBvAG4AbgBlAGMAdABUAGkAbQBlAAA3VQBzAGUAcgA6ADoAZABiAGwAQQB2AGcAUwB0
AG8AUwBDAG8AbgBuAGUAYwB0AFQAaQBtAGUAAE1VAHMAZQByADoAOgBkAGIAbABBAHYAZwBSAGUA
YQBtAEMAaQByAGMAdQBsAGEAdABlAEMAbwBuAGQAaQB0AGkAbwBuAFQAaQBtAGUAAC1VAHMAZQBy
ADoAOgBkAGIAbABBAHYAZwBTAHUAcgB2AGUAeQBUAGkAbQBlAAA7VQBzAGUAcgA6ADoAbwBiAGoA
UgBlAG0AYQByAGsARgBvAHIAQwBvAG4AbgBlAGMAdABUAGkAbQBlAABHVQBzAGUAcgA6ADoAcwB0
AHIAQgBpAHQARABlAHAAdABoAFUAbwBtAEYAbwByAEMAbwBuAG4AZQBjAHQAVABpAG0AZQBzAAAn
VQBzAGUAcgA6ADoAcwB0AHIAUwBlAHIAdgBlAHIATgBhAG0AZQAAH1UAcwBlAHIAOgA6AHMAdABy
AEEAcABpAEsAZQB5AAAlVQBzAGUAcgA6ADoAcwB0AHIAQQBjAGMAZQBzAHMASwBlAHkAACFTAHkA
cwB0AGUAbQA6ADoAVQBzAGUAcgBOAGEAbQBlAAAJZgBlAGUAdAAAcWgAdAB0AHAAcwA6AC8ALwB7
ADAAfQAvAGEAcABpAC8AYwBvAG4AbgBlAGMAdABUAGkAbQBlAC8AewAxAH0APwBhAHAAaQBrAGUA
eQA9AHsAMgB9ACYAYQBjAGMAZQBzAHMAawBlAHkAPQB7ADMAfQAAAyAAAAclADIAMAAAAyQAAAcl
ADIANAAAMyAATgBvAHQAIABmAG8AdQBuAGQAIAAtACAAdwBpAGwAbAAgAGkAbgBzAGUAcgB0AC4A
AWMgAEUAbgB0AGkAdAB5ACAAZgBvAHUAbgBkACAALQAgAHcAaQBsAGwAIABjAGgAZQBjAGsAIABp
AGYAIAB1AHAAZABhAHQAZQAgAGkAcwAgAHIAZQBxAHUAaQByAGUAZAAuAAFHIABBAHQAdABlAG0A
cAB0AGkAbgBnACAAdwByAGkAdABlACAAdABvACAARABhAHQAYQBHAHUAbQBiAG8AIABBAFAASQAu
AAAHUABVAFQAACFhAHAAcABsAGkAYwBhAHQAaQBvAG4ALwBqAHMAbwBuAABhIABIAFQAVABQACAA
cAB1AHQAIABmAGEAaQBsAGUAZAAgAHcAaQB0AGgAIABlAHgAYwBlAHAAdABpAG8AbgAgAHsAMAB9
AC4AIABXAGkAbABsACAAcgBlAHQAcgB5AC4AACkgAE4AbwAgAHUAcABkAGEAdABlACAAcgBlAHEA
dQBpAHIAZQBkAC4AACkgACAAUgBlAHQAdQByAG4AaQBuAGcAIABTAHUAYwBjAGUAcwBzAC4AABVH
AHUAbQBiAG8AIABTAFMASQBTAAAzIAAgAEUAbgBjAG8AdQBuAHQAZQByAGUAZAAgAGUAcgByAG8A
cgA6ACAAewAwAH0ALgAAEVwAdQB7ADAAOgB4ADQAfQAAGVsAXgBcAHgAMAAwAC0AXAB4ADcARgBd
AAEAqpa6ST8ClUWKENWXQghUhgAIt3pcVhk04IkIiYRdzYCAzJEDBhIVAwYSGQMgAAEEAAASFQQA
ABIZBQABARIZBAgAEhUECAASGQMGEgwEAAASDAQIABIMCCAEEhgIDg4ODwACAhURHQERIRURHQER
IQogAhURHQERIQ4OBAABDg4CBggDBhEUBAAAAAAEAQAAAAMgAAgEIAEBCAggABURHQERIQkgAQEV
ER0BESEDIAANBCABAQ0DIAAOBCABAQ4DIAACBCABAQIdIBACCBURHQERIRURHQERIQ0NDg4OCA0N
DQ0OAg4HBhURHQERIQIGDQIGDgIGAgMoAAgIKAAVER0BESEDKAANAygADgMoAAIGAAESWRFdBCAA
EmEGIAIBDhJhBAcBEhUFIAEBEWkIAQACAAAAAAADAAABCgAEAhwSdRJ5EX0EBhKAgQUgABKAiQUg
ABKAjQYgARKAkRwDIAAcByACEoCFDhwEAAENHAYgAR0OHQMMEAEBHgAVEoCtAR4AAwoBDgUAAgIO
DgUgAgEcGAYAAQESgIEGAAEBEYC1BgACDg4dHAUgAg4ODgQAABEhBiABEoCFDgYAARKAuQ4IMb84
Vq02TjUEAAEOHAQgAQEKBSAAEoDFBQAAEoDJCSACARKAxRKAyQUgABKA1QYgAQESgMUFAAIODhwF
IAASgOUKIAYBCA4ODggQAgggBQIIDg4OCEMHJBKAhQIICBURHQERIRURHQERIQ0NDg4OCA0NDQ0O
DgIODg4ODhIYCBKAvQ4SgM0SgNUSgMUSgNkSgOESgOEdAx0cBhABAR4ADgQKARIYFgcJDhKAvRKA
1RKAxRKA2Q4SGBIYHRwGFREdAREhBCAAEwAHAAICESERIQYHAhEhESEEAAECDgUAAREhDgUgABGA
6QYAARKA7Q4HIAERgPERIQcgAREhEYDxDCAHAQgICAgICBGA6QUgAQETABoHCBwOESESgO0RgPER
IRURHQERIRURHQERIQYAAQ4SgPUEBhKA+QQgAQMICAADDg4OEoD5BCAAESEpBwoCFREdAREhFREd
AREhESEVER0BESERIRURHQERIREhFREdAREhESFJAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0
LjUBAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEi5ORVQgRnJhbWV3b3JrIDQuNSgBACNTVF8xM2Qy
MGJhYzY4N2U0NDI4ODEwNGYyODMwYTUxZGE3NAAABQEAAAAAFgEAEUNvcHlyaWdodCBAICAyMDE4
AAAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBjFkAAAAAAAAAAAAArlkA
AAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKBZAAAAAAAAAAAAAAAAAAAAAAAAAABfQ29yRGxsTWFp
bgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAAAAAYAACAAAAAAAAA
AAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWGAAALADAAAAAAAAAAAA
ALADNAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAABAAAAAQC/VuAb
AAABAL9W4Bs/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBhAHIARgBpAGwAZQBJ
AG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAAsAQQAwAAAQBTAHQA
cgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAADsAgAAAQAwADAAMAAwADAANABiADAAAABwACQAAQBG
AGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBUAF8AMQAzAGQAMgAwAGIAYQBjADYA
OAA3AGUANAA0ADIAOAA4ADEAMAA0AGYAMgA4ADMAMABhADUAMQBkAGEANwA0AAAAQAAPAAEARgBp
AGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADcAMQAzADYALgAyADIAMgAwADcAAAAAAHAA
KAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8AYgBkADIAMABlAGUAYwBkAGYAZgBh
ADUANAA0AGIANgBiADkANgBjAGIAMgBhADgAOQBlADYAZQBiAGYAMwAxAC4AZABsAGwAAABIABIA
AQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIAAg
ADIAMAAxADgAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAUwBUAF8A
YgBkADIAMABlAGUAYwBkAGYAZgBhADUANAA0AGIANgBiADkANgBjAGIAMgBhADgAOQBlADYAZQBi
AGYAMwAxAC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMAVABfADEA
MwBkADIAMABiAGEAYwA2ADgANwBlADQANAAyADgAOAAxADAANABmADIAOAAzADAAYQA1ADEAZABh
ADcANAAAAEQADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANwAxADMA
NgAuADIAMgAyADAANwAAAAAASAAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAA
ADEALgAwAC4ANwAxADMANgAuADIAMgAyADAANwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAwAAADAOQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
                </ScriptProject>
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:ForEachVariableMappings>
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{19E8C785-A612-4FB0-9F45-5A7A0187D213}"
              DTS:ObjectName="{19E8C785-A612-4FB0-9F45-5A7A0187D213}"
              DTS:ValueIndex="0"
              DTS:VariableName="User::intWellConnectTimeId" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{0E8F3024-0110-45CB-A425-F7CB8797F0DA}"
              DTS:ObjectName="{0E8F3024-0110-45CB-A425-F7CB8797F0DA}"
              DTS:ValueIndex="1"
              DTS:VariableName="User::intWellIdForConnectTime" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{7469BEE6-38E7-4349-8066-1804DDC870F3}"
              DTS:ObjectName="{7469BEE6-38E7-4349-8066-1804DDC870F3}"
              DTS:ValueIndex="2"
              DTS:VariableName="User::objFromDateTime" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{C6B4513A-4968-42FC-BCC1-0A1A217BEF46}"
              DTS:ObjectName="{C6B4513A-4968-42FC-BCC1-0A1A217BEF46}"
              DTS:ValueIndex="3"
              DTS:VariableName="User::objToDateTime" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{69DEC0CA-B930-45BC-82CF-4A0F4649FE55}"
              DTS:ObjectName="{69DEC0CA-B930-45BC-82CF-4A0F4649FE55}"
              DTS:ValueIndex="4"
              DTS:VariableName="User::intFromDepth" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{6B1B9A62-5305-46CF-A1A5-65B0CBEE7A36}"
              DTS:ObjectName="{6B1B9A62-5305-46CF-A1A5-65B0CBEE7A36}"
              DTS:ValueIndex="5"
              DTS:VariableName="User::intToDepth" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{55904B95-027F-40AC-A979-F80871FD8F7E}"
              DTS:ObjectName="{55904B95-027F-40AC-A979-F80871FD8F7E}"
              DTS:ValueIndex="6"
              DTS:VariableName="User::strActivityDescription" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{6324F61F-A13F-48A9-9103-294EB7158302}"
              DTS:ObjectName="{6324F61F-A13F-48A9-9103-294EB7158302}"
              DTS:ValueIndex="7"
              DTS:VariableName="User::objDrillerNames" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{F4894714-DFF8-4A0A-9199-80407EEA9466}"
              DTS:ObjectName="{F4894714-DFF8-4A0A-9199-80407EEA9466}"
              DTS:ValueIndex="8"
              DTS:VariableName="User::strSinglesOrStands" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{74E94DF2-959A-42E2-AA1F-FD546A17A0B4}"
              DTS:ObjectName="{74E94DF2-959A-42E2-AA1F-FD546A17A0B4}"
              DTS:ValueIndex="9"
              DTS:VariableName="User::intNumberOfConnections" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{87B0ADC8-7858-4C47-BBF6-4B4B24E37B25}"
              DTS:ObjectName="{87B0ADC8-7858-4C47-BBF6-4B4B24E37B25}"
              DTS:ValueIndex="10"
              DTS:VariableName="User::dblAvgWtoWConnectTime" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{758BD730-7502-462A-8377-5F26D8E4C4C3}"
              DTS:ObjectName="{758BD730-7502-462A-8377-5F26D8E4C4C3}"
              DTS:ValueIndex="11"
              DTS:VariableName="User::dblAvgStoSConnectTime" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{ECF5FBB9-EDC4-4BF8-AE1A-0C0A01B4FBD8}"
              DTS:ObjectName="{ECF5FBB9-EDC4-4BF8-AE1A-0C0A01B4FBD8}"
              DTS:ValueIndex="12"
              DTS:VariableName="User::dblAvgReamCirculateConditionTime" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{DA8E83D3-CE8A-45CB-96B6-854F53623A88}"
              DTS:ObjectName="{DA8E83D3-CE8A-45CB-96B6-854F53623A88}"
              DTS:ValueIndex="13"
              DTS:VariableName="User::dblAvgSurveyTime" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{30C1257D-8D1E-44F0-9768-E4EE5F397A56}"
              DTS:ObjectName="{30C1257D-8D1E-44F0-9768-E4EE5F397A56}"
              DTS:ValueIndex="14"
              DTS:VariableName="User::objRemarkForConnectTime" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{419C076A-6F2B-49A3-BCDC-A8ECEB7C13D4}"
              DTS:ObjectName="{419C076A-6F2B-49A3-BCDC-A8ECEB7C13D4}"
              DTS:ValueIndex="15"
              DTS:VariableName="User::strBitDepthUomForConnectTimes" />
          </DTS:ForEachVariableMappings>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Well Loop\Connect Times Min Max Loop"
          DTS:CreationName="STOCK:FOREACHLOOP"
          DTS:Description="Foreach Loop Container"
          DTS:DTSID="{36fa1668-9738-4c4a-b9a5-35a3addce964}"
          DTS:ExecutableType="STOCK:FOREACHLOOP"
          DTS:LocaleID="-1"
          DTS:MaxErrorCount="6"
          DTS:ObjectName="Connect Times Min Max Loop">
          <DTS:ForEachEnumerator
            DTS:CreationName="Microsoft.SqlServer.Dts.Runtime.Enumerators.ADO.ForEachADOEnumerator, Microsoft.SqlServer.ForEachADOEnumerator, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
            DTS:DTSID="{3fb156ba-a7a7-499a-8f13-e39dd8532ba0}"
            DTS:ObjectName="{4F357A1D-CA44-434A-8085-25C4D1BB103C}">
            <DTS:ObjectData>
              <FEEADO
                EnumType="EnumerateRowsInFirstTable"
                VarName="User::objMinMaxConnectTimeIdResultSet" />
            </DTS:ObjectData>
          </DTS:ForEachEnumerator>
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Well Loop\Connect Times Min Max Loop\C# Script to Delete Old Connect Time Records"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Script Task"
              DTS:DTSID="{126C03DA-BAA8-4222-99CC-7D61B15C49B9}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="C# Script to Delete Old Connect Time Records"
              DTS:ThreadHint="1">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:ObjectData>
                <ScriptProject
                  Name="ST_9a1b4f72f3d74ec9a8894134d93e1eae"
                  VSTAMajorVersion="3"
                  VSTAMinorVersion="0"
                  Language="CSharp"
                  ReadOnlyVariables="User::intMaxConnectTimeId,User::intMinConnectTimeId,User::intWellId,User::strAccessKey,User::strApiKey,User::strServerName,System::UserName">
                  <ProjectItem
                    Name="ST_9a1b4f72f3d74ec9a8894134d93e1eae.csproj"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{F37671AE-1A52-4A02-A23F-908E07A2C355}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_9a1b4f72f3d74ec9a8894134d93e1eae</RootNamespace>
    <AssemblyName>ST_9a1b4f72f3d74ec9a8894134d93e1eae</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Web.Helpers, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
      <DesignTime>True</DesignTime>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\10.0\InstallDir#\devenv.exe" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Resources.resx"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\AssemblyInfo.cs"
                    Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_9a1b4f72f3d74ec9a8894134d93e1eae")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_9a1b4f72f3d74ec9a8894134d93e1eae")]
[assembly: AssemblyCopyright("Copyright @  2019")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
                  <ProjectItem
                    Name="ScriptMain.cs"
                    Encoding="UTF8"><![CDATA[using System.Net;
using System.IO;
using System.Text;
using System.Web;
using System.Web.Helpers;
using System.Linq;

#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion

namespace ST_9a1b4f72f3d74ec9a8894134d93e1eae
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            StringBuilder logMessage = new StringBuilder();
            int minConnectTimeId = (int)Dts.Variables["User::intMinConnectTimeId"].Value;
            int maxConnectTimeId = (int)Dts.Variables["User::intMaxConnectTimeId"].Value;
            int wellId = (int)Dts.Variables["User::intWellId"].Value;
            logMessage.AppendFormat("Checking if connect time deletes required for well {0} - range in database is {1} to {2}.", wellId, minConnectTimeId, maxConnectTimeId);

            string serverName = (String)Dts.Variables["User::strServerName"].Value;
            string apiKey = (String)Dts.Variables["User::strApiKey"].Value;
            string accessKey = (String)Dts.Variables["User::strAccessKey"].Value;
            string currentUserId = (String)Dts.Variables["System::UserName"].Value;

            if (currentUserId != null)
            {
                currentUserId = currentUserId.Split('\\').Last();
            }

            ServicePointManager.ServerCertificateValidationCallback = delegate { return true; };
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls | SecurityProtocolType.Ssl3;

            try
            {
                string url = string.Format("https://{0}/api/connectTime?wellId={1}&apikey={2}&accesskey={3}", serverName, wellId, apiKey, accessKey);
                url = url.Replace(" ", "%20");
                url = url.Replace("$", "%24");

                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                WebResponse webResponse = request.GetResponse();
                Stream webStream = webResponse.GetResponseStream();
                StreamReader responseReader = new StreamReader(webStream);
                string response = responseReader.ReadToEnd();
                responseReader.Close();
                ConnectTime[] connectTimes = Json.Decode<ConnectTime[]>(response);

                int gumboMinConnectTimeId = 0;
                int gumboMaxConnectTimeId = 0;

                if (connectTimes.Any())
                {
                    gumboMinConnectTimeId = connectTimes.Min(ts => ts.connectTimeId);
                    gumboMaxConnectTimeId = connectTimes.Max(ts => ts.connectTimeId);
                }


                bool deleteExisting = gumboMinConnectTimeId != 0 &&
                    gumboMaxConnectTimeId != 0 &&
                    gumboMinConnectTimeId < minConnectTimeId;

                if (deleteExisting)
                {
                    string listOfIdsToDelete = string.Join(",", connectTimes.Select(ct => ct.connectTimeId.ToString()));
                    logMessage.AppendFormat(" Attempting delete of tripping speeds with ids {0}.", listOfIdsToDelete);
                    foreach (ConnectTime connectTime in connectTimes)
                    {
                        logMessage.AppendFormat(" ID: {0}.", connectTime.connectTimeId);
                        url = string.Format("https://{0}/api/connectTime/{1}?apikey={2}&accesskey={3}", serverName, connectTime.connectTimeId, apiKey, accessKey);
                        int retries = 2;

                        while (retries > 0)
                        {
                            try
                            {
                                request = (HttpWebRequest)WebRequest.Create(url);
                                string gumboPayload = Json.Encode(connectTime);

                                request.Method = "DELETE";
                                request.ContentType = "application/json";
                                request.ContentLength = gumboPayload.Length;
                                StreamWriter requestWriter = new StreamWriter(request.GetRequestStream(), System.Text.Encoding.ASCII);
                                requestWriter.Write(gumboPayload);
                                requestWriter.Close();

                                webResponse = request.GetResponse();
                                webStream = webResponse.GetResponseStream();
                                responseReader = new StreamReader(webStream);
                                response = responseReader.ReadToEnd();
                                responseReader.Close();
                                retries = 0; // indicate success
                            }
                            catch (Exception e)
                            {
                                retries--;
                                if (retries > 0)
                                {
                                    logMessage.Append(string.Format(" HTTP delete failed with exception {0}. Will retry.", e.Message));
                                }
                                else
                                {
                                    throw e;
                                }
                            }
                        }
                    }
                    logMessage.Append(" Records deleted");
                }
                else
                {
                    logMessage.Append("  No records to delete.");
                }

                Dts.TaskResult = (int)ScriptResults.Success;
                logMessage.Append("  Returning Success.");
                bool fireAgain = false;
                Dts.Events.FireInformation(0, "Gumbo SSIS", logMessage.ToString(), string.Empty, 0, ref fireAgain);

            }
            catch (Exception e)
            {
                logMessage.AppendFormat("  Encountered error: {0}.", e.Message);
                Dts.Events.FireError(0, "Gumbo SSIS", logMessage.ToString(), string.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }


        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        #region data class
        class ConnectTime
        {
            public int connectTimeId { get; set; }
            public int wellId { get; set; }
            public DateTime? startDateTime { get; set; }
            public DateTime? endDateTime { get; set; }
            public double fromDepth { get; set; }
            public double toDepth { get; set; }
            public string activityDescription { get; set; }
            public string drillerNames { get; set; }
            public string singleOrStands { get; set; }
            public int numberOfConnections { get; set; }
            public double avgWtoWConnectTime { get; set; }
            public double avgStoSConnectTime { get; set; }
            public double avgReamCirculateConditionTime { get; set; }
            public double avgSurveyTime { get; set; }
            public string remark { get; set; }
            public bool activeInd { get; set; }
            public string rowCreatedBy { get; set; }
            public string rowChangedBy { get; set; }
            public DateTime? rowCreatedDate { get; set; }
            public DateTime? rowChangedDate { get; set; }

        }
        #endregion

    }
}]]></ProjectItem>
                  <ProjectItem
                    Name="Project"
                    Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_9a1b4f72f3d74ec9a8894134d93e1eae</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_9a1b4f72f3d74ec9a8894134d93e1eae</msb:DisplayName>
		<msb:ProjectId>{8DC31983-F386-41C1-AD4D-B11A8E8BE77B}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_9a1b4f72f3d74ec9a8894134d93e1eae.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_9a1b4f72f3d74ec9a8894134d93e1eae.Properties.Settings.get_Default():ST_9a1b4f72f3d74ec9a8894134d93e1eae.Properties.Sett" +
    "ings")]

namespace ST_9a1b4f72f3d74ec9a8894134d93e1eae.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.settings"
                    Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Resources.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_9a1b4f72f3d74ec9a8894134d93e1eae.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_9a1b4f72f3d74ec9a8894134d93e1eae.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_9a1b4f72f3d74ec9a8894134d93e1eae.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_9a1b4f72f3d74ec9a8894134d93e1eae.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_9a1b4f72f3d74ec9a8894134d93e1eae.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
                  <BinaryItem
                    Name="ST_9a1b4f72f3d74ec9a8894134d93e1eae.dll">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
cAZvQgAACn5DAAAKFhIYb0QAAAreRhMZBnL0BABwERlvPQAACm8yAAAKJgIoGAAACm9BAAAKFnLe
BABwBm9CAAAKfkMAAAoWb0UAAAomAigYAAAKF29AAAAK3gAqAAAAQTQAAAAAAAANAwAAkQAAAJ4D
AAAsAAAANwAAAQAAAABWAQAA6AIAAD4EAABGAAAANwAAAR4CKEYAAAoqHgJ7CwAABCoiAgN9CwAA
BCoeAnsMAAAEKiICA30MAAAEKh4Cew0AAAQqIgIDfQ0AAAQqHgJ7DgAABCoiAgN9DgAABCoeAnsP
AAAEKiICA30PAAAEKh4CexAAAAQqIgIDfRAAAAQqHgJ7EQAABCoiAgN9EQAABCoeAnsSAAAEKiIC
A30SAAAEKh4CexMAAAQqIgIDfRMAAAQqHgJ7FAAABCoiAgN9FAAABCoeAnsVAAAEKiICA30VAAAE
Kh4CexYAAAQqIgIDfRYAAAQqHgJ7FwAABCoiAgN9FwAABCoeAnsYAAAEKiICA30YAAAEKh4CexkA
AAQqIgIDfRkAAAQqHgJ7GgAABCoiAgN9GgAABCoeAnsbAAAEKiICA30bAAAEKh4CexwAAAQqIgID
fRwAAAQqHgJ7HQAABCoiAgN9HQAABCoeAnseAAAEKiICA30eAAAEKh4CKA4AAAoqtAAAAM7K774B
AAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lv
bj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUw
ODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQ
tAAAAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAAGgMAAAjfgAA1AwAAGwQAAAj
U3RyaW5ncwAAAABAHQAAKAUAACNVUwBoIgAAEAAAACNHVUlEAAAAeCIAAEADAAAjQmxvYgAAAAAA
AAACAAABVx2iCQkLAAAA+iUzABYAAAEAAAA4AAAABgAAAB4AAAA2AAAAHAAAAEYAAAACAAAAUwAA
AAMAAAADAAAAFwAAACwAAAACAAAAAQAAAAYAAAABAAAAAgAAAAYAAAAAAAoAAQAAAAAABgDNAMYA
CgDpANQADgBJASABBgBlAcYABgB7AWoBBgCsAZcBBgB9AsYABgCIAsYABgDrCNEIBgAWCQQJBgAt
CQQJBgBKCQQJBgBpCQQJBgCCCQQJBgCbCQQJBgC2CQQJBgDRCQQJBgDqCQQJBgAjCgMKBgBDCgMK
BgB0CmEKBgCRCsYABgCWCsYABgC6CgQJCgDmCtAKCgD/CtAKBgAUCwMKDgA2CyABBgCGC1gLCgCW
C1gLCgC0C6ALCgDrC6ALBgBEDMYABgDZDMYABgD0DOgMDgACDSABEgBbDTsNEgBzDTsNBgCcDcYA
BgCjDcYAFgDGDboNBgDsDdENCgAKDv8NCgBGDv8NCgB/Dv8NCgCRDv8NCgCgDv8NBgDCDrgOBgDb
DrgOBgDoDrgOGgAWDwMPBgCKD+gMBgCdD7gOBgCqD7gOBgC7D8YADgDnDyABAAAAAAEAAAAAAAEA
AQAAABAAMgA8AAUAAQABAAABEABrADwACQADAAUAAQAQAHQAfwANAAQACAADAQAAowAAABEACAAO
AAMAEACxAAAABQALAA4AEQCLARMAEQC4ARcAEQACAjkAEQAPDO8AEQBLDPoAEQB9DPoAEQCyDAoB
BgYrAkcAVoAzAkoAVoA7AkoAAQA3BUcAAQBWBUcAAQBuBY8AAQCNBY8AAQCqBZcAAQDFBZcAAQDe
BZoAAQADBpoAAQAhBpoAAQBBBkcAAQBmBpcAAQCKBpcAAQCuBpcAAQDdBpcAAQD8BpoAAQAUB50A
AQAvB5oAAQBNB5oAAQBrB48AAQCLB48AUCAAAAAAgxjIARsAAQBYIAAAAACTCM4BHwABAJEgAAAA
AJMI4gEkAAEAmCAAAAAAkwjuASkAAQCgIAAAAACWCBICPQACALMgAAAAAIYYyAEbAAIApyAAAAAA
kRgvC+AAAgDsIAAAAACGACYCGwACALQlAAAAAIYYyAEbAAIAuyAAAAAAkQDEC+QAAgC+IAAAAACR
ADYM9AAGAMYgAAAAAJEAcgz0AAcA0CAAAAAAkQCkDAQBCAC8JQAAAACGCEMCWAAJAMQlAAAAAIYI
VQJcAAkAzSUAAAAAhghnAlgACgDVJQAAAACGCHICXAAKAN4lAAAAAIYIkQJhAAsA5iUAAAAAhgij
AmoACwDvJQAAAACGCLUCYQAMAPclAAAAAIYIxQJqAAwAACYAAAAAhgjVAnQADQAIJgAAAACGCOMC
eAANABEmAAAAAIYI8QJ0AA4AGSYAAAAAhgj9AngADgAiJgAAAACGCAkDfQAPAComAAAAAIYIIQOB
AA8AMyYAAAAAhgg5A30AEAA7JgAAAACGCEoDgQAQAEQmAAAAAIYIWwN9ABEATCYAAAAAhghuA4EA
EQBVJgAAAACGCIEDWAASAF0mAAAAAIYImQNcABIAZiYAAAAAhgixA3QAEwBuJgAAAACGCMgDeAAT
AHcmAAAAAIYI3wN0ABQAfyYAAAAAhgj2A3gAFACIJgAAAACGCA0EdAAVAJAmAAAAAIYILwR4ABUA
mSYAAAAAhghRBHQAFgChJgAAAACGCGMEeAAWAKomAAAAAIYIdQR9ABcAsiYAAAAAhgiABIEAFwC7
JgAAAACGCIsEhgAYAMMmAAAAAIYImQSKABgAzCYAAAAAhginBH0AGQDUJgAAAACGCLgEgQAZAN0m
AAAAAIYIyQR9ABoA5SYAAAAAhgjaBIEAGgDuJgAAAACGCOsEYQAbAPYmAAAAAIYI/gRqABsA/yYA
AAAAhggRBWEAHAAHJwAAAACGCCQFagAcABAnAAAAAIYYyAEbAB0AAAABAMsIAAABAM8LAAACANYL
AAADAN0LAAAEAOQLAAABAEEMAAABAEEMAAABAK8MAAABAMsIAAABAMsIAAABAMsIAAABAMsIAAAB
AMsIAAABAMsIAAABAMsIAAABAMsIAAABAMsIAAABAMsIAAABAMsIAAABAMsIAAABAMsIAAABAMsI
AAABAMsIAAABAMsIAAABAMsIAAABAMsIAAABAMsIAAABAMsISQDIAYEAUQDIAYEAWQDIAYEAYQDI
AYEAaQDIAYEAcQDIAYEAeQDIAYEAgQDIAYEAiQDIAYEAkQDIAYEAmQDIAVwAoQDIARsAqQDIARsA
CQDIARsAsQCoCrkAsQDDCsAAKQDIAcUAyQDIAdEA2QDIARsAEQDIARsA4QDIARsAEQHfDH0AGQHI
ARsAGQAUDRgBIQFlDR4BKQF8DSQBMQGFDSsBGQGPDS8BOQGoDTkBSQH6DUABAQHIAVEBWQEeDlcB
WQFbDl4BOQFwDmUBOQF3DmwBaQGKDnIBaQGsDnkBeQHJDn8BiQHIAYUBkQHzDn0AkQH9DhsAmQEb
D5UBSQEiD6IBDADIAVEBSQEmD7wBSQEqD7wBFADIAVEBSQEuD9kBOQE1D/oBGQGPDQUCmQE6Dw0C
aQFBD4EAaQFMD4EAOQFcD1gAaQFnDxICaQF5D38BoQGTDxcCqQHIAR0CsQG1D4EAsQH9DhsAuQHF
D30AOQFwDicCGQHRDy0CIQHYD1wAIQH7DzQCCQDfDH0AOQEGEJoAwQEMEDoCwQEcEEUCGQDIARsA
CAAkAE4ACAAoAFMAKQCTANcALgBbABgDLgBjACEDLgALAIgCLgATANICLgAbAPsCLgAjAPsCLgAr
APsCLgAzANICLgA7AAEDLgBDAPsCQwBrAFMASQCTANcAYQCbAFMAgQCbAFMAgwCrAFMAoQCbAFMA
wQCbAFMA4QCbAFMAQAGbAFMAYAGbAFMAYQGbAFMAgAGbAFMAgQGbAFMAoAGbAFMAoQGbAFMAwAGb
AFMAwQGbAFMA4AGbAFMA4QGbAFMAAAKbAFMAAQKbAFMAIAKbAFMAIQKbAFMAQAKbAFMAQQKbAFMA
YAKbAFMAYQKbAFMAgAKbAFMAgQKbAFMAoAKbAFMAoQKbAFMAwAKbAFMAwQKbAFMA4AKbAFMA4QKb
AFMAAAObAFMAAQObAFMAIAObAFMAIQObAFMAQAObAFMAQQObAFMAYAObAFMAYQObAFMAgAObAFMA
gQObAFMAoAObAFMAoQObAFMAwAObAFMAwQObAFMA4AObAFMAAASbAFMAIASbAFMAQASbAFMAYASb
AFMAgASbAFMAoASbAFMAwASbAFMA4ASbAFMAAAWbAFMAIAWbAFMAQAWbAFMAYAWbAFMAgAWbAFMA
oAWbAFMAwAWbAFMA4AWbAFMAAAabAFMAIAabAFMAQAabAFMAYAabAFMAgAabAFMAoAabAFMAzAAU
AU4CAgABAAMAAwAGAAQAAAB7AS8AAAD6ATQAAAAeAkIAAACrB6AAAAC5B6AAAADAB6QAAADOB6QA
AADaB60AAADkB60AAADsB7EAAAAACLEAAAANCLEAAAAcCKAAAAAwCK0AAABDCK0AAABWCK0AAAB0
CK0AAACCCLEAAACJCLUAAACTCLEAAACgCLEAAACtCKQAAAC8CKQAAgACAAMAAgADAAUAAQAEAAUA
AgAFAAcAAgAOAAkAAQAPAAkAAgAQAAsAAQARAAsAAQATAA0AAgASAA0AAQAVAA8AAgAUAA8AAgAW
ABEAAQAXABEAAgAYABMAAQAZABMAAQAbABUAAgAaABUAAgAcABcAAQAdABcAAQAfABkAAgAeABkA
AQAhABsAAgAgABsAAgAiAB0AAQAjAB0AAgAkAB8AAQAlAB8AAQAnACEAAgAmACEAAgAoACMAAQAp
ACMAAgAqACUAAQArACUAAQAtACcAAgAsACcAAgAuACkAAQAvACkAAgAwACsAAQAxACsAAQAzAC0A
AgAyAC0AAgA0AC8AAQA1AC8AswHQAQSAAAABAAAA4Bv1VwAAAAAAAH8AAAAEAAAAAAAAAAAAAAAB
AL0AAAAAAAQAAAAAAAAAAAAAAAEAxgAAAAAACwAAAAAAAAAAAAAACgABAQAAAAALAAAAAAAAAAAA
AAAKABwNAAAAAAQAAAAAAAAAAAAAAAEArg0AAAAAAQAAAAAAAAAAAAAAjAEDDwAAAAAAAAAAAQAA
ACYQAAAFAAQABgAEAD0ATQFVAJwBVwCuAVsArgFdAK4BYQD0AQAAADxNb2R1bGU+AFNUXzlhMWI0
ZjcyZjNkNzRlYzlhODg5NDEzNGQ5M2UxZWFlLmRsbABSZXNvdXJjZXMAU1RfOWExYjRmNzJmM2Q3
NGVjOWE4ODk0MTM0ZDkzZTFlYWUuUHJvcGVydGllcwBTZXR0aW5ncwBTY3JpcHRNYWluAFNUXzlh
MWI0ZjcyZjNkNzRlYzlhODg5NDEzNGQ5M2UxZWFlAFNjcmlwdFJlc3VsdHMAQ29ubmVjdFRpbWUA
bXNjb3JsaWIAU3lzdGVtAE9iamVjdABTeXN0ZW0uQ29uZmlndXJhdGlvbgBBcHBsaWNhdGlvblNl
dHRpbmdzQmFzZQBNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sATWljcm9zb2Z0LlNxbFNl
cnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBWU1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UARW51
bQBTeXN0ZW0uUmVzb3VyY2VzAFJlc291cmNlTWFuYWdlcgByZXNvdXJjZU1hbgBTeXN0ZW0uR2xv
YmFsaXphdGlvbgBDdWx0dXJlSW5mbwByZXNvdXJjZUN1bHR1cmUALmN0b3IAZ2V0X1Jlc291cmNl
TWFuYWdlcgBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQBDdWx0dXJlAGRlZmF1bHRJbnN0YW5jZQBn
ZXRfRGVmYXVsdABEZWZhdWx0AE1haW4AdmFsdWVfXwBTdWNjZXNzAEZhaWx1cmUAZ2V0X2Nvbm5l
Y3RUaW1lSWQAc2V0X2Nvbm5lY3RUaW1lSWQAZ2V0X3dlbGxJZABzZXRfd2VsbElkAE51bGxhYmxl
YDEARGF0ZVRpbWUAZ2V0X3N0YXJ0RGF0ZVRpbWUAc2V0X3N0YXJ0RGF0ZVRpbWUAZ2V0X2VuZERh
dGVUaW1lAHNldF9lbmREYXRlVGltZQBnZXRfZnJvbURlcHRoAHNldF9mcm9tRGVwdGgAZ2V0X3Rv
RGVwdGgAc2V0X3RvRGVwdGgAZ2V0X2FjdGl2aXR5RGVzY3JpcHRpb24Ac2V0X2FjdGl2aXR5RGVz
Y3JpcHRpb24AZ2V0X2RyaWxsZXJOYW1lcwBzZXRfZHJpbGxlck5hbWVzAGdldF9zaW5nbGVPclN0
YW5kcwBzZXRfc2luZ2xlT3JTdGFuZHMAZ2V0X251bWJlck9mQ29ubmVjdGlvbnMAc2V0X251bWJl
ck9mQ29ubmVjdGlvbnMAZ2V0X2F2Z1d0b1dDb25uZWN0VGltZQBzZXRfYXZnV3RvV0Nvbm5lY3RU
aW1lAGdldF9hdmdTdG9TQ29ubmVjdFRpbWUAc2V0X2F2Z1N0b1NDb25uZWN0VGltZQBnZXRfYXZn
UmVhbUNpcmN1bGF0ZUNvbmRpdGlvblRpbWUAc2V0X2F2Z1JlYW1DaXJjdWxhdGVDb25kaXRpb25U
aW1lAGdldF9hdmdTdXJ2ZXlUaW1lAHNldF9hdmdTdXJ2ZXlUaW1lAGdldF9yZW1hcmsAc2V0X3Jl
bWFyawBnZXRfYWN0aXZlSW5kAHNldF9hY3RpdmVJbmQAZ2V0X3Jvd0NyZWF0ZWRCeQBzZXRfcm93
Q3JlYXRlZEJ5AGdldF9yb3dDaGFuZ2VkQnkAc2V0X3Jvd0NoYW5nZWRCeQBnZXRfcm93Q3JlYXRl
ZERhdGUAc2V0X3Jvd0NyZWF0ZWREYXRlAGdldF9yb3dDaGFuZ2VkRGF0ZQBzZXRfcm93Q2hhbmdl
ZERhdGUAPGNvbm5lY3RUaW1lSWQ+a19fQmFja2luZ0ZpZWxkADx3ZWxsSWQ+a19fQmFja2luZ0Zp
ZWxkADxzdGFydERhdGVUaW1lPmtfX0JhY2tpbmdGaWVsZAA8ZW5kRGF0ZVRpbWU+a19fQmFja2lu
Z0ZpZWxkADxmcm9tRGVwdGg+a19fQmFja2luZ0ZpZWxkADx0b0RlcHRoPmtfX0JhY2tpbmdGaWVs
ZAA8YWN0aXZpdHlEZXNjcmlwdGlvbj5rX19CYWNraW5nRmllbGQAPGRyaWxsZXJOYW1lcz5rX19C
YWNraW5nRmllbGQAPHNpbmdsZU9yU3RhbmRzPmtfX0JhY2tpbmdGaWVsZAA8bnVtYmVyT2ZDb25u
ZWN0aW9ucz5rX19CYWNraW5nRmllbGQAPGF2Z1d0b1dDb25uZWN0VGltZT5rX19CYWNraW5nRmll
bGQAPGF2Z1N0b1NDb25uZWN0VGltZT5rX19CYWNraW5nRmllbGQAPGF2Z1JlYW1DaXJjdWxhdGVD
b25kaXRpb25UaW1lPmtfX0JhY2tpbmdGaWVsZAA8YXZnU3VydmV5VGltZT5rX19CYWNraW5nRmll
bGQAPHJlbWFyaz5rX19CYWNraW5nRmllbGQAPGFjdGl2ZUluZD5rX19CYWNraW5nRmllbGQAPHJv
d0NyZWF0ZWRCeT5rX19CYWNraW5nRmllbGQAPHJvd0NoYW5nZWRCeT5rX19CYWNraW5nRmllbGQA
PHJvd0NyZWF0ZWREYXRlPmtfX0JhY2tpbmdGaWVsZAA8cm93Q2hhbmdlZERhdGU+a19fQmFja2lu
Z0ZpZWxkAGNvbm5lY3RUaW1lSWQAd2VsbElkAHN0YXJ0RGF0ZVRpbWUAZW5kRGF0ZVRpbWUAZnJv
bURlcHRoAHRvRGVwdGgAYWN0aXZpdHlEZXNjcmlwdGlvbgBkcmlsbGVyTmFtZXMAc2luZ2xlT3JT
dGFuZHMAbnVtYmVyT2ZDb25uZWN0aW9ucwBhdmdXdG9XQ29ubmVjdFRpbWUAYXZnU3RvU0Nvbm5l
Y3RUaW1lAGF2Z1JlYW1DaXJjdWxhdGVDb25kaXRpb25UaW1lAGF2Z1N1cnZleVRpbWUAcmVtYXJr
AGFjdGl2ZUluZAByb3dDcmVhdGVkQnkAcm93Q2hhbmdlZEJ5AHJvd0NyZWF0ZWREYXRlAHJvd0No
YW5nZWREYXRlAHZhbHVlAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAVGFyZ2V0RnJhbWV3b3Jr
QXR0cmlidXRlAFN5c3RlbS5SZWZsZWN0aW9uAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1i
bHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNz
ZW1ibHlDb21wYW55QXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNv
cHlyaWdodEF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBBc3NlbWJseUN1bHR1
cmVBdHRyaWJ1dGUAQXNzZW1ibHlWZXJzaW9uQXR0cmlidXRlAFN5c3RlbS5SdW50aW1lLkNvbXBp
bGVyU2VydmljZXMAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBSdW50aW1lQ29tcGF0
aWJpbGl0eUF0dHJpYnV0ZQBTeXN0ZW0uRGlhZ25vc3RpY3MARGVidWdnZXJOb25Vc2VyQ29kZUF0
dHJpYnV0ZQBUeXBlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAEFzc2VtYmx5
AGdldF9Bc3NlbWJseQBTeXN0ZW0uQ29tcG9uZW50TW9kZWwARWRpdG9yQnJvd3NhYmxlQXR0cmli
dXRlAEVkaXRvckJyb3dzYWJsZVN0YXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAC5jY3Rv
cgBTU0lTU2NyaXB0VGFza0VudHJ5UG9pbnRBdHRyaWJ1dGUAU3lzdGVtLlNlY3VyaXR5LkNyeXB0
b2dyYXBoeS5YNTA5Q2VydGlmaWNhdGVzAFg1MDlDZXJ0aWZpY2F0ZQBYNTA5Q2hhaW4AU3lzdGVt
Lk5ldC5TZWN1cml0eQBTc2xQb2xpY3lFcnJvcnMAPE1haW4+Yl9fMABwYXJhbTAAcGFyYW0xAHBh
cmFtMgBwYXJhbTMAUmVtb3RlQ2VydGlmaWNhdGVWYWxpZGF0aW9uQ2FsbGJhY2sAQ1MkPD45X19D
YWNoZWRBbm9ueW1vdXNNZXRob2REZWxlZ2F0ZTQAPE1haW4+Yl9fMQB0cwBGdW5jYDIAQ1MkPD45
X19DYWNoZWRBbm9ueW1vdXNNZXRob2REZWxlZ2F0ZTUAPE1haW4+Yl9fMgBDUyQ8PjlfX0NhY2hl
ZEFub255bW91c01ldGhvZERlbGVnYXRlNgA8TWFpbj5iX18zAGN0AENTJDw+OV9fQ2FjaGVkQW5v
bnltb3VzTWV0aG9kRGVsZWdhdGU3AEludDMyAFRvU3RyaW5nAFN5c3RlbS5UZXh0AFN0cmluZ0J1
aWxkZXIAU2NyaXB0T2JqZWN0TW9kZWwAZ2V0X0R0cwBNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFn
ZWREVFMATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBWYXJpYWJsZXMAZ2V0X1Zhcmlh
YmxlcwBWYXJpYWJsZQBnZXRfSXRlbQBnZXRfVmFsdWUAQXBwZW5kRm9ybWF0AFN0cmluZwBDaGFy
AFNwbGl0AFN5c3RlbS5Db3JlAFN5c3RlbS5MaW5xAEVudW1lcmFibGUAU3lzdGVtLkNvbGxlY3Rp
b25zLkdlbmVyaWMASUVudW1lcmFibGVgMQBMYXN0AFN5c3RlbS5OZXQAU2VydmljZVBvaW50TWFu
YWdlcgBzZXRfU2VydmVyQ2VydGlmaWNhdGVWYWxpZGF0aW9uQ2FsbGJhY2sAU2VjdXJpdHlQcm90
b2NvbFR5cGUAc2V0X1NlY3VyaXR5UHJvdG9jb2wARm9ybWF0AFJlcGxhY2UAV2ViUmVxdWVzdABD
cmVhdGUASHR0cFdlYlJlcXVlc3QAV2ViUmVzcG9uc2UAR2V0UmVzcG9uc2UAU3lzdGVtLklPAFN0
cmVhbQBHZXRSZXNwb25zZVN0cmVhbQBTdHJlYW1SZWFkZXIAVGV4dFJlYWRlcgBSZWFkVG9FbmQA
Q2xvc2UAU3lzdGVtLldlYi5IZWxwZXJzAEpzb24ARGVjb2RlAEFueQBNaW4ATWF4AFNlbGVjdABK
b2luAEVuY29kZQBzZXRfTWV0aG9kAHNldF9Db250ZW50VHlwZQBnZXRfTGVuZ3RoAHNldF9Db250
ZW50TGVuZ3RoAEdldFJlcXVlc3RTdHJlYW0ARW5jb2RpbmcAZ2V0X0FTQ0lJAFN0cmVhbVdyaXRl
cgBUZXh0V3JpdGVyAFdyaXRlAEV4Y2VwdGlvbgBnZXRfTWVzc2FnZQBBcHBlbmQAc2V0X1Rhc2tS
ZXN1bHQARXZlbnRzT2JqZWN0V3JhcHBlcgBnZXRfRXZlbnRzAEVtcHR5AEZpcmVJbmZvcm1hdGlv
bgBGaXJlRXJyb3IAU1RfOWExYjRmNzJmM2Q3NGVjOWE4ODk0MTM0ZDkzZTFlYWUuUHJvcGVydGll
cy5SZXNvdXJjZXMucmVzb3VyY2VzAAAAAABxUwBUAF8AOQBhADEAYgA0AGYANwAyAGYAMwBkADcA
NABlAGMAOQBhADgAOAA5ADQAMQAzADQAZAA5ADMAZQAxAGUAYQBlAC4AUAByAG8AcABlAHIAdABp
AGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAAAzVQBzAGUAcgA6ADoAaQBuAHQATQBpAG4AQwBvAG4A
bgBlAGMAdABUAGkAbQBlAEkAZAAAM1UAcwBlAHIAOgA6AGkAbgB0AE0AYQB4AEMAbwBuAG4AZQBj
AHQAVABpAG0AZQBJAGQAAB9VAHMAZQByADoAOgBpAG4AdABXAGUAbABsAEkAZAAAgLNDAGgAZQBj
AGsAaQBuAGcAIABpAGYAIABjAG8AbgBuAGUAYwB0ACAAdABpAG0AZQAgAGQAZQBsAGUAdABlAHMA
IAByAGUAcQB1AGkAcgBlAGQAIABmAG8AcgAgAHcAZQBsAGwAIAB7ADAAfQAgAC0AIAByAGEAbgBn
AGUAIABpAG4AIABkAGEAdABhAGIAYQBzAGUAIABpAHMAIAB7ADEAfQAgAHQAbwAgAHsAMgB9AC4A
ASdVAHMAZQByADoAOgBzAHQAcgBTAGUAcgB2AGUAcgBOAGEAbQBlAAAfVQBzAGUAcgA6ADoAcwB0
AHIAQQBwAGkASwBlAHkAACVVAHMAZQByADoAOgBzAHQAcgBBAGMAYwBlAHMAcwBLAGUAeQAAIVMA
eQBzAHQAZQBtADoAOgBVAHMAZQByAE4AYQBtAGUAAH9oAHQAdABwAHMAOgAvAC8AewAwAH0ALwBh
AHAAaQAvAGMAbwBuAG4AZQBjAHQAVABpAG0AZQA/AHcAZQBsAGwASQBkAD0AewAxAH0AJgBhAHAA
aQBrAGUAeQA9AHsAMgB9ACYAYQBjAGMAZQBzAHMAawBlAHkAPQB7ADMAfQAAAyAAAAclADIAMAAA
AyQAAAclADIANAAAAywAAGcgAEEAdAB0AGUAbQBwAHQAaQBuAGcAIABkAGUAbABlAHQAZQAgAG8A
ZgAgAHQAcgBpAHAAcABpAG4AZwAgAHMAcABlAGUAZABzACAAdwBpAHQAaAAgAGkAZABzACAAewAw
AH0ALgAAEyAASQBEADoAIAB7ADAAfQAuAABxaAB0AHQAcABzADoALwAvAHsAMAB9AC8AYQBwAGkA
LwBjAG8AbgBuAGUAYwB0AFQAaQBtAGUALwB7ADEAfQA/AGEAcABpAGsAZQB5AD0AewAyAH0AJgBh
AGMAYwBlAHMAcwBrAGUAeQA9AHsAMwB9AAANRABFAEwARQBUAEUAACFhAHAAcABsAGkAYwBhAHQA
aQBvAG4ALwBqAHMAbwBuAABnIABIAFQAVABQACAAZABlAGwAZQB0AGUAIABmAGEAaQBsAGUAZAAg
AHcAaQB0AGgAIABlAHgAYwBlAHAAdABpAG8AbgAgAHsAMAB9AC4AIABXAGkAbABsACAAcgBlAHQA
cgB5AC4AACEgAFIAZQBjAG8AcgBkAHMAIABkAGUAbABlAHQAZQBkAAAvIAAgAE4AbwAgAHIAZQBj
AG8AcgBkAHMAIAB0AG8AIABkAGUAbABlAHQAZQAuAAApIAAgAFIAZQB0AHUAcgBuAGkAbgBnACAA
UwB1AGMAYwBlAHMAcwAuAAAVRwB1AG0AYgBvACAAUwBTAEkAUwAAMyAAIABFAG4AYwBvAHUAbgB0
AGUAcgBlAGQAIABlAHIAcgBvAHIAOgAgAHsAMAB9AC4AAH4wIedww0FKpIzQjedG8yYACLd6XFYZ
NOCJCImEXc2AgMyRAwYSFQMGEhkDIAABBAAAEhUEAAASGQUAAQESGQQIABIVBAgAEhkDBhIMBAAA
EgwECAASDAIGCAMGERQEAAAAAAQBAAAAAyAACAQgAQEICCAAFREdAREhCSABARURHQERIQMgAA0E
IAEBDQMgAA4EIAEBDgMgAAIEIAEBAgcGFREdAREhAgYNAgYOAgYCAygACAgoABURHQERIQMoAA0D
KAAOAygAAgYAARJZEV0EIAASYQYgAgEOEmEEBwESFQUgAQERaQgBAAIAAAAAAAMAAAEKAAQCHBJ1
EnkRfQQGEoCBBQABCBIYCQYVEoCFAhIYCAUAAQ4SGAkGFRKAhQISGA4DBwEIBSAAEoCRBSAAEoCV
BiABEoCZHAMgABwJIAQSgI0OHBwcBiABHQ4dAwwQAQEeABUSgKkBHgADCgEOBSACARwYBgABARKA
gQYAAQERgLEGAAIODh0cBSACDg4OBgABEoC1DgUgABKAvQUgABKAwQYgAQESgMEIMb84Vq02TjUG
EAEBHgAOBQoBHRIYCxABAQIVEoCpAR4ABAoBEhgIFRKAhQISGAgTEAECCBUSgKkBHgAVEoCFAh4A
CAgVEoCFAhIYDhoQAgIVEoCpAR4BFRKAqQEeABUSgIUCHgAeAQUKAhIYDgoAAg4OFRKAqQEOByAC
EoCNDhwEAAEOHAQgAQEKBQAAEoDRCSACARKAwRKA0QUAAg4OHAYgARKAjQ4FIAASgOEKIAYBCA4O
DggQAgggBQIIDg4OCDkHHxKAjQgICA4ODg4OEoC5EoC9EoDBEoDFDh0SGAgIAg4SGAgOEoDVEoDd
AhKA3R0DHRwdEhgIHRxJAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjUBAFQOFEZyYW1ld29y
a0Rpc3BsYXlOYW1lEi5ORVQgRnJhbWV3b3JrIDQuNSgBACNTVF85YTFiNGY3MmYzZDc0ZWM5YTg4
OTQxMzRkOTNlMWVhZQAABQEAAAAAFgEAEUNvcHlyaWdodCBAICAyMDE5AAAIAQAIAAAAAAAeAQAB
AFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBsE0AAAAAAAAAAAAAzk0AAAAgAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAMBNAAAAAAAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/
JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAAAAAYAACA
AAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWGAAALADAAAA
AAAAAAAAALADNAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAABAAAA
AQD1V+AbAAABAPVX4Bs/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBhAHIARgBp
AGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAAsAQQAwAA
AQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAADsAgAAAQAwADAAMAAwADAANABiADAAAABw
ACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBUAF8AOQBhADEAYgA0AGYA
NwAyAGYAMwBkADcANABlAGMAOQBhADgAOAA5ADQAMQAzADQAZAA5ADMAZQAxAGUAYQBlAAAAQAAP
AAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADcAMQAzADYALgAyADIANQAxADcA
AAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8AOQBhADEAYgA0AGYANwAy
AGYAMwBkADcANABlAGMAOQBhADgAOAA5ADQAMQAzADQAZAA5ADMAZQAxAGUAYQBlAC4AZABsAGwA
AABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAg
AEAAIAAgADIAMAAxADkAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAA
UwBUAF8AOQBhADEAYgA0AGYANwAyAGYAMwBkADcANABlAGMAOQBhADgAOAA5ADQAMQAzADQAZAA5
ADMAZQAxAGUAYQBlAC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMA
VABfADkAYQAxAGIANABmADcAMgBmADMAZAA3ADQAZQBjADkAYQA4ADgAOQA0ADEAMwA0AGQAOQAz
AGUAMQBlAGEAZQAAAEQADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4A
NwAxADMANgAuADIAMgA1ADEANwAAAAAASAAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBp
AG8AbgAAADEALgAwAC4ANwAxADMANgAuADIAMgA1ADEANwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAwAAADgPQAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
                </ScriptProject>
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:ForEachVariableMappings>
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{C9972B85-B0DE-422C-99CB-4DCF3A7785E2}"
              DTS:ObjectName="{C9972B85-B0DE-422C-99CB-4DCF3A7785E2}"
              DTS:ValueIndex="0"
              DTS:VariableName="User::intMinConnectTimeId" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{839394D6-6C86-4E63-863B-8A7732F210FD}"
              DTS:ObjectName="{839394D6-6C86-4E63-863B-8A7732F210FD}"
              DTS:ValueIndex="1"
              DTS:VariableName="User::intMaxConnectTimeId" />
          </DTS:ForEachVariableMappings>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Well Loop\Do Formation Queries"
          DTS:CreationName="STOCK:SEQUENCE"
          DTS:Description="Sequence Container"
          DTS:DTSID="{9928d593-58bd-4e47-a26f-bf71610f63cb}"
          DTS:ExecutableType="STOCK:SEQUENCE"
          DTS:LocaleID="-1"
          DTS:ObjectName="Do Formation Queries">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Well Loop\Do Formation Queries\BlackGold Drilling Assembly Component Query"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Get Wells"
              DTS:DTSID="{32671b9e-7145-4337-8d15-0f004226978a}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="BlackGold Drilling Assembly Component Query"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="5">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{B09DFF4B-1666-40D6-850C-21EC437987D1}"
                  SQLTask:BypassPrepare="False"
                  SQLTask:SqlStatementSource="select &#xA;WellDrillAssemblyCompID, &#xA;Assembly_WellDrillAssemblyID,&#xA;ComponentSeqNo,&#xA;iif(ComponentDesc is null,'', ComponentDesc),&#xA;isnull(ComponentCount,1),&#xA;MaxOutsideDiameter,&#xA;MinInsideDiameter,&#xA;ComponentLength,&#xA;wdac.ActiveInd&#xA;from WellDrillAssemblyComp wdac inner join WellDrillAssembly wda on wdac.Assembly_WellDrillAssemblyID = wda.WellDrillAssemblyID&#xA;inner join xref.vWellDrillPeriod vwdp on wda.Tour_WellDrillPeriodID = vwdp.WellDrillPeriodID&#xA;where vwdp.Well_WellID = ?&#xA;"
                  SQLTask:ResultType="ResultSetType_Rowset" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="0"
                    SQLTask:DtsVariableName="User::objDrillAssemblyCompList" />
                  <SQLTask:ParameterBinding
                    SQLTask:ParameterName="0"
                    SQLTask:DtsVariableName="User::intWellId"
                    SQLTask:ParameterDirection="Input"
                    SQLTask:DataType="3"
                    SQLTask:ParameterSize="-1" />
                </SQLTask:SqlTaskData>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Well Loop\Do Formation Queries\BlackGold Drilling Assembly Query"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Get Wells"
              DTS:DTSID="{98633622-1c7b-4f0b-ac50-a2dfb1d3133b}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="BlackGold Drilling Assembly Query"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="5">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{B09DFF4B-1666-40D6-850C-21EC437987D1}"
                  SQLTask:BypassPrepare="False"
                  SQLTask:SqlStatementSource="select WellDrillAssemblyID, Tour_wellDrillPeriodId, AssemblyRefNumber, &#xA;cast(iif(CalculatedLength is null, 0.0, CalculatedLength) as float),&#xA;cast(iif(CalculatedWeight is null, 0.0, CalculatedWeight) as float), ActiveInd&#xA;from WellDrillAssembly &#xA;where Tour_WellDrillPeriodID in &#xA;(select WellDrillPeriodId&#xA;from xref.vWellDrillPeriod &#xA;where well_wellid= ?)"
                  SQLTask:ResultType="ResultSetType_Rowset" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="0"
                    SQLTask:DtsVariableName="User::objDrillingAssemblyList" />
                  <SQLTask:ParameterBinding
                    SQLTask:ParameterName="0"
                    SQLTask:DtsVariableName="User::intWellId"
                    SQLTask:ParameterDirection="Input"
                    SQLTask:DataType="3"
                    SQLTask:ParameterSize="-1" />
                </SQLTask:SqlTaskData>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Well Loop\Do Formation Queries\BlackGold Formation Query"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Get Wells"
              DTS:DTSID="{5152f86a-b201-4d14-8e02-cac24343c96d}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="BlackGold Formation Query"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="5">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{B09DFF4B-1666-40D6-850C-21EC437987D1}"
                  SQLTask:BypassPrepare="False"
                  SQLTask:SqlStatementSource="select WellDrillBitPeriodId, Tour_WellDrillPeriodID, &#xA;cast(cast(StartDateTime as datetime) as varchar(50)), &#xA;cast(cast(EndDateTime as datetime) as varchar(50)), &#xA;DepthDrilledFormation_Ensign, ActiveInd&#xA;  from WellDrillBitPeriod wdbp&#xA;       inner join xref.vWellDrillPeriod wdp on wdbp.Tour_WellDrillPeriodID=wdp.WellDrillPeriodID&#xA;where wdbp.DepthDrilledFormation_Ensign is not null&#xA;  and Tour_WellDrillPeriodID in &#xA;(&#xA;select WellDrillPeriodId&#xA;from xref.vWellDrillPeriod&#xA;where well_wellid = ?&#xA;)&#xA;order by BitIntervalObsNo desc&#xA;"
                  SQLTask:ResultType="ResultSetType_Rowset" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="0"
                    SQLTask:DtsVariableName="User::objFormationList" />
                  <SQLTask:ParameterBinding
                    SQLTask:ParameterName="0"
                    SQLTask:DtsVariableName="User::intWellId"
                    SQLTask:ParameterDirection="Input"
                    SQLTask:DataType="3"
                    SQLTask:ParameterSize="-1" />
                </SQLTask:SqlTaskData>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Well Loop\Do Formation Queries\BlackGold Tour Sheet Query"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Get Wells"
              DTS:DTSID="{b8bd63a7-33d5-4a39-ab58-0e023141e1e3}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="BlackGold Tour Sheet Query"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="5">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{B09DFF4B-1666-40D6-850C-21EC437987D1}"
                  SQLTask:BypassPrepare="False"
                  SQLTask:SqlStatementSource="select WellDrillPeriodId, Well_WellId, Operator_BusinessAssociateID, PeriodObsNo,&#xA;convert(varchar(50), cast (StartDateTime as datetime), 121), convert(varchar(50), cast (EndDateTime as datetime), 121),&#xA;iif(ContractorRepName is null, '', ContractorRepName), iif(OperatorRepName is null, '', OperatorRepName), dbo.fnGetEquipmentIdForRig(ReportedRigName) as RigId, cast(1 as bit) as ActiveInd&#xA;from xref.vWellDrillPeriod &#xA;where well_wellid = ?"
                  SQLTask:ResultType="ResultSetType_Rowset" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="0"
                    SQLTask:DtsVariableName="User::objTourSheetList" />
                  <SQLTask:ParameterBinding
                    SQLTask:ParameterName="0"
                    SQLTask:DtsVariableName="User::intWellId"
                    SQLTask:ParameterDirection="Input"
                    SQLTask:DataType="3"
                    SQLTask:ParameterSize="-1" />
                </SQLTask:SqlTaskData>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Well Loop\Do Formation Queries\BlackGold Tour Sheet Remark Query"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Get Wells"
              DTS:DTSID="{6f0fbbb4-e182-456f-80d0-4c9e2ca197b7}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="BlackGold Tour Sheet Remark Query"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="5">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{B09DFF4B-1666-40D6-850C-21EC437987D1}"
                  SQLTask:BypassPrepare="False"
                  SQLTask:SqlStatementSource="select &#xA;wdpmr.WellDrillPeriodremarkId, wdpmr.Tour_WellDrillPeriodId,  convert(varchar(50), cast(wdpmr.EffectiveDate as datetime), 121), convert(varchar(50), cast(wdpmr.ExpiryDate as datetime), 121), &#xA;iif(wdpmr.Remark is null, '', wdpmr.Remark), rrt.LongName as RemarkType, cast(1 as bit) as ActiveInd, rrt.ShortName as RemarkCode&#xA;from &#xA;xref.vWellDrillPeriod vwdp&#xA;cross apply dbo.[WellDrillPeriodMergedRemarks](vwdp.WellDrillPeriodID) wdpmr&#xA;left outer join rRemarkType rrt on wdpmr.RemarkType_rRemarkTypeID = rrt.rRemarkTypeID&#xA;where vwdp.well_wellid = ?&#xA;and wdpmr.RemarkType_rRemarkTypeID &lt;&gt; 1&#xA;and wdpmr.EffectiveDate is not null&#xA;and wdpmr.ExpiryDate is not null"
                  SQLTask:ResultType="ResultSetType_Rowset" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="0"
                    SQLTask:DtsVariableName="User::objTourSheetRemarkList" />
                  <SQLTask:ParameterBinding
                    SQLTask:ParameterName="0"
                    SQLTask:DtsVariableName="User::intWellId"
                    SQLTask:ParameterDirection="Input"
                    SQLTask:DataType="3"
                    SQLTask:ParameterSize="-1" />
                </SQLTask:SqlTaskData>
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Well Loop\Do Formation Queries.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:DTSID="{a210b760-6fb6-4681-bb41-20120fb0a989}"
              DTS:From="Package\Well Loop\Do Formation Queries\BlackGold Drilling Assembly Component Query"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\Well Loop\Do Formation Queries\BlackGold Drilling Assembly Query" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Well Loop\Do Formation Queries.PrecedenceConstraints[Constraint 1]"
              DTS:CreationName=""
              DTS:DTSID="{32a4a144-8f40-4b8a-96df-26a9a197fcdf}"
              DTS:From="Package\Well Loop\Do Formation Queries\BlackGold Tour Sheet Remark Query"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 1"
              DTS:To="Package\Well Loop\Do Formation Queries\BlackGold Formation Query" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Well Loop\Do Formation Queries.PrecedenceConstraints[Constraint 2]"
              DTS:CreationName=""
              DTS:DTSID="{335ab9b2-9017-4824-8ad8-1d3619cbd515}"
              DTS:From="Package\Well Loop\Do Formation Queries\BlackGold Drilling Assembly Query"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 2"
              DTS:To="Package\Well Loop\Do Formation Queries\BlackGold Tour Sheet Remark Query" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Well Loop\Do Formation Queries.PrecedenceConstraints[Constraint 3]"
              DTS:CreationName=""
              DTS:DTSID="{6d40d9ec-7809-40d9-9e7a-66fd75b58ac4}"
              DTS:From="Package\Well Loop\Do Formation Queries\BlackGold Formation Query"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 3"
              DTS:To="Package\Well Loop\Do Formation Queries\BlackGold Tour Sheet Query" />
          </DTS:PrecedenceConstraints>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Well Loop\Drilling Assembly Component Loop"
          DTS:CreationName="STOCK:FOREACHLOOP"
          DTS:Description="Foreach Loop Container"
          DTS:DTSID="{246cc9cb-4977-415d-9c09-38b36d950c9b}"
          DTS:ExecutableType="STOCK:FOREACHLOOP"
          DTS:LocaleID="-1"
          DTS:MaxErrorCount="6"
          DTS:ObjectName="Drilling Assembly Component Loop">
          <DTS:ForEachEnumerator
            DTS:CreationName="Microsoft.SqlServer.Dts.Runtime.Enumerators.ADO.ForEachADOEnumerator, Microsoft.SqlServer.ForEachADOEnumerator, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
            DTS:DTSID="{62b68d81-d14f-442f-8269-12056d084234}"
            DTS:ObjectName="{4F357A1D-CA44-434A-8085-25C4D1BB103C}">
            <DTS:ObjectData>
              <FEEADO
                EnumType="EnumerateRowsInFirstTable"
                VarName="User::objDrillAssemblyCompList" />
            </DTS:ObjectData>
          </DTS:ForEachEnumerator>
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Well Loop\Drilling Assembly Component Loop\C# Script to Call Data Gumbo Drilling Assembly Component API"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Script Task"
              DTS:DTSID="{8d37cc05-ea56-4611-933c-c5559e282fd7}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="C# Script to Call Data Gumbo Drilling Assembly Component API"
              DTS:ThreadHint="5">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:ObjectData>
                <ScriptProject
                  Name="ST_ffadf0cf30134c18a5d9d4cd2a7ca597"
                  VSTAMajorVersion="3"
                  VSTAMinorVersion="0"
                  Language="CSharp"
                  ReadOnlyVariables="User::boolActiveIndForComponent,User::intComponentCount,User::intComponentSeqNo,User::intWellDrillAssemblyCompId,User::intWellDrillAssemblyIdForComponent,User::objComponentLength,User::objMaxOutsideDiameter,User::objMinInsideDiameter,User::strAccessKey,User::strApiKey,User::strComponentDesc,User::strServerName,System::UserName">
                  <ProjectItem
                    Name="Properties\AssemblyInfo.cs"
                    Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_4b7d66aa7f0e48879058c5aec70b63e3")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_4b7d66aa7f0e48879058c5aec70b63e3")]
[assembly: AssemblyCopyright("Copyright @  2018")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Resources.resx"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
                  <ProjectItem
                    Name="ST_ffadf0cf30134c18a5d9d4cd2a7ca597.csproj"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{EDEC4E4F-65BF-4C1A-ADD0-0497208E0063}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_4b7d66aa7f0e48879058c5aec70b63e3</RootNamespace>
    <AssemblyName>ST_ffadf0cf30134c18a5d9d4cd2a7ca597</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Web.Helpers, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
      <DesignTime>True</DesignTime>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\10.0\InstallDir#\devenv.exe" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
                  <ProjectItem
                    Name="ScriptMain.cs"
                    Encoding="UTF8"><![CDATA[using System.Net;
using System.IO;
using System.Text;
using System.Web;
using System.Web.Helpers;
using System.Linq;
using System.Text.RegularExpressions;

#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion

namespace ST_4b7d66aa7f0e48879058c5aec70b63e3
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            StringBuilder logMessage = new StringBuilder();
            try
            {
                bool fireAgain = false;
                int drillingAssemblyComponentId = (int)Dts.Variables["User::intWellDrillAssemblyCompId"].Value;
                logMessage.AppendFormat("Processing drilling assembly component with id {0}.", drillingAssemblyComponentId);
                int drillingAssemblyId = (int)Dts.Variables["User::intWellDrillAssemblyIdForComponent"].Value;
                int seqNo = (int)Dts.Variables["User::intComponentSeqNo"].Value;
                string description = (String)Dts.Variables["User::strComponentDesc"].Value;
                int componentCount = (int)Dts.Variables["User::intComponentCount"].Value;
    //            double? maxOutsideDiameter = String.IsNullOrEmpty(Dts.Variables["User::maxOutsideDiameter"].Value.ToString()) ? null : (DateTime?)Convert.ToDateTime(Dts.Variables["User::objStartDateTime"].Value.ToString());

                double? maxOutsideDiameter = DBNull.Value.Equals(Dts.Variables["User::objMaxOutsideDiameter"].Value) ? null : (double?)Convert.ToDouble(Dts.Variables["User::objMaxOutsideDiameter"].Value);
                double? minInsideDiameter = DBNull.Value.Equals(Dts.Variables["User::objMinInsideDiameter"].Value) ? null : (double?)Convert.ToDouble(Dts.Variables["User::objMinInsideDiameter"].Value);
                double? componentLength = DBNull.Value.Equals(Dts.Variables["User::objComponentLength"].Value) ? null : (double?)Convert.ToDouble(Dts.Variables["User::objComponentLength"].Value);
                bool activeInd = (bool)Dts.Variables["User::boolActiveIndForComponent"].Value;

                string serverName = (String)Dts.Variables["User::strServerName"].Value;
                string apiKey = (String)Dts.Variables["User::strApiKey"].Value;
                string accessKey = (String)Dts.Variables["User::strAccessKey"].Value;
                string currentUserId = (String)Dts.Variables["System::UserName"].Value;

                if (currentUserId != null)
                {
                    currentUserId = currentUserId.Split('\\').Last();
                }

                ServicePointManager.ServerCertificateValidationCallback = delegate { return true; };
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls | SecurityProtocolType.Ssl3;

                string url = string.Format("https://{0}/api/drillingAssemblyComponent/{1}?apikey={2}&accesskey={3}", serverName, drillingAssemblyComponentId, apiKey, accessKey);
                url = url.Replace(" ", "%20");
                url = url.Replace("$", "%24");

                DateTime now = DateTime.Now;
                DrillingAssemblyComponent existingComponent = GetExistingDrillingAssemblyComponent(drillingAssemblyComponentId, serverName, apiKey, accessKey);

                if (existingComponent == null)
                {
                    logMessage.Append(" Not found - will insert."); 
                    existingComponent = new DrillingAssemblyComponent();
                    existingComponent.drillingAssemblyComponentId = drillingAssemblyComponentId;
                }
                else
                {
                    logMessage.Append(" Entity found - will check if update is required.");
                }

                if (existingComponent.Apply(drillingAssemblyId, seqNo, description, componentCount, maxOutsideDiameter, minInsideDiameter, componentLength, activeInd, currentUserId))
                {
                    int retries = 2;
                    while (retries > 0)
                    {
                        try
                        {
                            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                            logMessage.Append(" Attempting write to DataGumbo API.");
                            string gumboPayload = Json.Encode(existingComponent);

                            request.Method = "PUT";
                            request.ContentType = "application/json";
                            gumboPayload = EncodeNonAsciiCharacters(gumboPayload);
                            request.ContentLength = gumboPayload.Length;
                            StreamWriter requestWriter = new StreamWriter(request.GetRequestStream(), System.Text.Encoding.ASCII);
                            requestWriter.Write(gumboPayload);
                            requestWriter.Close();

                            WebResponse webResponse = request.GetResponse();
                            Stream webStream = webResponse.GetResponseStream();
                            StreamReader responseReader = new StreamReader(webStream);
                            string response = responseReader.ReadToEnd();
                            responseReader.Close();
                            retries = 0; // indicate success
                        }
                        catch (Exception e)
                        {
                            retries--;
                            if (retries > 0)
                            {
                                logMessage.Append(string.Format(" HTTP put failed with exception {0}. Will retry.", e.Message));
                            }
                            else
                            {
                                throw e;
                            }
                        }
                    }
                }
                else
                {
                    logMessage.Append(" No update required.");
                }
                Dts.TaskResult = (int)ScriptResults.Success;
                logMessage.Append("  Returning Success.");
                Dts.Events.FireInformation(0, "Gumbo SSIS", logMessage.ToString(), string.Empty, 0, ref fireAgain);
            }
            catch (Exception e)
            {
                logMessage.AppendFormat("  Encountered error: {0}.", e.Message);
                Dts.Events.FireError(0, "Gumbo SSIS", logMessage.ToString(), string.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        private DrillingAssemblyComponent GetExistingDrillingAssemblyComponent(int tourSheetFormationId, string serverName, string apiKey, string accessKey)
        {
            try
            {
                string url = string.Format("https://{0}/api/drillingAssemblyComponent/{1}?apikey={2}&accesskey={3}", serverName, tourSheetFormationId, apiKey, accessKey);
                url = url.Replace(" ", "%20");
                url = url.Replace("$", "%24");
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                WebResponse webResponse = request.GetResponse();
                Stream webStream = webResponse.GetResponseStream();
                StreamReader responseReader = new StreamReader(webStream);
                string response = responseReader.ReadToEnd();
                responseReader.Close();
                DrillingAssemblyComponent tourSheetFormation = Json.Decode<DrillingAssemblyComponent>(response);
                return tourSheetFormation;
            }
            catch (Exception e)
            {
                return null;
            }
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        #region data class
        class DrillingAssemblyComponent
        {
            public int drillingAssemblyComponentId { get; set; }
            public int drillingAssemblyId { get; set; }
            public int seqNo { get; set; }
            public string description { get; set; }
            public int componentCount { get; set; }
            public double? maxOutsideDiameter { get; set; }
            public double? minInsideDiameter { get; set; }
            public double? componentLength { get; set; }
            public bool activeInd { get; set; }
            public string rowCreatedBy { get; set; }
            public string rowChangedBy { get; set; }
            public DateTime? rowCreatedDate { get; set; }
            public DateTime? rowChangedDate { get; set; }

            public bool Apply(int _drillingAssemblyId, int _seqNo, string _description, int _componentCount, double? _maxOutsideDiameter,
                double? _minInsideDiameter, double? _componentLength, bool _activeInd, string currentUserId)
            {
                bool ret = false;
                if (rowCreatedBy == null)
                {
                    rowCreatedBy = currentUserId;
                    ret = true;
                }
                if (rowCreatedDate == null)
                {
                    rowCreatedDate = DateTime.Now;
                    ret = true;
                }
                if (drillingAssemblyId != _drillingAssemblyId)
                {
                    drillingAssemblyId = _drillingAssemblyId;
                    ret = true;
                }
                if (seqNo != _seqNo)
                {
                    seqNo = _seqNo;
                    ret = true;
                }
                if (description != _description)
                {
                    description = _description;
                    ret = true;
                }
                if (componentCount != _componentCount)
                {
                    componentCount = _componentCount;
                    ret = true;
                }
                if (maxOutsideDiameter != _maxOutsideDiameter)
                {
                    maxOutsideDiameter = _maxOutsideDiameter;
                    ret = true;
                }
                if (minInsideDiameter != _minInsideDiameter)
                {
                    minInsideDiameter = _minInsideDiameter;
                    ret = true;
                }
                if (componentLength != _componentLength)
                {
                    componentLength = _componentLength;
                    ret = true;
                }
                if (activeInd != _activeInd)
                {
                    activeInd = _activeInd;
                    ret = true;
                }
                if (ret)
                {
                    rowChangedBy = currentUserId;
                    rowChangedDate = DateTime.Now;
                }
                return ret;
            }
        }
        #endregion

        public static string EncodeNonAsciiCharacters(string value)
        {
            return Regex.Replace(value, @"[^\x00-\x7F]", c => string.Format(@"\u{0:x4}", (int)c.Value[0]));
        }
    }
}]]></ProjectItem>
                  <ProjectItem
                    Name="Project"
                    Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_4b7d66aa7f0e48879058c5aec70b63e3</msb:CodeName>
		<msb:DisplayName>ST_4b7d66aa7f0e48879058c5aec70b63e3</msb:DisplayName>
		<msb:ProjectId>{01D0D339-FD75-421A-A29B-66DAB49E16CD}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_ffadf0cf30134c18a5d9d4cd2a7ca597.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_4b7d66aa7f0e48879058c5aec70b63e3.Properties.Settings.get_Default():ST_4b7d66aa7f0e48879058c5aec70b63e3.Properties.Sett" +
    "ings")]

namespace ST_4b7d66aa7f0e48879058c5aec70b63e3.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.settings"
                    Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Resources.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_4b7d66aa7f0e48879058c5aec70b63e3.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_4b7d66aa7f0e48879058c5aec70b63e3.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_4b7d66aa7f0e48879058c5aec70b63e3.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_4b7d66aa7f0e48879058c5aec70b63e3.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_4b7d66aa7f0e48879058c5aec70b63e3.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
                  <BinaryItem
                    Name="ST_ffadf0cf30134c18a5d9d4cd2a7ca597.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAMJ23FwAAAAAAAAAAOAAAiELAQsAADAAAAAIAAAAAAAALk8A
AAAgAAAAYAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACgAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAANROAABXAAAAAGAAAAgEAAAAAAAAAAAAAAAAAAAA
AAAAAIAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAANC8AAAAgAAAAMAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAAgEAAAAYAAAAAYAAAAyAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAIAAAAACAAAAOAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAAQ
TwAAAAAAAEgAAAACAAUACCoAAMwkAAABAAAAAAAAAFApAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKA4AAAoqEzACAC0AAAABAAARfgEAAAQtIHIBAABw0AIA
AAIoDwAACm8QAAAKcxEAAAoKBoABAAAEfgEAAAQqGn4CAAAEKh4CgAIAAAQqGn4DAAAEKi5zBgAA
BoADAAAEKh4CKBQAAAoqChcqAAAbMAoA4wQAAAIAABFzFgAACgoWCwIoFwAACm8YAAAKcnMAAHBv
GQAACm8aAAAKpSUAAAEMBnK1AABwCIwlAAABbxsAAAomAigXAAAKbxgAAApyHQEAcG8ZAAAKbxoA
AAqlJQAAAQ0CKBcAAApvGAAACnJvAQBwbxkAAApvGgAACqUlAAABEwQCKBcAAApvGAAACnKfAQBw
bxkAAApvGgAACnQmAAABEwUCKBcAAApvGAAACnLNAQBwbxkAAApvGgAACqUlAAABEwZ+HAAACgIo
FwAACm8YAAAKcv0BAHBvGQAACm8aAAAKbx0AAAotJgIoFwAACm8YAAAKcv0BAHBvGQAACm8aAAAK
KB4AAApzHwAACisKEhr+FQEAABsRGhMHfhwAAAoCKBcAAApvGAAACnI1AgBwbxkAAApvGgAACm8d
AAAKLSYCKBcAAApvGAAACnI1AgBwbxkAAApvGgAACigeAAAKcx8AAAorChIb/hUBAAAbERsTCH4c
AAAKAigXAAAKbxgAAApyawIAcG8ZAAAKbxoAAApvHQAACi0mAigXAAAKbxgAAApyawIAcG8ZAAAK
bxoAAAooHgAACnMfAAAKKwoSHP4VAQAAGxEcEwkCKBcAAApvGAAACnKdAgBwbxkAAApvGgAACqUp
AAABEwoCKBcAAApvGAAACnLdAgBwbxkAAApvGgAACnQmAAABEwsCKBcAAApvGAAACnIFAwBwbxkA
AApvGgAACnQmAAABEwwCKBcAAApvGAAACnIlAwBwbxkAAApvGgAACnQmAAABEw0CKBcAAApvGAAA
CnJLAwBwbxkAAApvGgAACnQmAAABEw4RDiweEQ4XjSoAAAETHREdFh9cnREdbyAAAAooAQAAKxMO
fgQAAAQtERT+BgwAAAZzIgAACoAEAAAEfgQAAAQoIwAACiDwDAAAKCQAAApybQMAcBqNAQAAARMe
ER4WEQuiER4XCIwlAAABohEeGBEMohEeGRENohEeKCUAAAoTDxEPcvwDAHByAAQAcG8mAAAKEw8R
D3IIBABwcgwEAHBvJgAAChMPKCcAAAomAggRCxEMEQ0oCQAABhMQERAtHQZyFAQAcG8oAAAKJnMp
AAAGExAREAhvDwAABisMBnJIBABwbygAAAomERAJEQQRBREGEQcRCBEJEQoRDm8oAAAGOeMAAAAY
ExE40QAAABEPKCkAAAp0MAAAARMSBnKsBABwbygAAAomERAoKgAAChMTERJy9AQAcG8rAAAKERJy
/AQAcG8sAAAKERMoCgAABhMTERIRE28tAAAKam8uAAAKERJvLwAACigwAAAKczEAAAoTFBEUERNv
MgAAChEUbzMAAAoREm80AAAKExURFW81AAAKExYRFnM2AAAKExcRF283AAAKJhEXbzgAAAoWExHe
LBMYEREXWRMREREWMRoGch4FAHARGG85AAAKKDoAAApvKAAACiYrAxEYet4AEREWPSf///8rDAZy
gAUAcG8oAAAKJgIoFwAAChZvOwAACgZyqgUAcG8oAAAKJgIoFwAACm88AAAKFnLUBQBwBm89AAAK
fj4AAAoWEgFvPwAACt5GExkGcuoFAHARGW85AAAKbxsAAAomAigXAAAKbzwAAAoWctQFAHAGbz0A
AAp+PgAAChZvQAAACiYCKBcAAAoXbzsAAAreACoAQTQAAAAAAAB3AwAApQAAABwEAAAsAAAAOQAA
AQAAAAAGAAAAlgQAAJwEAABGAAAAOQAAARswBACbAAAAAwAAEXJtAwBwGo0BAAABEwgRCBYEohEI
FwOMJQAAAaIRCBgFohEIGQ4EohEIKCUAAAoKBnL8AwBwcgAEAHBvJgAACgoGcggEAHByDAQAcG8m
AAAKCgYoKQAACnQwAAABCwdvNAAACgwIbzUAAAoNCXM2AAAKEwQRBG83AAAKEwURBG84AAAKEQUo
AgAAKxMGEQYTB94GJhQTB94AEQcqAAEQAAAAAAAAkpIABjkAAAFych4GAHACb0IAAAoWb0MAAAqM
JQAAASg6AAAKKqYCcjAGAHB+BQAABC0RFP4GDQAABnNEAAAKgAUAAAR+BQAABChFAAAKKh4CKEYA
AAoqHgJ7CQAABCoiAgN9CQAABCoeAnsKAAAEKiICA30KAAAEKh4CewsAAAQqIgIDfQsAAAQqHgJ7
DAAABCoiAgN9DAAABCoeAnsNAAAEKiICA30NAAAEKh4Cew4AAAQqIgIDfQ4AAAQqHgJ7DwAABCoi
AgN9DwAABCoeAnsQAAAEKiICA30QAAAEKh4CexEAAAQqIgIDfREAAAQqHgJ7EgAABCoiAgN9EgAA
BCoeAnsTAAAEKiICA30TAAAEKh4CexQAAAQqIgIDfRQAAAQqHgJ7FQAABCoiAgN9FQAABCoTMAIA
dAEAAAQAABEWCgIoIAAABi0KAg4JKCEAAAYXCgIoJAAABgsSAShHAAAKLRICKCcAAApzSAAACigl
AAAGFwoCKBAAAAYDLgkCAygRAAAGFwoCKBIAAAYELgkCBCgTAAAGFwoCKBQAAAYFKEkAAAosCQIF
KBUAAAYXCgIoFgAABg4ELgoCDgQoFwAABhcKAigYAAAGDA4FDRICKEoAAApsEgMoSgAACmwzFRIC
KEsAAAoSAyhLAAAK/gEW/gErARcsCgIOBSgZAAAGFwoCKBoAAAYTBA4GEwUSBChKAAAKbBIFKEoA
AApsMxUSBChLAAAKEgUoSwAACv4BFv4BKwEXLAoCDgYoGwAABhcKAigcAAAGEwYOBxMHEgYoSgAA
CmwSByhKAAAKbDMVEgYoSwAAChIHKEsAAAr+ARb+ASsBFywKAg4HKB0AAAYXCgIoHgAABg4ILgoC
DggoHwAABhcKBiwYAg4JKCMAAAYCKCcAAApzSAAACignAAAGBioeAigOAAAKKrQAAADOyu++AQAA
AJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249
NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5
I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQA
AABCU0pCAQABAAAAAAAMAAAAdjQuMC4zMDMxOQAAAAAFAGwAAAC8CgAAI34AACgLAADEDwAAI1N0
cmluZ3MAAAAA7BoAAEwGAAAjVVMAOCEAABAAAAAjR1VJRAAAAEghAACEAwAAI0Jsb2IAAAAAAAAA
AgAAAVcdogkJCwAAAPolMwAWAAABAAAAPgAAAAYAAAAVAAAAKQAAACEAAABLAAAAAgAAADoAAAAE
AAAAAwAAABAAAAAeAAAAAgAAAAEAAAAGAAAAAQAAAAIAAAACAAAAAAAKAAEAAAAAAAYA2wDUAAoA
9wDiAA4AVwEuAQYAcwHUAAYAiQF4AQYAugGlAQYAVwPUAAYARATUAAYA5AfKBwYADwj9BwYAJgj9
BwYAQwj9BwYAYgj9BwYAewj9BwYAlAj9BwYArwj9BwYAygj9BwYA4wj9BwYAHAn8CAYAPAn8CAYA
kQl+CQYArgnUAAYAswnUAAYA1wn9BwoAAwrtCQoAHArtCQYAMQr8CA4AUwouAQYAowp1CgoAswp1
CgoA0Qq9CgoACAu9CgYAXwtTCw4AbQsuARIAxgumCxIA3gumCwYA+gvUAAYADQzUAAYAFAzUAAYA
KAzUAAYAOQzUAAYAQQzUABYAZAxYDAYAigxvDAoAqAydDAoA5AydDAoALA2dDAoAPg2dDBoAYA1N
DQYArg2kDQYAxg1TCwYA2Q2kDQYA5g2kDQoA/Q2dDAYAJw6kDQYANA6kDQYASQ7UAA4Abg4uAQoA
3A69DgoAAw+9DgoAOQ+9DgoASw+9DgAAAAABAAAAAAABAAEAAAAQADIAPAAFAAEAAQAAARAAawA8
AAkAAwAFAAEAEAB0AH8ADQAEAAgAAwEAAKMAAAARAAYADgADABAAsQAAAAUACQAOABEAmQETABEA
xgEXABEAEAI5ABEALAsmAREAEg9+AgYGdwJVAFaAfwJYAFaAhwJYAAEAnwRVAAEAzARVAAEA8ARV
AAEABwW+AAEAJAVVAAEARAXBAAEAaAXBAAEAiwXBAAEArAXIAAEAxwW+AAEA5QW+AAEAAwbLAAEA
IwbLAFAgAAAAAIMY1gEbAAEAWCAAAAAAkwjcAR8AAQCRIAAAAACTCPABJAABAJggAAAAAJMI/AEp
AAEAoCAAAAAAlgggAj0AAgCzIAAAAACGGNYBGwACAKcgAAAAAJEYTAoXAQIAwCAAAAAAhgA0AhsA
AgDkJQAAAACBADkCRwACALkmAAAAAJYAXgJQAAYA4yYAAAAAhhjWARsABwC7IAAAAACRAOEKGwEH
AJwmAAAAAJEA4g53AgsA6yYAAAAAhgiPAmYADADzJgAAAACGCK8CagAMAPwmAAAAAIYIzwJmAA0A
BCcAAAAAhgjmAmoADQANJwAAAACGCP0CZgAOABUnAAAAAIYIBwNqAA4AHicAAAAAhggRA28ADwAm
JwAAAACGCCEDcwAPAC8nAAAAAIYIMQNmABAANycAAAAAhghEA2oAEABAJwAAAACGCGIDeAARAEgn
AAAAAIYIeQOAABEAUScAAAAAhgiQA3gAEgBZJwAAAACGCKYDgAASAGInAAAAAIYIvAN4ABMAaicA
AAAAhgjQA4AAEwBzJwAAAACGCOQDiQAUAHsnAAAAAIYI8gONABQAhCcAAAAAhggABG8AFQCMJwAA
AACGCBEEcwAVAJUnAAAAAIYIIgRvABYAnScAAAAAhggzBHMAFgCmJwAAAACGCE0EkgAXAK4nAAAA
AIYIYASbABcAtycAAAAAhghzBJIAGAC/JwAAAACGCIYEmwAYAMgnAAAAAIYAmQSlABkASCkAAAAA
hhjWARsAIgAAAAEACgcAAAEAEAcAAAIAJQcAAAMAMAcAAAQANwcAAAEACgcAAAEA7AoAAAIA8woA
AAMA+goAAAQAAQsAAAEAAQ8AAAEACgcAAAEACgcAAAEACgcAAAEACgcAAAEACgcAAAEACgcAAAEA
CgcAAAEACgcAAAEACgcAAAEACgcAAAEACgcAAAEACgcAAAEACgcAAAEAQQcAAAIAVQcAAAMAXAcA
AAQAaQcAAAUAeQcAAAYAjQcAAAcAoAcAAAgAsQcAAAkAvAdJANYBcwBRANYBcwBZANYBcwBhANYB
cwBpANYBcwBxANYBcwB5ANYBcwCBANYBcwCJANYBcwCRANYBcwCZANYBagChANYBGwCpANYBGwAJ
ANYBGwCxAMUJ8ACxAOAJ9wApANYB/ADJANYBCAHZANYBGwARANYBGwDhANYBGwAJAdYBGwAZAH8L
KwERAdALMQEZAecLNwEhAfALPgEJAQAMQgE5ARsMSgEJACEMTwFBATAMVAEMANYBXwExAUYMZQFZ
AZgMbAEBAdYBfQFpAbwMgwFpAfkMigExAQ4NkQExARUNmAFBAB0NngEJASUNowF5ATcNqgGJAWUN
ugF5AWwNcwB5AXcNcwAxAYcNZgB5AZINvwF5AbUNxAGZAc8NygGhAdYB0AGpAfENcwCpAfcNGwB5
AQkO2gGxARUOxAG5AdYB4AHBAT8ObwDBAfcNGwDJAVMObwAxAQ4N5wERAV8OagARAYIO7QEJAI0O
bwAxAZYOvgDRAZwO8wHRAawO/gGJAbYOVALpAfALbwAxAUEPgwLhAdYBfQHxARUNiAIZANYBGwAU
AFEPiQAUANYBXwExAV4PmAIMAGwPngIMAFEPiQAIABwAXAAIACAAYQApAJMADgEuADsARAMuAFsA
WwMuADMAFQMuAEMAPgMuAGMAZAMuABMAFQMuAAsAywIuABsAPgMuACMAPgMuACsAPgNDAGsAYQBJ
AJMADgFhAJsAYQCBAJsAYQCDAKsAYQChAJsAYQAhAZsAYQBBAZsAYQBhAZsAYQCAAZsAYQCBAZsA
YQCgAZsAYQChAZsAYQDAAZsAYQDBAZsAYQDgAZsAYQDhAZsAYQAAApsAYQABApsAYQAgApsAYQAh
ApsAYQBAApsAYQBBApsAYQBgApsAYQBhApsAYQCAApsAYQCBApsAYQCgApsAYQChApsAYQDAApsA
YQDgApsAYQAAA5sAYQAgA5sAYQBAA5sAYQBgA5sAYQCAA5sAYQCgA5sAYQDAA5sAYQDgA5sAYQAA
BJsAYQAgBJsAYQBABJsAYQBgBJsAYQCABJsAYQCgBJsAYQDABJsAYQDgBJsAYQADAQcCYAKjAgIA
AQADAAMABgAEAAAAiQEvAAAACAI0AAAALAJCAAAAQwbTAAAAXwbTAAAAcgbTAAAAeAbXAAAAhAbT
AAAAkwbbAAAApgbbAAAAuAbbAAAAyAbjAAAA0gbXAAAA3wbXAAAA7AbnAAAA+wbnAAIAAgADAAEA
BAAFAAIAAwAFAAIABQAHAAIADgAJAAEADwAJAAIAEAALAAEAEQALAAIAEgANAAEAEwANAAIAFAAP
AAEAFQAPAAIAFgARAAEAFwARAAIAGAATAAEAGQATAAIAGgAVAAEAGwAVAAIAHAAXAAEAHQAXAAIA
HgAZAAEAHwAZAAIAIAAbAAEAIQAbAAIAIgAdAAEAIwAdAAIAJAAfAAEAJQAfAAIAJgAhAAEAJwAh
AFkBkQIEgAAAAQAAAKIb6V4AAAAAAABaCQAABAAAAAAAAAAAAAAAAQDLAAAAAAAEAAAAAAAAAAAA
AAABANQAAAAAAAsAAAAAAAAAAAAAAAoADwEAAAAACwAAAAAAAAAAAAAACgCHCwAAAAAEAAAAAAAA
AAAAAAABAEwMAAAAAAEAAAAAAAAAAAAAALEBTQ0AAAAAAAAAAAEAAAB+DwAABQAEAAYABABDAHkB
gwBbAgAAAAAAPE1vZHVsZT4AU1RfZmZhZGYwY2YzMDEzNGMxOGE1ZDlkNGNkMmE3Y2E1OTcuZGxs
AFJlc291cmNlcwBTVF80YjdkNjZhYTdmMGU0ODg3OTA1OGM1YWVjNzBiNjNlMy5Qcm9wZXJ0aWVz
AFNldHRpbmdzAFNjcmlwdE1haW4AU1RfNGI3ZDY2YWE3ZjBlNDg4NzkwNThjNWFlYzcwYjYzZTMA
U2NyaXB0UmVzdWx0cwBEcmlsbGluZ0Fzc2VtYmx5Q29tcG9uZW50AG1zY29ybGliAFN5c3RlbQBP
YmplY3QAU3lzdGVtLkNvbmZpZ3VyYXRpb24AQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UATWljcm9z
b2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNj
cmlwdFRhc2sAVlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAEVudW0AU3lzdGVtLlJlc291cmNl
cwBSZXNvdXJjZU1hbmFnZXIAcmVzb3VyY2VNYW4AU3lzdGVtLkdsb2JhbGl6YXRpb24AQ3VsdHVy
ZUluZm8AcmVzb3VyY2VDdWx0dXJlAC5jdG9yAGdldF9SZXNvdXJjZU1hbmFnZXIAZ2V0X0N1bHR1
cmUAc2V0X0N1bHR1cmUAQ3VsdHVyZQBkZWZhdWx0SW5zdGFuY2UAZ2V0X0RlZmF1bHQARGVmYXVs
dABNYWluAEdldEV4aXN0aW5nRHJpbGxpbmdBc3NlbWJseUNvbXBvbmVudABFbmNvZGVOb25Bc2Np
aUNoYXJhY3RlcnMAdmFsdWVfXwBTdWNjZXNzAEZhaWx1cmUAZ2V0X2RyaWxsaW5nQXNzZW1ibHlD
b21wb25lbnRJZABzZXRfZHJpbGxpbmdBc3NlbWJseUNvbXBvbmVudElkAGdldF9kcmlsbGluZ0Fz
c2VtYmx5SWQAc2V0X2RyaWxsaW5nQXNzZW1ibHlJZABnZXRfc2VxTm8Ac2V0X3NlcU5vAGdldF9k
ZXNjcmlwdGlvbgBzZXRfZGVzY3JpcHRpb24AZ2V0X2NvbXBvbmVudENvdW50AHNldF9jb21wb25l
bnRDb3VudABOdWxsYWJsZWAxAGdldF9tYXhPdXRzaWRlRGlhbWV0ZXIAc2V0X21heE91dHNpZGVE
aWFtZXRlcgBnZXRfbWluSW5zaWRlRGlhbWV0ZXIAc2V0X21pbkluc2lkZURpYW1ldGVyAGdldF9j
b21wb25lbnRMZW5ndGgAc2V0X2NvbXBvbmVudExlbmd0aABnZXRfYWN0aXZlSW5kAHNldF9hY3Rp
dmVJbmQAZ2V0X3Jvd0NyZWF0ZWRCeQBzZXRfcm93Q3JlYXRlZEJ5AGdldF9yb3dDaGFuZ2VkQnkA
c2V0X3Jvd0NoYW5nZWRCeQBEYXRlVGltZQBnZXRfcm93Q3JlYXRlZERhdGUAc2V0X3Jvd0NyZWF0
ZWREYXRlAGdldF9yb3dDaGFuZ2VkRGF0ZQBzZXRfcm93Q2hhbmdlZERhdGUAQXBwbHkAPGRyaWxs
aW5nQXNzZW1ibHlDb21wb25lbnRJZD5rX19CYWNraW5nRmllbGQAPGRyaWxsaW5nQXNzZW1ibHlJ
ZD5rX19CYWNraW5nRmllbGQAPHNlcU5vPmtfX0JhY2tpbmdGaWVsZAA8ZGVzY3JpcHRpb24+a19f
QmFja2luZ0ZpZWxkADxjb21wb25lbnRDb3VudD5rX19CYWNraW5nRmllbGQAPG1heE91dHNpZGVE
aWFtZXRlcj5rX19CYWNraW5nRmllbGQAPG1pbkluc2lkZURpYW1ldGVyPmtfX0JhY2tpbmdGaWVs
ZAA8Y29tcG9uZW50TGVuZ3RoPmtfX0JhY2tpbmdGaWVsZAA8YWN0aXZlSW5kPmtfX0JhY2tpbmdG
aWVsZAA8cm93Q3JlYXRlZEJ5PmtfX0JhY2tpbmdGaWVsZAA8cm93Q2hhbmdlZEJ5PmtfX0JhY2tp
bmdGaWVsZAA8cm93Q3JlYXRlZERhdGU+a19fQmFja2luZ0ZpZWxkADxyb3dDaGFuZ2VkRGF0ZT5r
X19CYWNraW5nRmllbGQAZHJpbGxpbmdBc3NlbWJseUNvbXBvbmVudElkAGRyaWxsaW5nQXNzZW1i
bHlJZABzZXFObwBkZXNjcmlwdGlvbgBjb21wb25lbnRDb3VudABtYXhPdXRzaWRlRGlhbWV0ZXIA
bWluSW5zaWRlRGlhbWV0ZXIAY29tcG9uZW50TGVuZ3RoAGFjdGl2ZUluZAByb3dDcmVhdGVkQnkA
cm93Q2hhbmdlZEJ5AHJvd0NyZWF0ZWREYXRlAHJvd0NoYW5nZWREYXRlAHZhbHVlAHRvdXJTaGVl
dEZvcm1hdGlvbklkAHNlcnZlck5hbWUAYXBpS2V5AGFjY2Vzc0tleQBfZHJpbGxpbmdBc3NlbWJs
eUlkAF9zZXFObwBfZGVzY3JpcHRpb24AX2NvbXBvbmVudENvdW50AF9tYXhPdXRzaWRlRGlhbWV0
ZXIAX21pbkluc2lkZURpYW1ldGVyAF9jb21wb25lbnRMZW5ndGgAX2FjdGl2ZUluZABjdXJyZW50
VXNlcklkAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRl
AFN5c3RlbS5SZWZsZWN0aW9uAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlw
dGlvbkF0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb21w
YW55QXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0
dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBBc3NlbWJseUN1bHR1cmVBdHRyaWJ1
dGUAQXNzZW1ibHlWZXJzaW9uQXR0cmlidXRlAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2Vydmlj
ZXMAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0
dHJpYnV0ZQBTVF9mZmFkZjBjZjMwMTM0YzE4YTVkOWQ0Y2QyYTdjYTU5NwBTeXN0ZW0uRGlhZ25v
c3RpY3MARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBUeXBlAFJ1bnRpbWVUeXBlSGFuZGxl
AEdldFR5cGVGcm9tSGFuZGxlAEFzc2VtYmx5AGdldF9Bc3NlbWJseQBTeXN0ZW0uQ29tcG9uZW50
TW9kZWwARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZVN0YXRlAENvbXBp
bGVyR2VuZXJhdGVkQXR0cmlidXRlAC5jY3RvcgBTU0lTU2NyaXB0VGFza0VudHJ5UG9pbnRBdHRy
aWJ1dGUAU3lzdGVtLlNlY3VyaXR5LkNyeXB0b2dyYXBoeS5YNTA5Q2VydGlmaWNhdGVzAFg1MDlD
ZXJ0aWZpY2F0ZQBYNTA5Q2hhaW4AU3lzdGVtLk5ldC5TZWN1cml0eQBTc2xQb2xpY3lFcnJvcnMA
PE1haW4+Yl9fMABwYXJhbTAAcGFyYW0xAHBhcmFtMgBwYXJhbTMAUmVtb3RlQ2VydGlmaWNhdGVW
YWxpZGF0aW9uQ2FsbGJhY2sAQ1MkPD45X19DYWNoZWRBbm9ueW1vdXNNZXRob2REZWxlZ2F0ZTEA
U3lzdGVtLlRleHQAU3RyaW5nQnVpbGRlcgBTY3JpcHRPYmplY3RNb2RlbABnZXRfRHRzAE1pY3Jv
c29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1l
AFZhcmlhYmxlcwBnZXRfVmFyaWFibGVzAFZhcmlhYmxlAGdldF9JdGVtAGdldF9WYWx1ZQBJbnQz
MgBBcHBlbmRGb3JtYXQAU3RyaW5nAERCTnVsbABWYWx1ZQBFcXVhbHMAQ29udmVydABUb0RvdWJs
ZQBCb29sZWFuAENoYXIAU3BsaXQAU3lzdGVtLkNvcmUAU3lzdGVtLkxpbnEARW51bWVyYWJsZQBT
eXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYwBJRW51bWVyYWJsZWAxAExhc3QAU3lzdGVtLk5ldABT
ZXJ2aWNlUG9pbnRNYW5hZ2VyAHNldF9TZXJ2ZXJDZXJ0aWZpY2F0ZVZhbGlkYXRpb25DYWxsYmFj
awBTZWN1cml0eVByb3RvY29sVHlwZQBzZXRfU2VjdXJpdHlQcm90b2NvbABGb3JtYXQAUmVwbGFj
ZQBnZXRfTm93AEFwcGVuZABXZWJSZXF1ZXN0AENyZWF0ZQBIdHRwV2ViUmVxdWVzdABTeXN0ZW0u
V2ViLkhlbHBlcnMASnNvbgBFbmNvZGUAc2V0X01ldGhvZABzZXRfQ29udGVudFR5cGUAZ2V0X0xl
bmd0aABzZXRfQ29udGVudExlbmd0aABTeXN0ZW0uSU8AU3RyZWFtAEdldFJlcXVlc3RTdHJlYW0A
RW5jb2RpbmcAZ2V0X0FTQ0lJAFN0cmVhbVdyaXRlcgBUZXh0V3JpdGVyAFdyaXRlAENsb3NlAFdl
YlJlc3BvbnNlAEdldFJlc3BvbnNlAEdldFJlc3BvbnNlU3RyZWFtAFN0cmVhbVJlYWRlcgBUZXh0
UmVhZGVyAFJlYWRUb0VuZABFeGNlcHRpb24AZ2V0X01lc3NhZ2UAc2V0X1Rhc2tSZXN1bHQARXZl
bnRzT2JqZWN0V3JhcHBlcgBnZXRfRXZlbnRzAFRvU3RyaW5nAEVtcHR5AEZpcmVJbmZvcm1hdGlv
bgBGaXJlRXJyb3IARGVjb2RlAFN5c3RlbS5UZXh0LlJlZ3VsYXJFeHByZXNzaW9ucwBNYXRjaAA8
RW5jb2RlTm9uQXNjaWlDaGFyYWN0ZXJzPmJfXzIAYwBNYXRjaEV2YWx1YXRvcgBDUyQ8PjlfX0Nh
Y2hlZEFub255bW91c01ldGhvZERlbGVnYXRlMwBDYXB0dXJlAGdldF9DaGFycwBSZWdleABnZXRf
SGFzVmFsdWUAb3BfSW5lcXVhbGl0eQBHZXRWYWx1ZU9yRGVmYXVsdABTVF80YjdkNjZhYTdmMGU0
ODg3OTA1OGM1YWVjNzBiNjNlMy5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMAAAAAAHFT
AFQAXwA0AGIANwBkADYANgBhAGEANwBmADAAZQA0ADgAOAA3ADkAMAA1ADgAYwA1AGEAZQBjADcA
MABiADYAMwBlADMALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAEFV
AHMAZQByADoAOgBpAG4AdABXAGUAbABsAEQAcgBpAGwAbABBAHMAcwBlAG0AYgBsAHkAQwBvAG0A
cABJAGQAAGdQAHIAbwBjAGUAcwBzAGkAbgBnACAAZAByAGkAbABsAGkAbgBnACAAYQBzAHMAZQBt
AGIAbAB5ACAAYwBvAG0AcABvAG4AZQBuAHQAIAB3AGkAdABoACAAaQBkACAAewAwAH0ALgAAUVUA
cwBlAHIAOgA6AGkAbgB0AFcAZQBsAGwARAByAGkAbABsAEEAcwBzAGUAbQBiAGwAeQBJAGQARgBv
AHIAQwBvAG0AcABvAG4AZQBuAHQAAC9VAHMAZQByADoAOgBpAG4AdABDAG8AbQBwAG8AbgBlAG4A
dABTAGUAcQBOAG8AAC1VAHMAZQByADoAOgBzAHQAcgBDAG8AbQBwAG8AbgBlAG4AdABEAGUAcwBj
AAAvVQBzAGUAcgA6ADoAaQBuAHQAQwBvAG0AcABvAG4AZQBuAHQAQwBvAHUAbgB0AAA3VQBzAGUA
cgA6ADoAbwBiAGoATQBhAHgATwB1AHQAcwBpAGQAZQBEAGkAYQBtAGUAdABlAHIAADVVAHMAZQBy
ADoAOgBvAGIAagBNAGkAbgBJAG4AcwBpAGQAZQBEAGkAYQBtAGUAdABlAHIAADFVAHMAZQByADoA
OgBvAGIAagBDAG8AbQBwAG8AbgBlAG4AdABMAGUAbgBnAHQAaAAAP1UAcwBlAHIAOgA6AGIAbwBv
AGwAQQBjAHQAaQB2AGUASQBuAGQARgBvAHIAQwBvAG0AcABvAG4AZQBuAHQAACdVAHMAZQByADoA
OgBzAHQAcgBTAGUAcgB2AGUAcgBOAGEAbQBlAAAfVQBzAGUAcgA6ADoAcwB0AHIAQQBwAGkASwBl
AHkAACVVAHMAZQByADoAOgBzAHQAcgBBAGMAYwBlAHMAcwBLAGUAeQAAIVMAeQBzAHQAZQBtADoA
OgBVAHMAZQByAE4AYQBtAGUAAICNaAB0AHQAcABzADoALwAvAHsAMAB9AC8AYQBwAGkALwBkAHIA
aQBsAGwAaQBuAGcAQQBzAHMAZQBtAGIAbAB5AEMAbwBtAHAAbwBuAGUAbgB0AC8AewAxAH0APwBh
AHAAaQBrAGUAeQA9AHsAMgB9ACYAYQBjAGMAZQBzAHMAawBlAHkAPQB7ADMAfQAAAyAAAAclADIA
MAAAAyQAAAclADIANAAAMyAATgBvAHQAIABmAG8AdQBuAGQAIAAtACAAdwBpAGwAbAAgAGkAbgBz
AGUAcgB0AC4AAWMgAEUAbgB0AGkAdAB5ACAAZgBvAHUAbgBkACAALQAgAHcAaQBsAGwAIABjAGgA
ZQBjAGsAIABpAGYAIAB1AHAAZABhAHQAZQAgAGkAcwAgAHIAZQBxAHUAaQByAGUAZAAuAAFHIABB
AHQAdABlAG0AcAB0AGkAbgBnACAAdwByAGkAdABlACAAdABvACAARABhAHQAYQBHAHUAbQBiAG8A
IABBAFAASQAuAAAHUABVAFQAACFhAHAAcABsAGkAYwBhAHQAaQBvAG4ALwBqAHMAbwBuAABhIABI
AFQAVABQACAAcAB1AHQAIABmAGEAaQBsAGUAZAAgAHcAaQB0AGgAIABlAHgAYwBlAHAAdABpAG8A
bgAgAHsAMAB9AC4AIABXAGkAbABsACAAcgBlAHQAcgB5AC4AACkgAE4AbwAgAHUAcABkAGEAdABl
ACAAcgBlAHEAdQBpAHIAZQBkAC4AACkgACAAUgBlAHQAdQByAG4AaQBuAGcAIABTAHUAYwBjAGUA
cwBzAC4AABVHAHUAbQBiAG8AIABTAFMASQBTAAAzIAAgAEUAbgBjAG8AdQBuAHQAZQByAGUAZAAg
AGUAcgByAG8AcgA6ACAAewAwAH0ALgAAEVwAdQB7ADAAOgB4ADQAfQAAGVsAXgBcAHgAMAAwAC0A
XAB4ADcARgBdAAEAAFuM2zJ2A29ElrIWYUCISJ8ACLd6XFYZNOCJCImEXc2AgMyRAwYSFQMGEhkD
IAABBAAAEhUEAAASGQUAAQESGQQIABIVBAgAEhkDBhIMBAAAEgwECAASDAggBBIYCA4ODgQAAQ4O
AgYIAwYRFAQAAAAABAEAAAADIAAIBCABAQgDIAAOBCABAQ4HIAAVER0BDQggAQEVER0BDQMgAAIE
IAEBAgggABURHQERIQkgAQEVER0BESEYIAkCCAgOCBURHQENFREdAQ0VER0BDQIOAgYOBgYVER0B
DQIGAgcGFREdAREhAygACAMoAA4HKAAVER0BDQMoAAIIKAAVER0BESEGAAESWRFdBCAAEmEGIAIB
DhJhBAcBEhUFIAEBEWkIAQACAAAAAAADAAABCgAEAhwSdRJ5EX0EBhKAgQUgABKAiQUgABKAjQYg
ARKAkRwDIAAcByACEoCFDhwEBhKAnQQgAQIcBAABDRwFFREdAQ0FIAEBEwAGIAEdDh0DDBABAR4A
FRKAsQEeAAMKAQ4FIAIBHBgGAAEBEoCBBgABARGAuQYAAg4OHRwFIAIODg4EAAARIQYgARKAhQ4G
AAESgL0OCDG/OFatNk41BAABDhwEIAEBCgUgABKAyQUAABKAzQkgAgESgMkSgM0FIAASgNkGIAEB
EoDJBQACDg4cBSAAEoDpCiAGAQgODg4IEAIIIAUCCA4ODghMBx8SgIUCCAgIDggVER0BDRURHQEN
FREdAQ0CDg4ODg4SGAgSgMEOEoDREoDZEoDJEoDdEoDlEoDlFREdAQ0VER0BDRURHQENHQMdHAYQ
AQEeAA4ECgESGBYHCQ4SgMESgNkSgMkSgN0OEhgSGB0cBgABDhKA7QQGEoDxBCABAwgIAAMODg4S
gPEGFREdAREhBQACAg4OBCAAEwAnBwgCFREdAREhFREdAQ0VER0BDRURHQENFREdAQ0VER0BDRUR
HQENSQEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC41AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFt
ZRIuTkVUIEZyYW1ld29yayA0LjUoAQAjU1RfNGI3ZDY2YWE3ZjBlNDg4NzkwNThjNWFlYzcwYjYz
ZTMAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAxOAAACAEACAAAAAAAHgEAAQBUAhZXcmFwTm9u
RXhjZXB0aW9uVGhyb3dzAQD8TgAAAAAAAAAAAAAeTwAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
EE8AAAAAAAAAAAAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAAABgAAIAA
AAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYYAAAsAMAAAAA
AAAAAAAAsAM0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4AAAEAAAAB
AOleohsAAAEA6V6iGz8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEAcgBGAGkA
bABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACwBBADAAAB
AFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAOwCAAABADAAMAAwADAAMAA0AGIAMAAAAHAA
JAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQAXwA0AGIANwBkADYANgBh
AGEANwBmADAAZQA0ADgAOAA3ADkAMAA1ADgAYwA1AGEAZQBjADcAMABiADYAMwBlADMAAABAAA8A
AQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANwAwADcANAAuADIANAAyADkANwAA
AAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwBmAGYAYQBkAGYAMABjAGYA
MwAwADEAMwA0AGMAMQA4AGEANQBkADkAZAA0AGMAZAAyAGEANwBjAGEANQA5ADcALgBkAGwAbAAA
AEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcAaAB0ACAA
QAAgACAAMgAwADEAOAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABT
AFQAXwBmAGYAYQBkAGYAMABjAGYAMwAwADEAMwA0AGMAMQA4AGEANQBkADkAZAA0AGMAZAAyAGEA
NwBjAGEANQA5ADcALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBU
AF8ANABiADcAZAA2ADYAYQBhADcAZgAwAGUANAA4ADgANwA5ADAANQA4AGMANQBhAGUAYwA3ADAA
YgA2ADMAZQAzAAAARAAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA3
ADAANwA0AC4AMgA0ADIAOQA3AAAAAABIAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkA
bwBuAAAAMQAuADAALgA3ADAANwA0AC4AMgA0ADIAOQA3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAADAAAADA/AAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
                </ScriptProject>
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:ForEachVariableMappings>
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{a101b793-062c-4ad5-93ce-c586ec511ace}"
              DTS:ObjectName="{266A5D5E-E2D6-40C9-A660-CC5DDA65515B}"
              DTS:ValueIndex="0"
              DTS:VariableName="User::intWellDrillAssemblyCompId" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{04f05308-9993-4248-83cc-f79cbf80f5e9}"
              DTS:ObjectName="{2D6B87A5-4DC3-45EE-ABC8-FC6B5A97BAC9}"
              DTS:ValueIndex="1"
              DTS:VariableName="User::intWellDrillAssemblyIdForComponent" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{ad6a3ac1-e7e7-492e-a45b-f6f9cdb4a00d}"
              DTS:ObjectName="{842A1588-6307-4844-834D-E1CE6E37D34D}"
              DTS:ValueIndex="2"
              DTS:VariableName="User::intComponentSeqNo" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{2622d80e-f1cd-424c-bfcf-f1094278d570}"
              DTS:ObjectName="{FA708B14-5EF7-48DE-ABCD-7B522363C471}"
              DTS:ValueIndex="3"
              DTS:VariableName="User::strComponentDesc" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{ce65e19d-5cc2-4dfc-9d29-baf4ff3d7322}"
              DTS:ObjectName="{192F30EA-0327-495F-A8BC-F497883FDA04}"
              DTS:ValueIndex="4"
              DTS:VariableName="User::intComponentCount" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{49219409-d8e7-40ec-ba30-6f6e9f3fd26a}"
              DTS:ObjectName="{C1FB0AB0-0339-411E-9A99-563678EF6E0F}"
              DTS:ValueIndex="5"
              DTS:VariableName="User::objMaxOutsideDiameter" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{803a0f9c-bf45-4ae0-af74-f7cbe757c74d}"
              DTS:ObjectName="{FAD6EDDA-02A2-431C-B57A-4672004AB85B}"
              DTS:ValueIndex="6"
              DTS:VariableName="User::objMinInsideDiameter" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{286271c8-d419-407f-ace8-e008b3679c82}"
              DTS:ObjectName="{F1F7014C-B1E0-4A41-B965-2AF3287E72AA}"
              DTS:ValueIndex="7"
              DTS:VariableName="User::objComponentLength" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{199ea4dd-a3de-4d80-8b47-93b293c5f8cd}"
              DTS:ObjectName="{57EED84E-9DED-40AA-84FD-2444BE292D66}"
              DTS:ValueIndex="8"
              DTS:VariableName="User::boolActiveIndForComponent" />
          </DTS:ForEachVariableMappings>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Well Loop\Drilling Assembly Loop"
          DTS:CreationName="STOCK:FOREACHLOOP"
          DTS:Description="Foreach Loop Container"
          DTS:DTSID="{0abf4b1f-fcf0-4e6e-b880-148d5aabb1b6}"
          DTS:ExecutableType="STOCK:FOREACHLOOP"
          DTS:LocaleID="-1"
          DTS:MaxErrorCount="6"
          DTS:ObjectName="Drilling Assembly Loop">
          <DTS:ForEachEnumerator
            DTS:CreationName="Microsoft.SqlServer.Dts.Runtime.Enumerators.ADO.ForEachADOEnumerator, Microsoft.SqlServer.ForEachADOEnumerator, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
            DTS:DTSID="{6e9504f2-553e-4aa8-9a99-78c4e6df592a}"
            DTS:ObjectName="{4F357A1D-CA44-434A-8085-25C4D1BB103C}">
            <DTS:ObjectData>
              <FEEADO
                EnumType="EnumerateRowsInFirstTable"
                VarName="User::objDrillingAssemblyList" />
            </DTS:ObjectData>
          </DTS:ForEachEnumerator>
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Well Loop\Drilling Assembly Loop\C# Script to Call Data Gumbo Drilling Assembly API"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Script Task"
              DTS:DTSID="{a9eea084-e989-4839-846f-2286946bdbf9}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="C# Script to Call Data Gumbo Drilling Assembly API"
              DTS:ThreadHint="5">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:ObjectData>
                <ScriptProject
                  Name="ST_050ff67cdeab4c84bf0761d9456a4c86"
                  VSTAMajorVersion="3"
                  VSTAMinorVersion="0"
                  Language="CSharp"
                  ReadOnlyVariables="User::boolActiveIndForDrillingAssembly,User::dblCalculatedLength,User::dblCalculatedWeight,User::intAssemblyRefNumber,User::intWellDrillAssemblyId,User::intWellDrillPeriodIdForDrillingAssembly,User::strAccessKey,User::strApiKey,User::strConvertedTimeZone,User::strServerName,System::UserName">
                  <ProjectItem
                    Name="Properties\AssemblyInfo.cs"
                    Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_dd364823f7ad479fa2c14428ecf7b89f")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_dd364823f7ad479fa2c14428ecf7b89f")]
[assembly: AssemblyCopyright("Copyright @  2018")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Resources.resx"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
                  <ProjectItem
                    Name="ScriptMain.cs"
                    Encoding="UTF8"><![CDATA[using System.Net;
using System.IO;
using System.Text;
using System.Web;
using System.Web.Helpers;
using System.Linq;
using System.Text.RegularExpressions;

#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion

namespace ST_dd364823f7ad479fa2c14428ecf7b89f
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            StringBuilder logMessage = new StringBuilder();
            bool fireAgain = false;
            int drillingAssemblyId = (int)Dts.Variables["User::intWellDrillAssemblyId"].Value;
            logMessage.AppendFormat("Processing drilling assembly with id {0}.", drillingAssemblyId);
            int tourSheetId = (int)Dts.Variables["User::intWellDrillPeriodIdForDrillingAssembly"].Value;
            int seqNo = (int)Dts.Variables["User::intAssemblyRefNumber"].Value;
            double totalLength = (double)Dts.Variables["User::dblCalculatedLength"].Value;
            double totalWeight = (double)Dts.Variables["User::dblCalculatedWeight"].Value;
            bool activeInd = (bool)Dts.Variables["User::boolActiveIndForDrillingAssembly"].Value;

            string serverName = (String)Dts.Variables["User::strServerName"].Value;
            string apiKey = (String)Dts.Variables["User::strApiKey"].Value;
            string accessKey = (String)Dts.Variables["User::strAccessKey"].Value;
            string currentUserId = (String)Dts.Variables["System::UserName"].Value;

            if (currentUserId != null)
            {
                currentUserId = currentUserId.Split('\\').Last();
            }

            ServicePointManager.ServerCertificateValidationCallback = delegate { return true; };
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls | SecurityProtocolType.Ssl3;

            try
            {
                string url = string.Format("https://{0}/api/drillingAssembly/{1}?apikey={2}&accesskey={3}", serverName, drillingAssemblyId, apiKey, accessKey);
                url = url.Replace(" ", "%20");
                url = url.Replace("$", "%24");

                DateTime now = DateTime.Now;
                DrillingAssembly existingDrillingAssembly = GetExistingDrillingAssembly(drillingAssemblyId, serverName, apiKey, accessKey);

                if (existingDrillingAssembly == null)
                {
                    logMessage.Append(" Not found - will insert."); 
                    existingDrillingAssembly = new DrillingAssembly();
                    existingDrillingAssembly.drillingAssemblyId = drillingAssemblyId;
                }
                else
                {
                    logMessage.Append(" Entity found - will check if update is required.");
                }

                if (existingDrillingAssembly.Apply(tourSheetId, seqNo, totalLength, totalWeight, activeInd, currentUserId))
                {
                    int retries = 2;
                    while (retries > 0)
                    {
                        try
                        {
                            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                            logMessage.Append(" Attempting write to DataGumbo API.");
                            string gumboPayload = Json.Encode(existingDrillingAssembly);

                            request.Method = "PUT";
                            request.ContentType = "application/json";
                            gumboPayload = EncodeNonAsciiCharacters(gumboPayload); 
                            request.ContentLength = gumboPayload.Length;
                            StreamWriter requestWriter = new StreamWriter(request.GetRequestStream(), System.Text.Encoding.ASCII);
                            requestWriter.Write(gumboPayload);
                            requestWriter.Close();

                            WebResponse webResponse = request.GetResponse();
                            Stream webStream = webResponse.GetResponseStream();
                            StreamReader responseReader = new StreamReader(webStream);
                            string response = responseReader.ReadToEnd();
                            responseReader.Close();
                            retries = 0; // indicate success
                        }
                        catch (Exception e)
                        {
                            retries--;
                            if (retries > 0)
                            {
                                logMessage.Append(string.Format(" HTTP put failed with exception {0}. Will retry.", e.Message));
                            }
                            else
                            {
                                throw e;
                            }
                        }
                    }
                }
                else
                {
                    logMessage.Append(" No update required.");
                }
                Dts.TaskResult = (int)ScriptResults.Success;
                logMessage.Append("  Returning Success.");
                Dts.Events.FireInformation(0, "Gumbo SSIS", logMessage.ToString(), string.Empty, 0, ref fireAgain);
            }
            catch (Exception e)
            {
                logMessage.AppendFormat("  Encountered error: {0}.", e.Message);
                Dts.Events.FireError(0, "Gumbo SSIS", logMessage.ToString(), string.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        private DrillingAssembly GetExistingDrillingAssembly(int drillingAssemblyId, string serverName, string apiKey, string accessKey)
        {
            try
            {
                string url = string.Format("https://{0}/api/drillingAssembly/{1}?apikey={2}&accesskey={3}", serverName, drillingAssemblyId, apiKey, accessKey);
                url = url.Replace(" ", "%20");
                url = url.Replace("$", "%24");
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                WebResponse webResponse = request.GetResponse();
                Stream webStream = webResponse.GetResponseStream();
                StreamReader responseReader = new StreamReader(webStream);
                string response = responseReader.ReadToEnd();
                responseReader.Close();
                DrillingAssembly tourSheetFormation = Json.Decode<DrillingAssembly>(response);
                return tourSheetFormation;
            }
            catch (Exception e)
            {
                return null;
            }
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        #region data class
        class DrillingAssembly
        {
            public int drillingAssemblyId { get; set; }
            public int tourSheetId { get; set; }
            public int seqNo { get; set; }
            public double totalLength { get; set; }
            public double totalWeight { get; set; }
            public bool activeInd { get; set; }
            public string rowCreatedBy { get; set; }
            public string rowChangedBy { get; set; }
            public DateTime? rowCreatedDate { get; set; }
            public DateTime? rowChangedDate { get; set; }

            public bool Apply(int _tourSheetId, int _seqNo, double _totalLength, double _totalWeight,
                bool _activeInd, string currentUserId)
            {
                bool ret = false;
                if (rowCreatedBy == null)
                {
                    rowCreatedBy = currentUserId;
                    ret = true;
                }
                if (rowCreatedDate == null)
                {
                    rowCreatedDate = DateTime.Now;
                    ret = true;
                }
                if (tourSheetId != _tourSheetId)
                {
                    tourSheetId = _tourSheetId;
                    ret = true;
                }
                if (seqNo != _seqNo)
                {
                    seqNo = _seqNo;
                    ret = true;
                }
                if (totalLength != _totalLength)
                {
                    totalLength = _totalLength;
                    ret = true;
                }
                if (totalWeight != _totalWeight)
                {
                    totalWeight = _totalWeight;
                    ret = true;
                }
                if (activeInd != _activeInd)
                {
                    activeInd = _activeInd;
                    ret = true;
                }
                if (ret)
                {
                    rowChangedBy = currentUserId;
                    rowChangedDate = DateTime.Now;
                }
                return ret;
            }
        }
        #endregion


        public static string EncodeNonAsciiCharacters(string value)
        {
            return Regex.Replace(value, @"[^\x00-\x7F]", c => string.Format(@"\u{0:x4}", (int)c.Value[0]));
        }
    }
}]]></ProjectItem>
                  <ProjectItem
                    Name="ST_050ff67cdeab4c84bf0761d9456a4c86.csproj"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{497A2B91-32E5-41D4-B4EA-50A92979F04E}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_dd364823f7ad479fa2c14428ecf7b89f</RootNamespace>
    <AssemblyName>ST_050ff67cdeab4c84bf0761d9456a4c86</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Web.Helpers, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
      <DesignTime>True</DesignTime>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\10.0\InstallDir#\devenv.exe" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
                  <ProjectItem
                    Name="Project"
                    Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_dd364823f7ad479fa2c14428ecf7b89f</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_dd364823f7ad479fa2c14428ecf7b89f</msb:DisplayName>
		<msb:ProjectId>{50CD6077-2CA2-41BC-9EDC-BD51964FDAB5}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_050ff67cdeab4c84bf0761d9456a4c86.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_dd364823f7ad479fa2c14428ecf7b89f.Properties.Settings.get_Default():ST_dd364823f7ad479fa2c14428ecf7b89f.Properties.Sett" +
    "ings")]

namespace ST_dd364823f7ad479fa2c14428ecf7b89f.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.settings"
                    Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Resources.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_dd364823f7ad479fa2c14428ecf7b89f.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_dd364823f7ad479fa2c14428ecf7b89f.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_dd364823f7ad479fa2c14428ecf7b89f.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_dd364823f7ad479fa2c14428ecf7b89f.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_dd364823f7ad479fa2c14428ecf7b89f.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
                  <BinaryItem
                    Name="ST_050ff67cdeab4c84bf0761d9456a4c86.dll">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
AAAKCgZyYQMAcHJlAwBwbyIAAAoKBiglAAAKdC8AAAELB28wAAAKDAhvMQAACg0JczIAAAoTBBEE
bzMAAAoTBREEbzQAAAoRBSgCAAArEwYRBhMH3gYmFBMH3gARByoAARAAAAAAAACSkgAGOAAAAXJy
dwUAcAJvPgAAChZvPwAACowlAAABKDYAAAoqpgJyiQUAcH4FAAAELREU/gYNAAAGc0AAAAqABQAA
BH4FAAAEKEEAAAoqHgIoQgAACioeAnsJAAAEKiICA30JAAAEKh4CewoAAAQqIgIDfQoAAAQqHgJ7
CwAABCoiAgN9CwAABCoeAnsMAAAEKiICA30MAAAEKh4Cew0AAAQqIgIDfQ0AAAQqHgJ7DgAABCoi
AgN9DgAABCoeAnsPAAAEKiICA30PAAAEKh4CexAAAAQqIgIDfRAAAAQqHgJ7EQAABCoiAgN9EQAA
BCoeAnsSAAAEKiICA30SAAAEKgAAABMwAgCxAAAABAAAERYKAigaAAAGLQoCDgYoGwAABhcKAige
AAAGCxIBKEMAAAotEgIoIwAACnNEAAAKKB8AAAYXCgIoEAAABgMuCQIDKBEAAAYXCgIoEgAABgQu
CQIEKBMAAAYXCgIoFAAABgUuCQIFKBUAAAYXCgIoFgAABg4ELgoCDgQoFwAABhcKAigYAAAGDgUu
CgIOBSgZAAAGFwoGLBgCDgYoHQAABgIoIwAACnNEAAAKKCEAAAYGKh4CKA4AAAoqAAAAAAAAALQA
AADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIs
IFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1
NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAA
UEFEUEFEULQAAABCU0pCAQABAAAAAAAMAAAAdjQuMC4zMDMxOQAAAAAFAGwAAACUCQAAI34AAAAK
AACwDQAAI1N0cmluZ3MAAAAAsBcAAKQFAAAjVVMAVB0AABAAAAAjR1VJRAAAAGQdAAAIAwAAI0Js
b2IAAAAAAAAAAgAAAVcdogkJCwAAAPolMwAWAAABAAAAPQAAAAYAAAASAAAAIwAAABsAAABEAAAA
AgAAADEAAAAEAAAAAwAAAA0AAAAYAAAAAQAAAAEAAAAGAAAAAQAAAAIAAAACAAAAAAAKAAEAAAAA
AAYA0gDLAAoA7gDZAA4ATgElAQYAagHLAAYAgAFvAQYAsQGcAQYAfwPLAAYAigPLAAYAEAb2BQYA
OwYpBgYAUgYpBgYAbwYpBgYAjgYpBgYApwYpBgYAwAYpBgYA2wYpBgYA9gYpBgYADwcpBgYASAco
BwYAaAcoBwYAvQeqBwYA2gfLAAYA3wfLAAYAAwgpBgoALwgZCAoASAgZCAYAXQgoBw4AfwglAQYA
zwihCAoA3wihCAoA/QjpCAoANAnpCAYAiwl/CQ4AmQklARIA8gnSCRIACgrSCQYAJgrLAAYAOQrL
AAYAQArLAAYASArLAAYATwrLABYAcgpmCgYAmAp9CgoAtgqrCgoA8gqrCgoAOgurCgoATAurChoA
bgtbCwYAvAuyCwYA1At/CQYA5wuyCwYA9AuyCwoACwyrCgYANQyyCwYAQgyyCwYAVwzLAA4AfAwl
AQoA6gzLDAoAEQ3LDAoARw3LDAoAWQ3LDAAAAAABAAAAAAABAAEAAAAQADIAPAAFAAEAAQAAARAA
awA8AAkAAwAFAAEAEAB0AH8ADQAEAAgAAwEAAKMAAAARAAYADgADABAAsQAAAAUACQAOABEAkAET
ABEAvQEXABEABwI5ABEAWAkHAREAIA0mAgYGZQJVAFaAbQJYAFaAdQJYAAEA5QNVAAEACQRVAAEA
JgRVAAEAPQSnAAEAWgSnAAEAdwSqAAEAkgStAAEAsAStAAEAzgSwAAEA7gSwAFAgAAAAAIMYzQEb
AAEAWCAAAAAAkwjTAR8AAQCRIAAAAACTCOcBJAABAJggAAAAAJMI8wEpAAEAoCAAAAAAlggXAj0A
AgCzIAAAAACGGM0BGwACAKcgAAAAAJEYeAj4AAIAwCAAAAAAhgArAhsAAgDYJAAAAACBADACRwAC
AK0lAAAAAJYATAJQAAYA1yUAAAAAhhjNARsABwC7IAAAAACRAA0J/AAHAJAlAAAAAJEA8AwfAgsA
3yUAAAAAhgh9AmYADADnJQAAAACGCJQCagAMAPAlAAAAAIYIqwJmAA0A+CUAAAAAhgi7AmoADQAB
JgAAAACGCMsCZgAOAAkmAAAAAIYI1QJqAA4AEiYAAAAAhgjfAm8ADwAaJgAAAACGCO8CcwAPACMm
AAAAAIYI/wJvABAAKyYAAAAAhggPA3MAEAA0JgAAAACGCB8DeAARADwmAAAAAIYILQN8ABEARSYA
AAAAhgg7A4EAEgBNJgAAAACGCEwDhQASAFYmAAAAAIYIXQOBABMAXiYAAAAAhghuA4UAEwBnJgAA
AACGCJMDigAUAG8mAAAAAIYIpgOTABQAeCYAAAAAhgi5A4oAFQCAJgAAAACGCMwDkwAVAIwmAAAA
AIYA3wOdABYASScAAAAAhhjNARsAHAAAAAEAjQUAAAEADgUAAAIAkwUAAAMAngUAAAQApQUAAAEA
jQUAAAEAGAkAAAIAHwkAAAMAJgkAAAQALQkAAAEADw0AAAEAjQUAAAEAjQUAAAEAjQUAAAEAjQUA
AAEAjQUAAAEAjQUAAAEAjQUAAAEAjQUAAAEAjQUAAAEAjQUAAAEArwUAAAIAvAUAAAMAwwUAAAQA
0AUAAAUA3QUAAAYA6AVJAM0BhQBRAM0BhQBZAM0BhQBhAM0BhQBpAM0BhQBxAM0BhQB5AM0BhQCB
AM0BhQCJAM0BhQCRAM0BhQCZAM0BagChAM0BGwCpAM0BGwAJAM0BGwCxAPEH0QCxAAwI2AApAM0B
3QDJAM0B6QDZAM0BGwARAM0BGwDhAM0BGwAJAc0BGwAZAKsJDAERAfwJEgEZARMKGAEhARwKHwEJ
ASwKIwFBAVQKKwFRAaYKMgEBAc0BQwFhAcoKSQFhAQcLUAFBARwLVwFBASMLXgFBACsLZAEJATML
aQFxAUULcAGBAXMLgAFxAXoLhQBxAYULhQBBAZULZgBxAaALhQFxAcMLigGRAd0LkAGZAc0BlgGh
Af8LhQChAQUMGwBxARcMoAGpASMMigGxAc0BpgG5AU0MgQC5AQUMGwDBAWEMgQBBARwLrQERAW0M
agARAZAMswEJAJsMgQBBAaQMrQDJAaoMuQHJAboMxAGBAcQM/AHhARwKgQBBAU8NKwLZAc0BQwHp
ASMLMAIZAM0BGwAMAF8NeAAMAM0BQAIIABwAXAAIACAAYQApAJMA7wAuADsAyQIuAFsA4AIuADMA
mgIuAEMAwwIuAGMA6QIuABMAmgIuAAsAUAIuABsAwwIuACMAwwIuACsAwwJDAGsAYQBJAJMA7wBh
AJsAYQCBAJsAYQCDAKsAYQChAJsAYQAhAZsAYQBBAZsAYQBhAZsAYQCAAZsAYQCBAZsAYQCgAZsA
YQChAZsAYQDAAZsAYQDBAZsAYQDgAZsAYQDhAZsAYQAAApsAYQABApsAYQAgApsAYQAhApsAYQBA
ApsAYQBBApsAYQBgApsAYQCAApsAYQCgApsAYQDAApsAYQDgApsAYQAAA5sAYQAgA5sAYQBAA5sA
YQBgA5sAYQCAA5sAYQCgA5sAYQDAA5sAYQDgA5sAYQAABJsAYQAgBJsAYQDkAM0BCAJGAgIAAQAD
AAMABgAEAAAAgAEvAAAA/wE0AAAAIwJCAAAADgW4AAAAIQW4AAAALQW4AAAAMwW8AAAAPwW8AAAA
SwXAAAAAVQXEAAAAYgXEAAAAbwXIAAAAfgXIAAIAAgADAAIAAwAFAAEABAAFAAIABQAHAAIADgAJ
AAEADwAJAAEAEQALAAIAEAALAAIAEgANAAEAEwANAAEAFQAPAAIAFAAPAAEAFwARAAIAFgARAAIA
GAATAAEAGQATAAEAGwAVAAIAGgAVAAIAHAAXAAEAHQAXAAIAHgAZAAEAHwAZAAIAIAAbAAEAIQAb
ADkCBIAAAAEAAACiG9VeAAAAAAAAhgcAAAQAAAAAAAAAAAAAAAEAwgAAAAAABAAAAAAAAAAAAAAA
AQDLAAAAAAALAAAAAAAAAAAAAAAKAAYBAAAAAAsAAAAAAAAAAAAAAAoAswkAAAAABAAAAAAAAAAA
AAAAAQBaCgAAAAABAAAAAAAAAAAAAAB3AVsLAAAAAAAAAAABAAAAbA0AAAUABAAGAAQAOwA/AXsA
AwIAAAAAADxNb2R1bGU+AFNUXzA1MGZmNjdjZGVhYjRjODRiZjA3NjFkOTQ1NmE0Yzg2LmRsbABS
ZXNvdXJjZXMAU1RfZGQzNjQ4MjNmN2FkNDc5ZmEyYzE0NDI4ZWNmN2I4OWYuUHJvcGVydGllcwBT
ZXR0aW5ncwBTY3JpcHRNYWluAFNUX2RkMzY0ODIzZjdhZDQ3OWZhMmMxNDQyOGVjZjdiODlmAFNj
cmlwdFJlc3VsdHMARHJpbGxpbmdBc3NlbWJseQBtc2NvcmxpYgBTeXN0ZW0AT2JqZWN0AFN5c3Rl
bS5Db25maWd1cmF0aW9uAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAE1pY3Jvc29mdC5TcWxTZXJ2
ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAFZT
VEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBFbnVtAFN5c3RlbS5SZXNvdXJjZXMAUmVzb3VyY2VN
YW5hZ2VyAHJlc291cmNlTWFuAFN5c3RlbS5HbG9iYWxpemF0aW9uAEN1bHR1cmVJbmZvAHJlc291
cmNlQ3VsdHVyZQAuY3RvcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAGdldF9DdWx0dXJlAHNldF9DdWx0
dXJlAEN1bHR1cmUAZGVmYXVsdEluc3RhbmNlAGdldF9EZWZhdWx0AERlZmF1bHQATWFpbgBHZXRF
eGlzdGluZ0RyaWxsaW5nQXNzZW1ibHkARW5jb2RlTm9uQXNjaWlDaGFyYWN0ZXJzAHZhbHVlX18A
U3VjY2VzcwBGYWlsdXJlAGdldF9kcmlsbGluZ0Fzc2VtYmx5SWQAc2V0X2RyaWxsaW5nQXNzZW1i
bHlJZABnZXRfdG91clNoZWV0SWQAc2V0X3RvdXJTaGVldElkAGdldF9zZXFObwBzZXRfc2VxTm8A
Z2V0X3RvdGFsTGVuZ3RoAHNldF90b3RhbExlbmd0aABnZXRfdG90YWxXZWlnaHQAc2V0X3RvdGFs
V2VpZ2h0AGdldF9hY3RpdmVJbmQAc2V0X2FjdGl2ZUluZABnZXRfcm93Q3JlYXRlZEJ5AHNldF9y
b3dDcmVhdGVkQnkAZ2V0X3Jvd0NoYW5nZWRCeQBzZXRfcm93Q2hhbmdlZEJ5AE51bGxhYmxlYDEA
RGF0ZVRpbWUAZ2V0X3Jvd0NyZWF0ZWREYXRlAHNldF9yb3dDcmVhdGVkRGF0ZQBnZXRfcm93Q2hh
bmdlZERhdGUAc2V0X3Jvd0NoYW5nZWREYXRlAEFwcGx5ADxkcmlsbGluZ0Fzc2VtYmx5SWQ+a19f
QmFja2luZ0ZpZWxkADx0b3VyU2hlZXRJZD5rX19CYWNraW5nRmllbGQAPHNlcU5vPmtfX0JhY2tp
bmdGaWVsZAA8dG90YWxMZW5ndGg+a19fQmFja2luZ0ZpZWxkADx0b3RhbFdlaWdodD5rX19CYWNr
aW5nRmllbGQAPGFjdGl2ZUluZD5rX19CYWNraW5nRmllbGQAPHJvd0NyZWF0ZWRCeT5rX19CYWNr
aW5nRmllbGQAPHJvd0NoYW5nZWRCeT5rX19CYWNraW5nRmllbGQAPHJvd0NyZWF0ZWREYXRlPmtf
X0JhY2tpbmdGaWVsZAA8cm93Q2hhbmdlZERhdGU+a19fQmFja2luZ0ZpZWxkAGRyaWxsaW5nQXNz
ZW1ibHlJZAB0b3VyU2hlZXRJZABzZXFObwB0b3RhbExlbmd0aAB0b3RhbFdlaWdodABhY3RpdmVJ
bmQAcm93Q3JlYXRlZEJ5AHJvd0NoYW5nZWRCeQByb3dDcmVhdGVkRGF0ZQByb3dDaGFuZ2VkRGF0
ZQB2YWx1ZQBzZXJ2ZXJOYW1lAGFwaUtleQBhY2Nlc3NLZXkAX3RvdXJTaGVldElkAF9zZXFObwBf
dG90YWxMZW5ndGgAX3RvdGFsV2VpZ2h0AF9hY3RpdmVJbmQAY3VycmVudFVzZXJJZABTeXN0ZW0u
UnVudGltZS5WZXJzaW9uaW5nAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBTeXN0ZW0uUmVmbGVj
dGlvbgBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUA
QXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBB
c3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAQXNzZW1i
bHlUcmFkZW1hcmtBdHRyaWJ1dGUAQXNzZW1ibHlDdWx0dXJlQXR0cmlidXRlAEFzc2VtYmx5VmVy
c2lvbkF0dHJpYnV0ZQBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAENvbXBpbGF0aW9u
UmVsYXhhdGlvbnNBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAU1RfMDUw
ZmY2N2NkZWFiNGM4NGJmMDc2MWQ5NDU2YTRjODYAU3lzdGVtLkRpYWdub3N0aWNzAERlYnVnZ2Vy
Tm9uVXNlckNvZGVBdHRyaWJ1dGUAVHlwZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhh
bmRsZQBBc3NlbWJseQBnZXRfQXNzZW1ibHkAU3lzdGVtLkNvbXBvbmVudE1vZGVsAEVkaXRvckJy
b3dzYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBDb21waWxlckdlbmVyYXRlZEF0
dHJpYnV0ZQAuY2N0b3IAU1NJU1NjcmlwdFRhc2tFbnRyeVBvaW50QXR0cmlidXRlAFN5c3RlbS5T
ZWN1cml0eS5DcnlwdG9ncmFwaHkuWDUwOUNlcnRpZmljYXRlcwBYNTA5Q2VydGlmaWNhdGUAWDUw
OUNoYWluAFN5c3RlbS5OZXQuU2VjdXJpdHkAU3NsUG9saWN5RXJyb3JzADxNYWluPmJfXzAAcGFy
YW0wAHBhcmFtMQBwYXJhbTIAcGFyYW0zAFJlbW90ZUNlcnRpZmljYXRlVmFsaWRhdGlvbkNhbGxi
YWNrAENTJDw+OV9fQ2FjaGVkQW5vbnltb3VzTWV0aG9kRGVsZWdhdGUxAFN5c3RlbS5UZXh0AFN0
cmluZ0J1aWxkZXIAU2NyaXB0T2JqZWN0TW9kZWwAZ2V0X0R0cwBNaWNyb3NvZnQuU3FsU2VydmVy
Lk1hbmFnZWREVFMATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBWYXJpYWJsZXMAZ2V0
X1ZhcmlhYmxlcwBWYXJpYWJsZQBnZXRfSXRlbQBnZXRfVmFsdWUASW50MzIAQXBwZW5kRm9ybWF0
AERvdWJsZQBCb29sZWFuAFN0cmluZwBDaGFyAFNwbGl0AFN5c3RlbS5Db3JlAFN5c3RlbS5MaW5x
AEVudW1lcmFibGUAU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMASUVudW1lcmFibGVgMQBMYXN0
AFN5c3RlbS5OZXQAU2VydmljZVBvaW50TWFuYWdlcgBzZXRfU2VydmVyQ2VydGlmaWNhdGVWYWxp
ZGF0aW9uQ2FsbGJhY2sAU2VjdXJpdHlQcm90b2NvbFR5cGUAc2V0X1NlY3VyaXR5UHJvdG9jb2wA
Rm9ybWF0AFJlcGxhY2UAZ2V0X05vdwBBcHBlbmQAV2ViUmVxdWVzdABDcmVhdGUASHR0cFdlYlJl
cXVlc3QAU3lzdGVtLldlYi5IZWxwZXJzAEpzb24ARW5jb2RlAHNldF9NZXRob2QAc2V0X0NvbnRl
bnRUeXBlAGdldF9MZW5ndGgAc2V0X0NvbnRlbnRMZW5ndGgAU3lzdGVtLklPAFN0cmVhbQBHZXRS
ZXF1ZXN0U3RyZWFtAEVuY29kaW5nAGdldF9BU0NJSQBTdHJlYW1Xcml0ZXIAVGV4dFdyaXRlcgBX
cml0ZQBDbG9zZQBXZWJSZXNwb25zZQBHZXRSZXNwb25zZQBHZXRSZXNwb25zZVN0cmVhbQBTdHJl
YW1SZWFkZXIAVGV4dFJlYWRlcgBSZWFkVG9FbmQARXhjZXB0aW9uAGdldF9NZXNzYWdlAHNldF9U
YXNrUmVzdWx0AEV2ZW50c09iamVjdFdyYXBwZXIAZ2V0X0V2ZW50cwBUb1N0cmluZwBFbXB0eQBG
aXJlSW5mb3JtYXRpb24ARmlyZUVycm9yAERlY29kZQBTeXN0ZW0uVGV4dC5SZWd1bGFyRXhwcmVz
c2lvbnMATWF0Y2gAPEVuY29kZU5vbkFzY2lpQ2hhcmFjdGVycz5iX18yAGMATWF0Y2hFdmFsdWF0
b3IAQ1MkPD45X19DYWNoZWRBbm9ueW1vdXNNZXRob2REZWxlZ2F0ZTMAQ2FwdHVyZQBnZXRfQ2hh
cnMAUmVnZXgAZ2V0X0hhc1ZhbHVlAFNUX2RkMzY0ODIzZjdhZDQ3OWZhMmMxNDQyOGVjZjdiODlm
LlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwAAAHFTAFQAXwBkAGQAMwA2ADQAOAAyADMA
ZgA3AGEAZAA0ADcAOQBmAGEAMgBjADEANAA0ADIAOABlAGMAZgA3AGIAOAA5AGYALgBQAHIAbwBw
AGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAADlVAHMAZQByADoAOgBpAG4AdABXAGUA
bABsAEQAcgBpAGwAbABBAHMAcwBlAG0AYgBsAHkASQBkAABTUAByAG8AYwBlAHMAcwBpAG4AZwAg
AGQAcgBpAGwAbABpAG4AZwAgAGEAcwBzAGUAbQBiAGwAeQAgAHcAaQB0AGgAIABpAGQAIAB7ADAA
fQAuAABbVQBzAGUAcgA6ADoAaQBuAHQAVwBlAGwAbABEAHIAaQBsAGwAUABlAHIAaQBvAGQASQBk
AEYAbwByAEQAcgBpAGwAbABpAG4AZwBBAHMAcwBlAG0AYgBsAHkAADVVAHMAZQByADoAOgBpAG4A
dABBAHMAcwBlAG0AYgBsAHkAUgBlAGYATgB1AG0AYgBlAHIAADNVAHMAZQByADoAOgBkAGIAbABD
AGEAbABjAHUAbABhAHQAZQBkAEwAZQBuAGcAdABoAAAzVQBzAGUAcgA6ADoAZABiAGwAQwBhAGwA
YwB1AGwAYQB0AGUAZABXAGUAaQBnAGgAdAAATVUAcwBlAHIAOgA6AGIAbwBvAGwAQQBjAHQAaQB2
AGUASQBuAGQARgBvAHIARAByAGkAbABsAGkAbgBnAEEAcwBzAGUAbQBiAGwAeQAAJ1UAcwBlAHIA
OgA6AHMAdAByAFMAZQByAHYAZQByAE4AYQBtAGUAAB9VAHMAZQByADoAOgBzAHQAcgBBAHAAaQBL
AGUAeQAAJVUAcwBlAHIAOgA6AHMAdAByAEEAYwBjAGUAcwBzAEsAZQB5AAAhUwB5AHMAdABlAG0A
OgA6AFUAcwBlAHIATgBhAG0AZQAAe2gAdAB0AHAAcwA6AC8ALwB7ADAAfQAvAGEAcABpAC8AZABy
AGkAbABsAGkAbgBnAEEAcwBzAGUAbQBiAGwAeQAvAHsAMQB9AD8AYQBwAGkAawBlAHkAPQB7ADIA
fQAmAGEAYwBjAGUAcwBzAGsAZQB5AD0AewAzAH0AAAMgAAAHJQAyADAAAAMkAAAHJQAyADQAADMg
AE4AbwB0ACAAZgBvAHUAbgBkACAALQAgAHcAaQBsAGwAIABpAG4AcwBlAHIAdAAuAAFjIABFAG4A
dABpAHQAeQAgAGYAbwB1AG4AZAAgAC0AIAB3AGkAbABsACAAYwBoAGUAYwBrACAAaQBmACAAdQBw
AGQAYQB0AGUAIABpAHMAIAByAGUAcQB1AGkAcgBlAGQALgABRyAAQQB0AHQAZQBtAHAAdABpAG4A
ZwAgAHcAcgBpAHQAZQAgAHQAbwAgAEQAYQB0AGEARwB1AG0AYgBvACAAQQBQAEkALgAAB1AAVQBU
AAAhYQBwAHAAbABpAGMAYQB0AGkAbwBuAC8AagBzAG8AbgAAYSAASABUAFQAUAAgAHAAdQB0ACAA
ZgBhAGkAbABlAGQAIAB3AGkAdABoACAAZQB4AGMAZQBwAHQAaQBvAG4AIAB7ADAAfQAuACAAVwBp
AGwAbAAgAHIAZQB0AHIAeQAuAAApIABOAG8AIAB1AHAAZABhAHQAZQAgAHIAZQBxAHUAaQByAGUA
ZAAuAAApIAAgAFIAZQB0AHUAcgBuAGkAbgBnACAAUwB1AGMAYwBlAHMAcwAuAAAVRwB1AG0AYgBv
ACAAUwBTAEkAUwAAMyAAIABFAG4AYwBvAHUAbgB0AGUAcgBlAGQAIABlAHIAcgBvAHIAOgAgAHsA
MAB9AC4AABFcAHUAewAwADoAeAA0AH0AABlbAF4AXAB4ADAAMAAtAFwAeAA3AEYAXQABAGCo/WS+
KutGgGzaxDZIWaAACLd6XFYZNOCJCImEXc2AgMyRAwYSFQMGEhkDIAABBAAAEhUEAAASGQUAAQES
GQQIABIVBAgAEhkDBhIMBAAAEgwECAASDAggBBIYCA4ODgQAAQ4OAgYIAwYRFAQAAAAABAEAAAAD
IAAIBCABAQgDIAANBCABAQ0DIAACBCABAQIDIAAOBCABAQ4IIAAVER0BESEJIAEBFREdAREhCSAG
AggIDQ0CDgIGDQIGAgIGDgcGFREdAREhAygACAMoAA0DKAACAygADggoABURHQERIQYAARJZEV0E
IAASYQYgAgEOEmEEBwESFQUgAQERaQgBAAIAAAAAAAMAAAEKAAQCHBJ1EnkRfQQGEoCBBSAAEoCJ
BSAAEoCNBiABEoCRHAMgABwHIAISgIUOHAYgAR0OHQMMEAEBHgAVEoCtAR4AAwoBDgUgAgEcGAYA
AQESgIEGAAEBEYC1BgACDg4dHAUgAg4ODgQAABEhBiABEoCFDgYAARKAuQ4IMb84Vq02TjUEAAEO
HAQgAQEKBSAAEoDFBQAAEoDJCSACARKAxRKAyQUgABKA1QYgAQESgMUFAAIODhwFIAASgOUKIAYB
CA4ODggQAgggBQIIDg4OCC4HGRKAhQIICAgNDQIODg4ODhIYCBKAvQ4SgM0SgNUSgMUSgNkSgOES
gOEdAx0cBhABAR4ADgQKARIYFgcJDhKAvRKA1RKAxRKA2Q4SGBIYHRwGAAEOEoDpBAYSgO0EIAED
CAgAAw4ODhKA7QYVER0BESEFIAEBEwAJBwICFREdAREhSQEAGi5ORVRGcmFtZXdvcmssVmVyc2lv
bj12NC41AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29yayA0LjUoAQAjU1Rf
ZGQzNjQ4MjNmN2FkNDc5ZmEyYzE0NDI4ZWNmN2I4OWYAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAg
MjAxOAAACAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAaRIAAAAAAAAAAAA
AL5IAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAACwSAAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1z
Y29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAAABgA
AIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYYAAAsAMA
AAAAAAAAAAAAsAM0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4AAAEA
AAABANVeohsAAAEA1V6iGz8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEAcgBG
AGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACwBBAD
AAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAOwCAAABADAAMAAwADAAMAA0AGIAMAAA
AHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQAXwBkAGQAMwA2ADQA
OAAyADMAZgA3AGEAZAA0ADcAOQBmAGEAMgBjADEANAA0ADIAOABlAGMAZgA3AGIAOAA5AGYAAABA
AA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANwAwADcANAAuADIANAAyADcA
NwAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwAwADUAMABmAGYANgA3
AGMAZABlAGEAYgA0AGMAOAA0AGIAZgAwADcANgAxAGQAOQA0ADUANgBhADQAYwA4ADYALgBkAGwA
bAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcAaAB0
ACAAQAAgACAAMgAwADEAOAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUA
AABTAFQAXwAwADUAMABmAGYANgA3AGMAZABlAGEAYgA0AGMAOAA0AGIAZgAwADcANgAxAGQAOQA0
ADUANgBhADQAYwA4ADYALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAA
UwBUAF8AZABkADMANgA0ADgAMgAzAGYANwBhAGQANAA3ADkAZgBhADIAYwAxADQANAAyADgAZQBj
AGYANwBiADgAOQBmAAAARAAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAA
LgA3ADAANwA0AC4AMgA0ADIANwA3AAAAAABIAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBz
AGkAbwBuAAAAMQAuADAALgA3ADAANwA0AC4AMgA0ADIANwA3AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAADAAAANA4AAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
                </ScriptProject>
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:ForEachVariableMappings>
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{4afb4b02-8ce3-41d5-8bcc-6b430467cc42}"
              DTS:ObjectName="{1A094B6D-DD19-432E-8020-BD8789169313}"
              DTS:ValueIndex="0"
              DTS:VariableName="User::intWellDrillAssemblyId" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{c3c1dbd2-a5b4-41f3-9891-4df91e378b8b}"
              DTS:ObjectName="{D7DE3873-4A94-4A65-AE48-B80F95AF9E55}"
              DTS:ValueIndex="1"
              DTS:VariableName="User::intWellDrillPeriodIdForDrillingAssembly" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{68762e45-81fd-4f13-b909-afbe2966f712}"
              DTS:ObjectName="{74E9F29E-EDD1-4544-8C37-BADEA07FAC8D}"
              DTS:ValueIndex="2"
              DTS:VariableName="User::intAssemblyRefNumber" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{8eef2ff3-b4b5-4e43-b362-2018d9416da5}"
              DTS:ObjectName="{81EA5B65-4E6B-4CE9-A698-BEC0F87C452C}"
              DTS:ValueIndex="3"
              DTS:VariableName="User::dblCalculatedLength" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{a91221ee-3ab5-42dc-a598-00859cfc8b83}"
              DTS:ObjectName="{FD8B1D1F-15A6-4426-91AF-4982994E7362}"
              DTS:ValueIndex="4"
              DTS:VariableName="User::dblCalculatedWeight" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{c6f8d783-a4b3-410e-88f1-17c1fbf0a026}"
              DTS:ObjectName="{610A795D-4193-45FE-AD2D-1DDF1A6ADA85}"
              DTS:ValueIndex="5"
              DTS:VariableName="User::boolActiveIndForDrillingAssembly" />
          </DTS:ForEachVariableMappings>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Well Loop\Expression Task"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExpressionTask.ExpressionTask, Microsoft.SqlServer.ExpressionTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Expression Task"
          DTS:DTSID="{90072522-8681-4D0D-BCCC-4E56607FD340}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExpressionTask.ExpressionTask, Microsoft.SqlServer.ExpressionTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Expression Task"
          DTS:TaskContact="Expression Task;Microsoft Corporation; SQL Server 2012; � 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="1">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:ObjectData>
            <ExpressionTask
              Expression="@[User::boolIsChildWell]" />
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Well Loop\Formation Loop"
          DTS:CreationName="STOCK:FOREACHLOOP"
          DTS:Description="Foreach Loop Container"
          DTS:DTSID="{3846da83-bdda-4433-906f-37a7965baba7}"
          DTS:ExecutableType="STOCK:FOREACHLOOP"
          DTS:LocaleID="-1"
          DTS:MaxErrorCount="6"
          DTS:ObjectName="Formation Loop">
          <DTS:ForEachEnumerator
            DTS:CreationName="Microsoft.SqlServer.Dts.Runtime.Enumerators.ADO.ForEachADOEnumerator, Microsoft.SqlServer.ForEachADOEnumerator, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
            DTS:DTSID="{11a4919b-5e32-4728-929d-e64697eb2316}"
            DTS:ObjectName="{4F357A1D-CA44-434A-8085-25C4D1BB103C}">
            <DTS:ObjectData>
              <FEEADO
                EnumType="EnumerateRowsInFirstTable"
                VarName="User::objFormationList" />
            </DTS:ObjectData>
          </DTS:ForEachEnumerator>
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Well Loop\Formation Loop\C# Script to Call Data Gumbo Formation API"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Script Task"
              DTS:DTSID="{66368086-1955-4fd5-a105-3959632ceb04}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="C# Script to Call Data Gumbo Formation API"
              DTS:ThreadHint="6">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:ObjectData>
                <ScriptProject
                  Name="ST_886e89c07bb740c9b54577203a6877d1"
                  VSTAMajorVersion="3"
                  VSTAMinorVersion="0"
                  Language="CSharp"
                  ReadOnlyVariables="User::boolActiveIndForFormation,User::intWellDrillBitPeriodId,User::intWellDrillPeriodIdForFormation,User::objEndDateTimeForFormation,User::objStartDateTimeForFormation,User::strAccessKey,User::strApiKey,User::strConvertedTimeZone,User::strFormationName,User::strServerName,System::UserName">
                  <ProjectItem
                    Name="Properties\AssemblyInfo.cs"
                    Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_edf2eebc7cc446f0833a623c61d69848")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_edf2eebc7cc446f0833a623c61d69848")]
[assembly: AssemblyCopyright("Copyright @  2018")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Resources.resx"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
                  <ProjectItem
                    Name="ScriptMain.cs"
                    Encoding="UTF8"><![CDATA[using System.Net;
using System.IO;
using System.Text;
using System.Web;
using System.Web.Helpers;
using System.Linq;
using System.Text.RegularExpressions;
#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion

namespace ST_edf2eebc7cc446f0833a623c61d69848
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            StringBuilder logMessage = new StringBuilder();
            bool fireAgain = false;
            int tourSheetFormationId = (int)Dts.Variables["User::intWellDrillBitPeriodId"].Value;
            logMessage.AppendFormat("Processing tour sheet formation with id {0}.", tourSheetFormationId); 
            int tourSheetId = (int)Dts.Variables["User::intWellDrillPeriodIdForFormation"].Value;

            DateTime? startDateTime = GetDateTime("User::objStartDateTimeForFormation", "User::strConvertedTimeZone");
            DateTime? endDateTime = GetDateTime("User::objEndDateTimeForFormation", "User::strConvertedTimeZone");

            string formationName = (string)Dts.Variables["User::strFormationName"].Value;
            bool activeInd = (bool)Dts.Variables["User::boolActiveIndForFormation"].Value;

            string serverName = (String)Dts.Variables["User::strServerName"].Value;
            string apiKey = (String)Dts.Variables["User::strApiKey"].Value;
            string accessKey = (String)Dts.Variables["User::strAccessKey"].Value;
            string currentUserId = (String)Dts.Variables["System::UserName"].Value;

            if (currentUserId != null)
            {
                currentUserId = currentUserId.Split('\\').Last();
            }

            ServicePointManager.ServerCertificateValidationCallback = delegate { return true; };
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls | SecurityProtocolType.Ssl3;

            try
            {
                string url = string.Format("https://{0}/api/tourSheetFormation/{1}?apikey={2}&accesskey={3}", serverName, tourSheetFormationId, apiKey, accessKey);
                url = url.Replace(" ", "%20");
                url = url.Replace("$", "%24");

                DateTime now = DateTime.Now;
                TourSheetFormation existingTourSheetFormation = GetExistingTourSheetFormation(tourSheetFormationId, serverName, apiKey, accessKey);

                if (existingTourSheetFormation == null)
                {
                    logMessage.Append(" Not found - will insert.");
                    existingTourSheetFormation = new TourSheetFormation();
                    existingTourSheetFormation.tourSheetFormationId = tourSheetFormationId;
                }
                else
                {
                    logMessage.Append(" Entity found - will check if update is required.");
                }

                if (existingTourSheetFormation.Apply(tourSheetId, startDateTime, endDateTime, formationName, activeInd, currentUserId))
                {
                    int retries = 2;
                    while (retries > 0)
                    {
                        try
                        {
                            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                            logMessage.Append(" Attempting write to DataGumbo API.");
                            string gumboPayload = Json.Encode(existingTourSheetFormation);

                            request.Method = "PUT";
                            request.ContentType = "application/json";
                            gumboPayload = EncodeNonAsciiCharacters(gumboPayload); 
                            request.ContentLength = gumboPayload.Length;
                            StreamWriter requestWriter = new StreamWriter(request.GetRequestStream(), System.Text.Encoding.ASCII);
                            requestWriter.Write(gumboPayload);
                            requestWriter.Close();

                            WebResponse webResponse = request.GetResponse();
                            Stream webStream = webResponse.GetResponseStream();
                            StreamReader responseReader = new StreamReader(webStream);
                            string response = responseReader.ReadToEnd();
                            responseReader.Close();
                            retries = 0; // indicate success
                        }
                        catch (Exception e)
                        {
                            retries--;
                            if (retries > 0)
                            {
                                logMessage.Append(string.Format(" HTTP put failed with exception {0}. Will retry.", e.Message));
                            }
                            else
                            {
                                throw e;
                            }
                        }
                    }
                }
                else
                {
                    logMessage.Append(" No update required.");
                }

                Dts.TaskResult = (int)ScriptResults.Success;
                logMessage.Append("  Returning Success.");
                Dts.Events.FireInformation(0, "Gumbo SSIS", logMessage.ToString(), string.Empty, 0, ref fireAgain);
            }
            catch (Exception e)
            {
                logMessage.AppendFormat("  Encountered error: {0}.", e.Message);
                Dts.Events.FireError(0, "Gumbo SSIS", logMessage.ToString(), string.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        private TourSheetFormation GetExistingTourSheetFormation(int tourSheetFormationId, string serverName, string apiKey, string accessKey)
        {
            try
            {
                string url = string.Format("https://{0}/api/tourSheetFormation/{1}?apikey={2}&accesskey={3}", serverName, tourSheetFormationId, apiKey, accessKey);
                url = url.Replace(" ", "%20");
                url = url.Replace("$", "%24");
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                WebResponse webResponse = request.GetResponse();
                Stream webStream = webResponse.GetResponseStream();
                StreamReader responseReader = new StreamReader(webStream);
                string response = responseReader.ReadToEnd();
                responseReader.Close();
                TourSheetFormation tourSheetFormation = Json.Decode<TourSheetFormation>(response);
                return tourSheetFormation;
            }
            catch (Exception e)
            {
                return null;
            }
        }

       #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        #region data class
        class TourSheetFormation
        {
            public int tourSheetFormationId { get; set; }
            public int tourSheetId { get; set; }
            public DateTime? startDateTime { get; set; }
            public DateTime? endDateTime { get; set; }
            public string formationName { get; set; }
            public bool activeInd { get; set; }
            public string rowCreatedBy { get; set; }
            public string rowChangedBy { get; set; }
            public DateTime? rowCreatedDate { get; set; }
            public DateTime? rowChangedDate { get; set; }

            public bool Apply(int _tourSheetId, DateTime? _startDateTime, DateTime? _endDateTime, string _formationName, bool _activeInd, string currentUserId)
            {
                bool ret = false;
                if (rowCreatedBy == null)
                {
                    rowCreatedBy = currentUserId;
                    ret = true;
                }
                if (rowCreatedDate == null)
                {
                    rowCreatedDate = DateTime.Now;
                    ret = true;
                }
                if (tourSheetId != _tourSheetId)
                {
                    tourSheetId = _tourSheetId;
                    ret = true;
                }
                if (!DateCompare(startDateTime, _startDateTime))
                {
                    startDateTime = _startDateTime.HasValue ? _startDateTime.Value.ToUniversalTime() : (DateTime?)null;
                    ret = true;
                }
                if (!DateCompare(endDateTime, _endDateTime))
                {
                    endDateTime = _endDateTime.HasValue ? _endDateTime.Value.ToUniversalTime() : (DateTime?)null;
                    ret = true;
                }

                if (formationName != _formationName)
                {
                    formationName = _formationName;
                    ret = true;
                }
                if (activeInd != _activeInd)
                {
                    activeInd = _activeInd;
                    ret = true;
                }
                if (ret)
                {
                    rowChangedBy = currentUserId;
                    rowChangedDate = DateTime.Now;
                }
                return ret;
            }
        }
        #endregion

        #region DateTimeConversion
        private static bool DateCompare(DateTime? dtm1, DateTime? dtm2)
        {
            if (dtm1.HasValue)
            {
                if (dtm2.HasValue)
                {
                    DateTime d1 = dtm1.Value;
                    DateTime d2 = dtm2.Value;
                    return d1 == d2;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                return !dtm2.HasValue;
            }
        }

        public DateTime? GetDateTime(string dateTimeVariableName, string timezoneVariableName)
        {
            Object dtmOValue = Dts.Variables[dateTimeVariableName].Value;
            if (dtmOValue == null)
            {
                return null;
            }
            String dtmSValue = dtmOValue.ToString();

            if (string.IsNullOrEmpty(dtmSValue))
            {
                return null;
            }

            DateTime convertedValue = Convert.ToDateTime(dtmSValue);

            if (convertedValue.Kind == DateTimeKind.Unspecified)
            {
                TimeZoneInfo tzInfo = TimeZoneInfo.FindSystemTimeZoneById((String)Dts.Variables[timezoneVariableName].Value);
                TimeSpan offset = tzInfo.GetUtcOffset(convertedValue);
                DateTime afterAdjustment = convertedValue.Subtract(offset);
                return new DateTime(afterAdjustment.Year, afterAdjustment.Month, afterAdjustment.Day, afterAdjustment.Hour, afterAdjustment.Minute, afterAdjustment.Second, DateTimeKind.Utc);
            }
            else
            {
                return convertedValue;
            }
        }

        #endregion

        public static string EncodeNonAsciiCharacters(string value)
        {
            return Regex.Replace(value, @"[^\x00-\x7F]", c => string.Format(@"\u{0:x4}", (int)c.Value[0]));
        }
    }
}]]></ProjectItem>
                  <ProjectItem
                    Name="ST_886e89c07bb740c9b54577203a6877d1.csproj"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{B628C68B-F484-4854-969B-5F5E3096E06C}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_edf2eebc7cc446f0833a623c61d69848</RootNamespace>
    <AssemblyName>ST_886e89c07bb740c9b54577203a6877d1</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Web.Helpers, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
      <DesignTime>True</DesignTime>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\10.0\InstallDir#\devenv.exe" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
                  <ProjectItem
                    Name="Project"
                    Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_edf2eebc7cc446f0833a623c61d69848</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_edf2eebc7cc446f0833a623c61d69848</msb:DisplayName>
		<msb:ProjectId>{F3B727F1-4315-438E-A1B0-3BFF7E5301FD}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_886e89c07bb740c9b54577203a6877d1.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_edf2eebc7cc446f0833a623c61d69848.Properties.Settings.get_Default():ST_edf2eebc7cc446f0833a623c61d69848.Properties.Sett" +
    "ings")]

namespace ST_edf2eebc7cc446f0833a623c61d69848.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.settings"
                    Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Resources.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_edf2eebc7cc446f0833a623c61d69848.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_edf2eebc7cc446f0833a623c61d69848.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_edf2eebc7cc446f0833a623c61d69848.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_edf2eebc7cc446f0833a623c61d69848.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_edf2eebc7cc446f0833a623c61d69848.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
                  <BinaryItem
                    Name="ST_886e89c07bb740c9b54577203a6877d1.dll">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
bFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4w
LjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0
ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAQlNK
QgEAAQAAAAAADAAAAHY0LjAuMzAzMTkAAAAABQBsAAAARAoAACN+AACwCgAAEA8AACNTdHJpbmdz
AAAAAMAZAADkBQAAI1VTAKQfAAAQAAAAI0dVSUQAAAC0HwAAqAMAACNCbG9iAAAAAAAAAAIAAAFX
HaIJCQsAAAD6JTMAFgAAAQAAAEAAAAAGAAAAEgAAACUAAAAfAAAAVQAAAAIAAAAxAAAABgAAAAMA
AAANAAAAGAAAAAEAAAABAAAABgAAAAEAAAACAAAAAgAAAAAACgABAAAAAAAGANQAzQAKAPAA2wAO
AFABJwEGAGwBzQAGAIIBcQEGALMBngEGAFACzQAGAFsCzQAGAJoGgAYGAMUGswYGANwGswYGAPkG
swYGABgHswYGADEHswYGAEoHswYGAGUHswYGAIAHswYGAJkHswYGANIHsgcGAPIHsgcGAEcINAgG
AGQIzQAGAGkIzQAGAI0IswYKALkIowgKANIIowgGAOcIsgcOAAkJJwEGAFkJKwkKAGkJKwkKAIcJ
cwkKAL4JcwkGABUKCQoOACMKJwESAHwKXAoSAJQKXAoGALAKzQAGAMMKzQAGAMoKzQAGANIKzQAW
APUK6QoGABsLAAsKADkLLgsKAHULLgsKAL0LLgsKAM8LLgsaAPEL3gsGAD8MNQwGAFcMCQoGAGoM
NQwGAHcMNQwKAI4MLgsGALgMNQwGAMUMNQwGANoMzQAOAP8MJwEGAHUNzQAGAIgNzQAGAJ4NzQAG
AMINzQAKADoOGw4KAGEOGw4KAJcOGw4KAKkOGw4AAAAAAQAAAAAAAQABAAAAEAAyADwABQABAAEA
AAEQAGsAPAAJAAMABQABABAAdAB/AA0ABAAIAAMBAACjAAAAEQAGABAAAwAQALEAAAAFAAkAEAAR
AJIBEwARAL8BFwARAAkCOQARAOIJHAERAHAOtgIGBpUCcABWgJ0CcwBWgKUCcwABABkEcAABAD8E
cAABAFwEwwABAHsEwwABAJgEywABALcEzgABANIEywABAPAEywABAA4FwwABAC4FwwBQIAAAAACD
GM8BGwABAFggAAAAAJMI1QEfAAEAkSAAAAAAkwjpASQAAQCYIAAAAACTCPUBKQABAKAgAAAAAJYI
GQI9AAIAsyAAAAAAhhjPARsAAgCnIAAAAACRGAIJDQECAMAgAAAAAIYALQIbAAIAuCQAAAAAgQAy
AkcAAgBwJQAAAACRAGQCUAAGALQlAAAAAIYAcAJgAAgAniYAAAAAlgB8AmsACgDIJgAAAACGGM8B
GwALALsgAAAAAJEAlwkRAQsAgSYAAAAAkQBADq8CDwDQJgAAAACGCK0CgQAQANgmAAAAAIYIxgKF
ABAA4SYAAAAAhgjfAoEAEQDpJgAAAACGCO8ChQARAPImAAAAAIYI/wKKABIA+iYAAAAAhggRA5MA
EgADJwAAAACGCCMDigATAAsnAAAAAIYIMwOTABMAFCcAAAAAhghDA50AFAAcJwAAAACGCFUDoQAU
ACUnAAAAAIYIZwOmABUALScAAAAAhgh1A6oAFQA2JwAAAACGCIMDnQAWAD4nAAAAAIYIlAOhABYA
RycAAAAAhgilA50AFwBPJwAAAACGCLYDoQAXAFgnAAAAAIYIxwOKABgAYCcAAAAAhgjaA5MAGABp
JwAAAACGCO0DigAZAHEnAAAAAIYIAASTABkAfCcAAAAAhgATBK8AGgCYKAAAAACGGM8BGwAgAAAA
AQDZBQAAAQBOBQAAAgDfBQAAAwDqBQAABADxBQAAAQD7BQAAAgAABgAAAQAFBgAAAgAaBgAAAQDZ
BQAAAQCiCQAAAgCpCQAAAwCwCQAABAC3CQAAAQBfDgAAAQDZBQAAAQDZBQAAAQDZBQAAAQDZBQAA
AQDZBQAAAQDZBQAAAQDZBQAAAQDZBQAAAQDZBQAAAQDZBQAAAQAvBgAAAgA8BgAAAwBLBgAABABY
BgAABQBnBgAABgByBkkAzwGhAFEAzwGhAFkAzwGhAGEAzwGhAGkAzwGhAHEAzwGhAHkAzwGhAIEA
zwGhAIkAzwGhAJEAzwGhAJkAzwGFAKEAzwEbAKkAzwEbAAkAzwEbALEAewjmALEAlgjtACkAzwHy
AMkAzwH+ANkAzwEbABEAzwEbAOEAzwEbAAkBzwEbABkANQohAREBhgonARkBnQotASEBpgo0AQkB
tgo4ATEB1wpAAUkBKQtHAQEBzwFYAVkBTQteAVkBigtlATEBnwtsATEBpgtzAUEArgt5AQkBtgt+
AWkByAuFAXkB9guVAWkB/QuhAGkBCAyhADEBGAyBAGkBIwyaAWkBRgyfAYkBYAylAZEBzwGrAZkB
ggyhAJkBiAwbAGkBmgy1AaEBpgyfAakBzwG7AbEB0AydALEBiAwbALkB5AydADEBnwvCAREB8AyF
ABEBEw3IAQkAHg2dADEBJw3LAMEBLQ3OAcEBPQ3ZAXkBRw0bAgwATg2mAAwApgpFAkEAWw1KAjEB
Zw1ZAskBfQ1eAkEAlQ1kAtkBqw1qAtkByw1xAkEA2A15AkEA4Q2BAEEA6g2BAEEA9A2BAEEA/A2B
AEEABQ6BAEEAEA6BAEEAzwGBAgwAzwGOAvkBpgqdADEBnw67AvEBzwFYAQECpgvAAhkAzwEbAEEA
rw7JAjEBvw7OAggAHAB3AAgAIAB8ACkAkwAEAS4AOwBnAy4AWwB+Ay4AMwA4Ay4AQwBhAy4AYwCH
Ay4AEwA4Ay4ACwDuAi4AGwBhAy4AIwBhAy4AKwBhA0MAawB8AEkAkwAEAWEAmwB8AIEAmwB8AIMA
qwB8AKEAmwB8ACEBmwB8AEEBmwB8AGEBmwB8AIEBmwB8AKEBmwB8AMABmwB8AMEBmwB8AOABmwB8
AOEBmwB8AAACmwB8AAECmwB8ACACmwB8ACECmwB8AEACmwB8AEECmwB8AGACmwB8AIACmwB8AKAC
mwB8AMACmwB8AOACmwB8AAADmwB8ACADmwB8AEADmwB8AGADmwB8AIADmwB8AKADmwB8AMADmwB8
AOADmwB8AAAEmwB8ACAEmwB8AEAEmwB8AGAEmwB8APkA4gEnAlIClALUAgIAAQADAAMABgAEAAAA
ggEvAAAAAQI0AAAAJQJCAAAATgXRAAAAYwXRAAAAbwXVAAAAfQXVAAAAiQXeAAAAlwXiAAAAoQXe
AAAArgXeAAAAuwXVAAAAygXVAAIAAgADAAIAAwAFAAEABAAFAAIABQAHAAIAEAAJAAEAEQAJAAEA
EwALAAIAEgALAAIAFAANAAEAFQANAAEAFwAPAAIAFgAPAAEAGQARAAIAGAARAAIAGgATAAEAGwAT
AAEAHQAVAAIAHAAVAAIAHgAXAAEAHwAXAAIAIAAZAAEAIQAZAAIAIgAbAAEAIwAbAD4CBIAAAAEA
AACiG7heAAAAAAAAEAgAAAQAAAAAAAAAAAAAAAEAxAAAAAAABAAAAAAAAAAAAAAAAQDNAAAAAAAL
AAAAAAAAAAAAAAAKAAgBAAAAAAsAAAAAAAAAAAAAAAoAPQoAAAAABAAAAAAAAAAAAAAAAQDdCgAA
AAABAAAAAAAAAAAAAACMAd4LAAAAAAAAAAABAAAAzQ4AAAUABAAGAAQAOwBUAXsAIgIAAAAAADxN
b2R1bGU+AFNUXzg4NmU4OWMwN2JiNzQwYzliNTQ1NzcyMDNhNjg3N2QxLmRsbABSZXNvdXJjZXMA
U1RfZWRmMmVlYmM3Y2M0NDZmMDgzM2E2MjNjNjFkNjk4NDguUHJvcGVydGllcwBTZXR0aW5ncwBT
Y3JpcHRNYWluAFNUX2VkZjJlZWJjN2NjNDQ2ZjA4MzNhNjIzYzYxZDY5ODQ4AFNjcmlwdFJlc3Vs
dHMAVG91clNoZWV0Rm9ybWF0aW9uAG1zY29ybGliAFN5c3RlbQBPYmplY3QAU3lzdGVtLkNvbmZp
Z3VyYXRpb24AQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UATWljcm9zb2Z0LlNxbFNlcnZlci5TY3Jp
cHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAVlNUQVJUU2Ny
aXB0T2JqZWN0TW9kZWxCYXNlAEVudW0AU3lzdGVtLlJlc291cmNlcwBSZXNvdXJjZU1hbmFnZXIA
cmVzb3VyY2VNYW4AU3lzdGVtLkdsb2JhbGl6YXRpb24AQ3VsdHVyZUluZm8AcmVzb3VyY2VDdWx0
dXJlAC5jdG9yAGdldF9SZXNvdXJjZU1hbmFnZXIAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAQ3Vs
dHVyZQBkZWZhdWx0SW5zdGFuY2UAZ2V0X0RlZmF1bHQARGVmYXVsdABNYWluAEdldEV4aXN0aW5n
VG91clNoZWV0Rm9ybWF0aW9uAE51bGxhYmxlYDEARGF0ZVRpbWUARGF0ZUNvbXBhcmUAR2V0RGF0
ZVRpbWUARW5jb2RlTm9uQXNjaWlDaGFyYWN0ZXJzAHZhbHVlX18AU3VjY2VzcwBGYWlsdXJlAGdl
dF90b3VyU2hlZXRGb3JtYXRpb25JZABzZXRfdG91clNoZWV0Rm9ybWF0aW9uSWQAZ2V0X3RvdXJT
aGVldElkAHNldF90b3VyU2hlZXRJZABnZXRfc3RhcnREYXRlVGltZQBzZXRfc3RhcnREYXRlVGlt
ZQBnZXRfZW5kRGF0ZVRpbWUAc2V0X2VuZERhdGVUaW1lAGdldF9mb3JtYXRpb25OYW1lAHNldF9m
b3JtYXRpb25OYW1lAGdldF9hY3RpdmVJbmQAc2V0X2FjdGl2ZUluZABnZXRfcm93Q3JlYXRlZEJ5
AHNldF9yb3dDcmVhdGVkQnkAZ2V0X3Jvd0NoYW5nZWRCeQBzZXRfcm93Q2hhbmdlZEJ5AGdldF9y
b3dDcmVhdGVkRGF0ZQBzZXRfcm93Q3JlYXRlZERhdGUAZ2V0X3Jvd0NoYW5nZWREYXRlAHNldF9y
b3dDaGFuZ2VkRGF0ZQBBcHBseQA8dG91clNoZWV0Rm9ybWF0aW9uSWQ+a19fQmFja2luZ0ZpZWxk
ADx0b3VyU2hlZXRJZD5rX19CYWNraW5nRmllbGQAPHN0YXJ0RGF0ZVRpbWU+a19fQmFja2luZ0Zp
ZWxkADxlbmREYXRlVGltZT5rX19CYWNraW5nRmllbGQAPGZvcm1hdGlvbk5hbWU+a19fQmFja2lu
Z0ZpZWxkADxhY3RpdmVJbmQ+a19fQmFja2luZ0ZpZWxkADxyb3dDcmVhdGVkQnk+a19fQmFja2lu
Z0ZpZWxkADxyb3dDaGFuZ2VkQnk+a19fQmFja2luZ0ZpZWxkADxyb3dDcmVhdGVkRGF0ZT5rX19C
YWNraW5nRmllbGQAPHJvd0NoYW5nZWREYXRlPmtfX0JhY2tpbmdGaWVsZAB0b3VyU2hlZXRGb3Jt
YXRpb25JZAB0b3VyU2hlZXRJZABzdGFydERhdGVUaW1lAGVuZERhdGVUaW1lAGZvcm1hdGlvbk5h
bWUAYWN0aXZlSW5kAHJvd0NyZWF0ZWRCeQByb3dDaGFuZ2VkQnkAcm93Q3JlYXRlZERhdGUAcm93
Q2hhbmdlZERhdGUAdmFsdWUAc2VydmVyTmFtZQBhcGlLZXkAYWNjZXNzS2V5AGR0bTEAZHRtMgBk
YXRlVGltZVZhcmlhYmxlTmFtZQB0aW1lem9uZVZhcmlhYmxlTmFtZQBfdG91clNoZWV0SWQAX3N0
YXJ0RGF0ZVRpbWUAX2VuZERhdGVUaW1lAF9mb3JtYXRpb25OYW1lAF9hY3RpdmVJbmQAY3VycmVu
dFVzZXJJZABTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0
ZQBTeXN0ZW0uUmVmbGVjdGlvbgBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5RGVzY3Jp
cHRpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5Q29t
cGFueUF0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRB
dHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAQXNzZW1ibHlDdWx0dXJlQXR0cmli
dXRlAEFzc2VtYmx5VmVyc2lvbkF0dHJpYnV0ZQBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZp
Y2VzAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlB
dHRyaWJ1dGUAU1RfODg2ZTg5YzA3YmI3NDBjOWI1NDU3NzIwM2E2ODc3ZDEAU3lzdGVtLkRpYWdu
b3N0aWNzAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUAVHlwZQBSdW50aW1lVHlwZUhhbmRs
ZQBHZXRUeXBlRnJvbUhhbmRsZQBBc3NlbWJseQBnZXRfQXNzZW1ibHkAU3lzdGVtLkNvbXBvbmVu
dE1vZGVsAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBDb21w
aWxlckdlbmVyYXRlZEF0dHJpYnV0ZQAuY2N0b3IAU1NJU1NjcmlwdFRhc2tFbnRyeVBvaW50QXR0
cmlidXRlAFN5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHkuWDUwOUNlcnRpZmljYXRlcwBYNTA5
Q2VydGlmaWNhdGUAWDUwOUNoYWluAFN5c3RlbS5OZXQuU2VjdXJpdHkAU3NsUG9saWN5RXJyb3Jz
ADxNYWluPmJfXzAAcGFyYW0wAHBhcmFtMQBwYXJhbTIAcGFyYW0zAFJlbW90ZUNlcnRpZmljYXRl
VmFsaWRhdGlvbkNhbGxiYWNrAENTJDw+OV9fQ2FjaGVkQW5vbnltb3VzTWV0aG9kRGVsZWdhdGUx
AFN5c3RlbS5UZXh0AFN0cmluZ0J1aWxkZXIAU2NyaXB0T2JqZWN0TW9kZWwAZ2V0X0R0cwBNaWNy
b3NvZnQuU3FsU2VydmVyLk1hbmFnZWREVFMATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGlt
ZQBWYXJpYWJsZXMAZ2V0X1ZhcmlhYmxlcwBWYXJpYWJsZQBnZXRfSXRlbQBnZXRfVmFsdWUASW50
MzIAQXBwZW5kRm9ybWF0AFN0cmluZwBCb29sZWFuAENoYXIAU3BsaXQAU3lzdGVtLkNvcmUAU3lz
dGVtLkxpbnEARW51bWVyYWJsZQBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYwBJRW51bWVyYWJs
ZWAxAExhc3QAU3lzdGVtLk5ldABTZXJ2aWNlUG9pbnRNYW5hZ2VyAHNldF9TZXJ2ZXJDZXJ0aWZp
Y2F0ZVZhbGlkYXRpb25DYWxsYmFjawBTZWN1cml0eVByb3RvY29sVHlwZQBzZXRfU2VjdXJpdHlQ
cm90b2NvbABGb3JtYXQAUmVwbGFjZQBnZXRfTm93AEFwcGVuZABXZWJSZXF1ZXN0AENyZWF0ZQBI
dHRwV2ViUmVxdWVzdABTeXN0ZW0uV2ViLkhlbHBlcnMASnNvbgBFbmNvZGUAc2V0X01ldGhvZABz
ZXRfQ29udGVudFR5cGUAZ2V0X0xlbmd0aABzZXRfQ29udGVudExlbmd0aABTeXN0ZW0uSU8AU3Ry
ZWFtAEdldFJlcXVlc3RTdHJlYW0ARW5jb2RpbmcAZ2V0X0FTQ0lJAFN0cmVhbVdyaXRlcgBUZXh0
V3JpdGVyAFdyaXRlAENsb3NlAFdlYlJlc3BvbnNlAEdldFJlc3BvbnNlAEdldFJlc3BvbnNlU3Ry
ZWFtAFN0cmVhbVJlYWRlcgBUZXh0UmVhZGVyAFJlYWRUb0VuZABFeGNlcHRpb24AZ2V0X01lc3Nh
Z2UAc2V0X1Rhc2tSZXN1bHQARXZlbnRzT2JqZWN0V3JhcHBlcgBnZXRfRXZlbnRzAFRvU3RyaW5n
AEVtcHR5AEZpcmVJbmZvcm1hdGlvbgBGaXJlRXJyb3IARGVjb2RlAGdldF9IYXNWYWx1ZQBvcF9F
cXVhbGl0eQBJc051bGxPckVtcHR5AENvbnZlcnQAVG9EYXRlVGltZQBEYXRlVGltZUtpbmQAZ2V0
X0tpbmQAVGltZVpvbmVJbmZvAEZpbmRTeXN0ZW1UaW1lWm9uZUJ5SWQAVGltZVNwYW4AR2V0VXRj
T2Zmc2V0AFN1YnRyYWN0AGdldF9ZZWFyAGdldF9Nb250aABnZXRfRGF5AGdldF9Ib3VyAGdldF9N
aW51dGUAZ2V0X1NlY29uZABTeXN0ZW0uVGV4dC5SZWd1bGFyRXhwcmVzc2lvbnMATWF0Y2gAPEVu
Y29kZU5vbkFzY2lpQ2hhcmFjdGVycz5iX18yAGMATWF0Y2hFdmFsdWF0b3IAQ1MkPD45X19DYWNo
ZWRBbm9ueW1vdXNNZXRob2REZWxlZ2F0ZTMAQ2FwdHVyZQBnZXRfQ2hhcnMAUmVnZXgAVG9Vbml2
ZXJzYWxUaW1lAG9wX0luZXF1YWxpdHkAU1RfZWRmMmVlYmM3Y2M0NDZmMDgzM2E2MjNjNjFkNjk4
NDguUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAABxUwBUAF8AZQBkAGYAMgBlAGUAYgBj
ADcAYwBjADQANAA2AGYAMAA4ADMAMwBhADYAMgAzAGMANgAxAGQANgA5ADgANAA4AC4AUAByAG8A
cABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAAA7VQBzAGUAcgA6ADoAaQBuAHQAVwBl
AGwAbABEAHIAaQBsAGwAQgBpAHQAUABlAHIAaQBvAGQASQBkAABZUAByAG8AYwBlAHMAcwBpAG4A
ZwAgAHQAbwB1AHIAIABzAGgAZQBlAHQAIABmAG8AcgBtAGEAdABpAG8AbgAgAHcAaQB0AGgAIABp
AGQAIAB7ADAAfQAuAABNVQBzAGUAcgA6ADoAaQBuAHQAVwBlAGwAbABEAHIAaQBsAGwAUABlAHIA
aQBvAGQASQBkAEYAbwByAEYAbwByAG0AYQB0AGkAbwBuAABFVQBzAGUAcgA6ADoAbwBiAGoAUwB0
AGEAcgB0AEQAYQB0AGUAVABpAG0AZQBGAG8AcgBGAG8AcgBtAGEAdABpAG8AbgAANVUAcwBlAHIA
OgA6AHMAdAByAEMAbwBuAHYAZQByAHQAZQBkAFQAaQBtAGUAWgBvAG4AZQAAQVUAcwBlAHIAOgA6
AG8AYgBqAEUAbgBkAEQAYQB0AGUAVABpAG0AZQBGAG8AcgBGAG8AcgBtAGEAdABpAG8AbgAALVUA
cwBlAHIAOgA6AHMAdAByAEYAbwByAG0AYQB0AGkAbwBuAE4AYQBtAGUAAD9VAHMAZQByADoAOgBi
AG8AbwBsAEEAYwB0AGkAdgBlAEkAbgBkAEYAbwByAEYAbwByAG0AYQB0AGkAbwBuAAAnVQBzAGUA
cgA6ADoAcwB0AHIAUwBlAHIAdgBlAHIATgBhAG0AZQAAH1UAcwBlAHIAOgA6AHMAdAByAEEAcABp
AEsAZQB5AAAlVQBzAGUAcgA6ADoAcwB0AHIAQQBjAGMAZQBzAHMASwBlAHkAACFTAHkAcwB0AGUA
bQA6ADoAVQBzAGUAcgBOAGEAbQBlAAB/aAB0AHQAcABzADoALwAvAHsAMAB9AC8AYQBwAGkALwB0
AG8AdQByAFMAaABlAGUAdABGAG8AcgBtAGEAdABpAG8AbgAvAHsAMQB9AD8AYQBwAGkAawBlAHkA
PQB7ADIAfQAmAGEAYwBjAGUAcwBzAGsAZQB5AD0AewAzAH0AAAMgAAAHJQAyADAAAAMkAAAHJQAy
ADQAADMgAE4AbwB0ACAAZgBvAHUAbgBkACAALQAgAHcAaQBsAGwAIABpAG4AcwBlAHIAdAAuAAFj
IABFAG4AdABpAHQAeQAgAGYAbwB1AG4AZAAgAC0AIAB3AGkAbABsACAAYwBoAGUAYwBrACAAaQBm
ACAAdQBwAGQAYQB0AGUAIABpAHMAIAByAGUAcQB1AGkAcgBlAGQALgABRyAAQQB0AHQAZQBtAHAA
dABpAG4AZwAgAHcAcgBpAHQAZQAgAHQAbwAgAEQAYQB0AGEARwB1AG0AYgBvACAAQQBQAEkALgAA
B1AAVQBUAAAhYQBwAHAAbABpAGMAYQB0AGkAbwBuAC8AagBzAG8AbgAAYSAASABUAFQAUAAgAHAA
dQB0ACAAZgBhAGkAbABlAGQAIAB3AGkAdABoACAAZQB4AGMAZQBwAHQAaQBvAG4AIAB7ADAAfQAu
ACAAVwBpAGwAbAAgAHIAZQB0AHIAeQAuAAApIABOAG8AIAB1AHAAZABhAHQAZQAgAHIAZQBxAHUA
aQByAGUAZAAuAAApIAAgAFIAZQB0AHUAcgBuAGkAbgBnACAAUwB1AGMAYwBlAHMAcwAuAAAVRwB1
AG0AYgBvACAAUwBTAEkAUwAAMyAAIABFAG4AYwBvAHUAbgB0AGUAcgBlAGQAIABlAHIAcgBvAHIA
OgAgAHsAMAB9AC4AABFcAHUAewAwADoAeAA0AH0AABlbAF4AXAB4ADAAMAAtAFwAeAA3AEYAXQAB
AAAACyoNOOT12kOp4Hw8F+nfnwAIt3pcVhk04IkIiYRdzYCAzJEDBhIVAwYSGQMgAAEEAAASFQQA
ABIZBQABARIZBAgAEhUECAASGQMGEgwEAAASDAQIABIMCCAEEhgIDg4ODwACAhURHQERIRURHQER
IQogAhURHQERIQ4OBAABDg4CBggDBhEUBAAAAAAEAQAAAAMgAAgEIAEBCAggABURHQERIQkgAQEV
ER0BESEDIAAOBCABAQ4DIAACBCABAQITIAYCCBURHQERIRURHQERIQ4CDgcGFREdAREhAgYOAgYC
AygACAgoABURHQERIQMoAA4DKAACBgABElkRXQQgABJhBiACAQ4SYQQHARIVBSABARFpCAEAAgAA
AAAAAwAAAQoABAIcEnUSeRF9BAYSgIEFIAASgIkFIAASgI0GIAESgJEcAyAAHAcgAhKAhQ4cBiAB
HQ4dAwwQAQEeABUSgKkBHgADCgEOBSACARwYBgABARKAgQYAAQERgLEGAAIODh0cBSACDg4OBAAA
ESEGIAESgIUOBgABEoC1DggxvzhWrTZONQQAAQ4cBCABAQoFIAASgMEFAAASgMUJIAIBEoDBEoDF
BSAAEoDRBiABARKAwQUAAg4OHAUgABKA4QogBgEIDg4OCBACCCAFAggODg4IOAcZEoCFAggIFREd
AREhFREdAREhDgIODg4ODhIYCBKAuQ4SgMkSgNESgMESgNUSgN0SgN0dAx0cBhABAR4ADgQKARIY
FgcJDhKAuRKA0RKAwRKA1Q4SGBIYHRwGFREdAREhBCAAEwAHAAICESERIQYHAhEhESEEAAECDgUA
AREhDgUgABGA6QYAARKA7Q4HIAERgPERIQcgAREhEYDxDCAHAQgICAgICBGA6QUgAQETABoHCBwO
ESESgO0RgPERIRURHQERIRURHQERIQYAAQ4SgPUEBhKA+QQgAQMICAADDg4OEoD5BCAAESEFAAIC
Dg4ZBwYCFREdAREhFREdAREhESEVER0BESERIUkBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQu
NQEAVA4URnJhbWV3b3JrRGlzcGxheU5hbWUSLk5FVCBGcmFtZXdvcmsgNC41KAEAI1NUX2VkZjJl
ZWJjN2NjNDQ2ZjA4MzNhNjIzYzYxZDY5ODQ4AAAFAQAAAAAWAQARQ29weXJpZ2h0IEAgIDIwMTgA
AAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEAANxMAAAAAAAAAAAAAP5M
AAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwTAAAAAAAAAAAAAAAAAAAAAAAAAAAX0NvckRsbE1h
aW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAAAAAYAACA
AAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWGAAALADAAAA
AAAAAAAAALADNAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAABAAAA
AQC4XqIbAAABALheohs/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBhAHIARgBp
AGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAAsAQQAwAA
AQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAADsAgAAAQAwADAAMAAwADAANABiADAAAABw
ACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBUAF8AZQBkAGYAMgBlAGUA
YgBjADcAYwBjADQANAA2AGYAMAA4ADMAMwBhADYAMgAzAGMANgAxAGQANgA5ADgANAA4AAAAQAAP
AAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADcAMAA3ADQALgAyADQAMgA0ADgA
AAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8AOAA4ADYAZQA4ADkAYwAw
ADcAYgBiADcANAAwAGMAOQBiADUANAA1ADcANwAyADAAMwBhADYAOAA3ADcAZAAxAC4AZABsAGwA
AABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAg
AEAAIAAgADIAMAAxADgAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAA
UwBUAF8AOAA4ADYAZQA4ADkAYwAwADcAYgBiADcANAAwAGMAOQBiADUANAA1ADcANwAyADAAMwBh
ADYAOAA3ADcAZAAxAC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMA
VABfAGUAZABmADIAZQBlAGIAYwA3AGMAYwA0ADQANgBmADAAOAAzADMAYQA2ADIAMwBjADYAMQBk
ADYAOQA4ADQAOAAAAEQADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4A
NwAwADcANAAuADIANAAyADQAOAAAAAAASAAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBp
AG8AbgAAADEALgAwAC4ANwAwADcANAAuADIANAAyADQAOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAwAAAAQPQAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
                </ScriptProject>
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:ForEachVariableMappings>
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{f6a8f9a5-e8d3-4f09-a062-7fc016b6d0ba}"
              DTS:ObjectName="{7F855C2F-5625-42A3-8615-7A03FA52A898}"
              DTS:ValueIndex="0"
              DTS:VariableName="User::intWellDrillBitPeriodId" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{f7bbfa56-a977-4d0e-9fa4-1470ad517ae6}"
              DTS:ObjectName="{2075E5F8-94D0-412D-8EEF-72D94E04C5E0}"
              DTS:ValueIndex="1"
              DTS:VariableName="User::intWellDrillPeriodIdForFormation" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{4c0ae917-6207-4629-9561-fbf50a9c6b44}"
              DTS:ObjectName="{BFF0046D-8FE8-4408-B24E-D500A01E38E9}"
              DTS:ValueIndex="2"
              DTS:VariableName="User::objStartDateTimeForFormation" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{51fded8b-8744-488c-be30-7e78d8f0342b}"
              DTS:ObjectName="{40383EE8-0E5A-483B-9664-D13F3ACBE993}"
              DTS:ValueIndex="3"
              DTS:VariableName="User::objEndDateTimeForFormation" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{2fd8adbb-5031-4e1e-90c4-21d0c4d32758}"
              DTS:ObjectName="{9B69B9B7-EDC6-4D3C-8FD4-0786CBBDCEBE}"
              DTS:ValueIndex="4"
              DTS:VariableName="User::strFormationName" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{39eca826-8412-4326-b914-bf7577322603}"
              DTS:ObjectName="{850C1C60-1BA8-446C-ADC0-0FBFB04AFC75}"
              DTS:ValueIndex="5"
              DTS:VariableName="User::boolActiveIndForFormation" />
          </DTS:ForEachVariableMappings>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Well Loop\Reset WAP ID List"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExpressionTask.ExpressionTask, Microsoft.SqlServer.ExpressionTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Expression Task"
          DTS:DTSID="{e96a9264-f450-40a0-9304-ac74c1a7518e}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExpressionTask.ExpressionTask, Microsoft.SqlServer.ExpressionTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Reset WAP ID List"
          DTS:TaskContact="Expression Task;Microsoft Corporation; SQL Server 2012; � 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="3">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:ObjectData>
            <ExpressionTask
              Expression="@[User::strListOfValidWapIds] =  &quot;&quot;" />
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Well Loop\Tour Sheet Loop"
          DTS:CreationName="STOCK:FOREACHLOOP"
          DTS:Description="Foreach Loop Container"
          DTS:DTSID="{8e858621-1fd2-42cd-8c1e-4dbda448ed94}"
          DTS:ExecutableType="STOCK:FOREACHLOOP"
          DTS:LocaleID="-1"
          DTS:MaxErrorCount="6"
          DTS:ObjectName="Tour Sheet Loop">
          <DTS:ForEachEnumerator
            DTS:CreationName="Microsoft.SqlServer.Dts.Runtime.Enumerators.ADO.ForEachADOEnumerator, Microsoft.SqlServer.ForEachADOEnumerator, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
            DTS:DTSID="{e8b35f52-bf27-4e56-ad82-fdb1872e716c}"
            DTS:ObjectName="{4F357A1D-CA44-434A-8085-25C4D1BB103C}">
            <DTS:ObjectData>
              <FEEADO
                EnumType="EnumerateRowsInFirstTable"
                VarName="User::objTourSheetList" />
            </DTS:ObjectData>
          </DTS:ForEachEnumerator>
          <DTS:Variables>
            <DTS:Variable
              DTS:CreationName=""
              DTS:DTSID="{C31D219E-9C08-4E2B-BBD5-D1B5C49A4DA1}"
              DTS:IncludeInDebugDump="6789"
              DTS:Namespace="User"
              DTS:ObjectName="objOperationalRemarkIdList">
              <DTS:VariableValue
                DTS:DataSubType="ManagedSerializable"
                DTS:DataType="13">
                <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
                  <SOAP-ENV:Body>
                    <xsd:anyType
                      id="ref-1"></xsd:anyType>
                  </SOAP-ENV:Body>
                </SOAP-ENV:Envelope>
              </DTS:VariableValue>
            </DTS:Variable>
            <DTS:Variable
              DTS:CreationName=""
              DTS:DTSID="{EF75A3FA-8D20-440D-9569-51A85AEDD867}"
              DTS:IncludeInDebugDump="2345"
              DTS:Namespace="User"
              DTS:ObjectName="strOperationalRemarkIdList">
              <DTS:VariableValue
                DTS:DataType="8"
                xml:space="preserve"></DTS:VariableValue>
            </DTS:Variable>
          </DTS:Variables>
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Well Loop\Tour Sheet Loop\C# Script to Call Data Gumbo Tour Sheet API"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Script Task"
              DTS:DTSID="{8d7bc502-3072-4dd2-a38c-5fd275dfe832}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="C# Script to Call Data Gumbo Tour Sheet API"
              DTS:ThreadHint="5">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:ObjectData>
                <ScriptProject
                  Name="ST_7c525704a1df459d857b32a1dc4d9dca"
                  VSTAMajorVersion="3"
                  VSTAMinorVersion="0"
                  Language="CSharp"
                  ReadOnlyVariables="User::boolActiveIndForTourSheet,User::intCustomerIdForTourSheet,User::intPeriodObsNo,User::intWellDrillPeriodId,User::intWellIdForTourSheet,User::objEndDateTime,User::objRigId,User::objStartDateTime,User::strAccessKey,User::strApiKey,User::strContractorRepName,User::strConvertedTimeZone,User::strOperatorRepName,User::strServerName,System::UserName">
                  <ProjectItem
                    Name="Properties\AssemblyInfo.cs"
                    Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_caddabf9aaef471e9919e456f03fce18")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_caddabf9aaef471e9919e456f03fce18")]
[assembly: AssemblyCopyright("Copyright @  2018")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Resources.resx"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
                  <ProjectItem
                    Name="ScriptMain.cs"
                    Encoding="UTF8"><![CDATA[using System.Net;
using System.IO;
using System.Text;
using System.Web;
using System.Web.Helpers;
using System.Linq;
using System.Text.RegularExpressions;

#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion


namespace ST_caddabf9aaef471e9919e456f03fce18
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            StringBuilder logMessage = new StringBuilder();
            bool fireAgain = false;
            int tourSheetId = (int)Dts.Variables["User::intWellDrillPeriodId"].Value;
            logMessage.AppendFormat("Processing tour sheet with id {0}.", tourSheetId);
            int wellId = (int)Dts.Variables["User::intWellIdForTourSheet"].Value;
            int customerId = (int)Dts.Variables["User::intCustomerIdForTourSheet"].Value;
            int periodObsNo = (int)Dts.Variables["User::intPeriodObsNo"].Value;

            DateTime? startDateTime = GetDateTime("User::objStartDateTime", "User::strConvertedTimeZone");
            DateTime? endDateTime = GetDateTime("User::objEndDateTime", "User::strConvertedTimeZone");

            string contractorRepName = (string)Dts.Variables["User::strContractorRepName"].Value;
            string operatorRepName = (string)Dts.Variables["User::strOperatorRepName"].Value;
            int? rigId = String.IsNullOrEmpty(Dts.Variables["User::objRigId"].Value.ToString()) ? null : (int?)Convert.ToInt32(Dts.Variables["User::objRigId"].Value.ToString());
            bool activeInd = (bool)Dts.Variables["User::boolActiveIndForTourSheet"].Value;

            string serverName = (String)Dts.Variables["User::strServerName"].Value;
            string apiKey = (String)Dts.Variables["User::strApiKey"].Value;
            string accessKey = (String)Dts.Variables["User::strAccessKey"].Value;
            string currentUserId = (String)Dts.Variables["System::UserName"].Value;

            if (currentUserId != null)
            {
                currentUserId = currentUserId.Split('\\').Last();
            }

            ServicePointManager.ServerCertificateValidationCallback = delegate { return true; };
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls | SecurityProtocolType.Ssl3;

            try
            {
                string url = string.Format("https://{0}/api/tourSheet/{1}?apikey={2}&accesskey={3}", serverName, tourSheetId, apiKey, accessKey);
                url = url.Replace(" ", "%20");
                url = url.Replace("$", "%24");

                DateTime now = DateTime.Now;
                TourSheet existingTourSheet = GetExistingTourSheet(tourSheetId, serverName, apiKey, accessKey);

                if (existingTourSheet == null)
                {
                    logMessage.Append(" Not found - will insert."); 
                    existingTourSheet = new TourSheet();
                    existingTourSheet.tourSheetId = tourSheetId;
                }
                else
                {
                    logMessage.Append(" Entity found - will check if update is required.");
                }

                if (existingTourSheet.Apply(wellId, customerId, periodObsNo, startDateTime, endDateTime, contractorRepName, operatorRepName, rigId, activeInd, currentUserId))
                {
                    int retries = 2;
                    while (retries > 0)
                    {
                        try
                        {
                            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                            logMessage.Append(" Attempting write to DataGumbo API.");
                            string gumboPayload = Json.Encode(existingTourSheet);

                            request.Method = "PUT";
                            request.ContentType = "application/json";

                            gumboPayload = EncodeNonAsciiCharacters(gumboPayload);

                            request.ContentLength = gumboPayload.Length;
                            StreamWriter requestWriter = new StreamWriter(request.GetRequestStream(), System.Text.Encoding.ASCII);
                            requestWriter.Write(gumboPayload);
                            requestWriter.Close();

                            WebResponse webResponse = request.GetResponse();
                            Stream webStream = webResponse.GetResponseStream();
                            StreamReader responseReader = new StreamReader(webStream);
                            string response = responseReader.ReadToEnd();
                            responseReader.Close();
                            retries = 0; // indicate success
                        }
                        catch (Exception e)
                        {
                            retries--;
                            if (retries > 0)
                            {
                                logMessage.Append(string.Format(" HTTP put failed with exception {0}. Will retry.", e.Message));
                            }
                            else
                            {
                                throw e;
                            }
                        }
                    }
                }
                else
                {
                    logMessage.Append(" No update required.");
                }
                Dts.TaskResult = (int)ScriptResults.Success;
                logMessage.Append("  Returning Success.");
                Dts.Events.FireInformation(0, "Gumbo SSIS", logMessage.ToString(), string.Empty, 0, ref fireAgain);
            }
            catch (Exception e)
            {
                logMessage.AppendFormat("  Encountered error: {0}.", e.Message);
                Dts.Events.FireError(0, "Gumbo SSIS", logMessage.ToString(), string.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        private TourSheet GetExistingTourSheet(int tourSheetId, string serverName, string apiKey, string accessKey)
        {
            try
            {
                string url = string.Format("https://{0}/api/tourSheet/{1}?apikey={2}&accesskey={3}", serverName, tourSheetId, apiKey, accessKey);
                url = url.Replace(" ", "%20");
                url = url.Replace("$", "%24");
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                WebResponse webResponse = request.GetResponse();
                Stream webStream = webResponse.GetResponseStream();
                StreamReader responseReader = new StreamReader(webStream);
                string response = responseReader.ReadToEnd();
                responseReader.Close();

                TourSheet tourSheet = Json.Decode<TourSheet>(response);
                return tourSheet;
            }
            catch (Exception e)
            {
                return null;
            }
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        #region data class
        class TourSheet
        {
            public int tourSheetId { get; set; }
            public int wellId { get; set; }
            public int customerId { get; set; }
            public int seqNo { get; set; }
            public DateTime? startDateTime { get; set; }
            public DateTime? endDateTime { get; set; }
            public string contractRepName { get; set; }
            public string operatorRepName { get; set; }
            public int? rigId { get; set; }
            public bool activeInd { get; set; }
            public string rowCreatedBy { get; set; }
            public string rowChangedBy { get; set; }
            public DateTimeOffset? rowCreatedDate { get; set; }
            public DateTimeOffset? rowChangedDate { get; set; }

            public bool Apply(int _wellId, int _customerId, int _seqNo, DateTime? _startDateTime, DateTime? _endDateTime, string _contractorRepName, string _operatorRepName, int? _rigId, bool _activeInd, string currentUserId)
            {
                bool ret = false;
                if (rowCreatedBy == null)
                {
                    rowCreatedBy = currentUserId;
                    ret = true;
                }
                if (rowCreatedDate == null)
                {
                    rowCreatedDate = DateTimeOffset.Now;
                    ret = true;
                }
                if (wellId != _wellId)
                {
                    wellId = _wellId;
                    ret = true;
                }
                if (customerId != _customerId)
                {
                    customerId = _customerId;
                    ret = true;
                }
                if (seqNo != _seqNo)
                {
                    seqNo = _seqNo;
                    ret = true;
                }
                if (!DateCompare(startDateTime, _startDateTime))
                {
                    startDateTime = _startDateTime.HasValue ? _startDateTime.Value.ToUniversalTime() : (DateTime?)null;
                    ret = true;
                }
                if (!DateCompare(endDateTime, _endDateTime))
                {
                    endDateTime = _endDateTime.HasValue ? _endDateTime.Value.ToUniversalTime() : (DateTime?)null;
                    ret = true;
                }

                if (contractRepName != _contractorRepName)
                {
                    contractRepName = _contractorRepName;
                    ret = true;
                }
                if (operatorRepName != _operatorRepName)
                {
                    operatorRepName = _operatorRepName;
                    ret = true;
                }
                if (rigId == null)
                {
                    if (_rigId != null)
                    {
                        rigId = _rigId;
                        ret = true;
                    }
                }
                else
                {
                    if (_rigId == null)
                    {
                        rigId = null;
                        ret = true;
                    }
                    else
                    {
                        if (rigId != _rigId)
                        {
                            rigId = _rigId;
                            ret = true;
                        }
                    }
                }
                if (activeInd != _activeInd)
                {
                    activeInd = _activeInd;
                    ret = true;
                }
                if (ret)
                {
                    startDateTime = _startDateTime.HasValue ? _startDateTime.Value.ToUniversalTime() : (DateTime?)null;
                    endDateTime = _endDateTime.HasValue ? _endDateTime.Value.ToUniversalTime() : (DateTime?)null;
                    rowChangedBy = currentUserId;
                    rowChangedDate = DateTimeOffset.Now;
                }
                return ret;
            }
        }
        #endregion

        #region DateTimeConversion
        private static bool DateCompare(DateTime? dtm1, DateTime? dtm2)
        {
            if (dtm1.HasValue)
            {
                if (dtm2.HasValue)
                {
                    DateTime d1 = dtm1.Value;
                    DateTime d2 = dtm2.Value;
                    return d1 == d2;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                return !dtm2.HasValue;
            }
        }

        public DateTime? GetDateTime(string dateTimeVariableName, string timezoneVariableName)
        {
            Object dtmOValue = Dts.Variables[dateTimeVariableName].Value;
            if (dtmOValue == null)
            {
                return null;
            }
            String dtmSValue = dtmOValue.ToString();

            if (string.IsNullOrEmpty(dtmSValue))
            {
                return null;
            }

            DateTime convertedValue = Convert.ToDateTime(dtmSValue);

            if (convertedValue.Kind == DateTimeKind.Unspecified)
            {
                TimeZoneInfo tzInfo = TimeZoneInfo.FindSystemTimeZoneById((String)Dts.Variables[timezoneVariableName].Value);
                TimeSpan offset = tzInfo.GetUtcOffset(convertedValue);
                DateTime afterAdjustment = convertedValue.Subtract(offset);
                return new DateTime(afterAdjustment.Year, afterAdjustment.Month, afterAdjustment.Day, afterAdjustment.Hour, afterAdjustment.Minute, afterAdjustment.Second, DateTimeKind.Utc);
            }
            else
            {
                return convertedValue;
            }
        }

        #endregion

        public static string EncodeNonAsciiCharacters(string value)
        {
            return Regex.Replace(value, @"[^\x00-\x7F]", c => string.Format(@"\u{0:x4}", (int)c.Value[0]));
        }
    }
}]]></ProjectItem>
                  <ProjectItem
                    Name="Project"
                    Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_caddabf9aaef471e9919e456f03fce18</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_caddabf9aaef471e9919e456f03fce18</msb:DisplayName>
		<msb:ProjectId>{86226F7D-9C67-4168-B21F-08A9D66AF5E7}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_7c525704a1df459d857b32a1dc4d9dca.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
                  <ProjectItem
                    Name="ST_7c525704a1df459d857b32a1dc4d9dca.csproj"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{B0CB28B0-2AA2-4295-8E8B-672258FB7978}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_caddabf9aaef471e9919e456f03fce18</RootNamespace>
    <AssemblyName>ST_7c525704a1df459d857b32a1dc4d9dca</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Web.Helpers, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
      <DesignTime>True</DesignTime>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\10.0\InstallDir#\devenv.exe" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_caddabf9aaef471e9919e456f03fce18.Properties.Settings.get_Default():ST_caddabf9aaef471e9919e456f03fce18.Properties.Sett" +
    "ings")]

namespace ST_caddabf9aaef471e9919e456f03fce18.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.settings"
                    Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Resources.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_caddabf9aaef471e9919e456f03fce18.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_caddabf9aaef471e9919e456f03fce18.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_caddabf9aaef471e9919e456f03fce18.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_caddabf9aaef471e9919e456f03fce18.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_caddabf9aaef471e9919e456f03fce18.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
                  <BinaryItem
                    Name="ST_7c525704a1df459d857b32a1dc4d9dca.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDABZ23FwAAAAAAAAAAOAAAiELAQsAADQAAAAIAAAAAAAArlIA
AAAgAAAAYAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACgAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAFhSAABTAAAAAGAAAAgEAAAAAAAAAAAAAAAAAAAA
AAAAAIAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAtDIAAAAgAAAANAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAAgEAAAAYAAAAAYAAAA2AAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAIAAAAACAAAAPAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAACQ
UgAAAAAAAEgAAAACAAUAiCsAANAmAAABAAAAAAAAANAqAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKA4AAAoqEzACAC0AAAABAAARfgEAAAQtIHIBAABw0AIA
AAIoDwAACm8QAAAKcxEAAAoKBoABAAAEfgEAAAQqGn4CAAAEKh4CgAIAAAQqGn4DAAAEKi5zBgAA
BoADAAAEKh4CKBQAAAoqChcqAAAbMAsAfwQAAAIAABFzFgAACgoWCwIoFwAACm8YAAAKcnMAAHBv
GQAACm8aAAAKpSYAAAEMBnKpAABwCIwmAAABbxsAAAomAigXAAAKbxgAAApy7wAAcG8ZAAAKbxoA
AAqlJgAAAQ0CKBcAAApvGAAACnInAQBwbxkAAApvGgAACqUmAAABEwQCKBcAAApvGAAACnJnAQBw
bxkAAApvGgAACqUmAAABEwUCcpEBAHByvwEAcCgLAAAGEwYCcvUBAHByvwEAcCgLAAAGEwcCKBcA
AApvGAAACnIfAgBwbxkAAApvGgAACnQnAAABEwgCKBcAAApvGAAACnJVAgBwbxkAAApvGgAACnQn
AAABEwkCKBcAAApvGAAACnKHAgBwbxkAAApvGgAACm8cAAAKKB0AAAotKwIoFwAACm8YAAAKcocC
AHBvGQAACm8aAAAKbxwAAAooHgAACnMfAAAKKwoSG/4VAQAAGxEbEwoCKBcAAApvGAAACnKlAgBw
bxkAAApvGgAACqUpAAABEwsCKBcAAApvGAAACnLlAgBwbxkAAApvGgAACnQnAAABEwwCKBcAAApv
GAAACnINAwBwbxkAAApvGgAACnQnAAABEw0CKBcAAApvGAAACnItAwBwbxkAAApvGgAACnQnAAAB
Ew4CKBcAAApvGAAACnJTAwBwbxkAAApvGgAACnQnAAABEw8RDyweEQ8XjSoAAAETHBEcFh9cnREc
byAAAAooAQAAKxMPfgQAAAQtERT+Bg4AAAZzIgAACoAEAAAEfgQAAAQoIwAACiDwDAAAKCQAAApy
dQMAcBqNAQAAARMdER0WEQyiER0XCIwmAAABohEdGBENohEdGREOohEdKCUAAAoTEBEQcuMDAHBy
5wMAcG8mAAAKExAREHLvAwBwcvMDAHBvJgAAChMQKCcAAAomAggRDBENEQ4oCQAABhMREREtHQZy
+wMAcG8oAAAKJnMtAAAGExEREQhvEQAABisMBnIvBABwbygAAAomEREJEQQRBREGEQcRCBEJEQoR
CxEPbywAAAY54wAAABgTEjjRAAAAERAoKQAACnQwAAABExMGcpMEAHBvKAAACiYRESgqAAAKExQR
E3LbBABwbysAAAoRE3LjBABwbywAAAoRFCgMAAAGExQRExEUby0AAApqby4AAAoRE28vAAAKKDAA
AApzMQAAChMVERURFG8yAAAKERVvMwAAChETbzQAAAoTFhEWbzUAAAoTFxEXczYAAAoTGBEYbzcA
AAomERhvOAAAChYTEt4sExkREhdZExIREhYxGgZyBQUAcBEZbzkAAAooOgAACm8oAAAKJisDERl6
3gAREhY9J////ysMBnJnBQBwbygAAAomAigXAAAKFm87AAAKBnKRBQBwbygAAAomAigXAAAKbzwA
AAoWcrsFAHAGbxwAAAp+PQAAChYSAW8+AAAK3kYTGgZy0QUAcBEabzkAAApvGwAACiYCKBcAAApv
PAAAChZyuwUAcAZvHAAACn49AAAKFm8/AAAKJgIoFwAAChdvOwAACt4AKgBBNAAAAAAAABMDAACl
AAAAuAMAACwAAAA5AAABAAAAAFICAADmAQAAOAQAAEYAAAA5AAABGzAEAJsAAAADAAARcnUDAHAa
jQEAAAETCBEIFgSiEQgXA4wmAAABohEIGAWiEQgZDgSiEQgoJQAACgoGcuMDAHBy5wMAcG8mAAAK
CgZy7wMAcHLzAwBwbyYAAAoKBigpAAAKdDAAAAELB280AAAKDAhvNQAACg0JczYAAAoTBBEEbzcA
AAoTBREEbzgAAAoRBSgCAAArEwYRBhMH3gYmFBMH3gARByoAARAAAAAAAACSkgAGOQAAARMwAgA3
AAAABAAAEQ8AKEEAAAosIw8BKEEAAAosGA8AKEIAAAoKDwEoQgAACgsGByhDAAAKKhYqDwEoQQAA
Chb+ASoAEzAHAMEAAAAFAAARAigXAAAKbxgAAAoDbxkAAApvGgAACgoGLQsSBv4VAgAAGxEGKgZv
HAAACgsHKB0AAAosCxIH/hUCAAAbEQcqByhEAAAKDBICKEUAAAotawIoFwAACm8YAAAKBG8ZAAAK
bxoAAAp0JwAAAShGAAAKDQkIb0cAAAoTBBICEQQoSAAAChMFEgUoSQAAChIFKEoAAAoSBShLAAAK
EgUoTAAAChIFKE0AAAoSBShOAAAKF3NPAAAKc1AAAAoqCHNQAAAKKnJyBQYAcAJvUQAAChZvUgAA
CowmAAABKDoAAAoqpgJyFwYAcH4FAAAELREU/gYPAAAGc1MAAAqABQAABH4FAAAEKFQAAAoqHgIo
VQAACioeAnsJAAAEKiICA30JAAAEKh4CewoAAAQqIgIDfQoAAAQqHgJ7CwAABCoiAgN9CwAABCoe
AnsMAAAEKiICA30MAAAEKh4Cew0AAAQqIgIDfQ0AAAQqHgJ7DgAABCoiAgN9DgAABCoeAnsPAAAE
KiICA30PAAAEKh4CexAAAAQqIgIDfRAAAAQqHgJ7EQAABCoiAgN9EQAABCoeAnsSAAAEKiICA30S
AAAEKh4CexMAAAQqIgIDfRMAAAQqHgJ7FAAABCoiAgN9FAAABCoeAnsVAAAEKiICA30VAAAEKh4C
exYAAAQqIgIDfRYAAAQqAAATMAIAMAIAAAYAABEWCgIoJAAABi0KAg4KKCUAAAYXCgIoKAAABgsS
AShWAAAKLRICKFcAAApzWAAACigpAAAGFwoCKBIAAAYDLgkCAygTAAAGFwoCKBQAAAYELgkCBCgV
AAAGFwoCKBYAAAYFLgkCBSgXAAAGFwoCKBgAAAYOBCgKAAAGLTACDwQoQQAACi0LEgL+FQIAABsI
KxQPBChCAAAKDRIDKFkAAApzUAAACigZAAAGFwoCKBoAAAYOBSgKAAAGLTICDwUoQQAACi0MEgT+
FQIAABsRBCsVDwUoQgAAChMFEgUoWQAACnNQAAAKKBsAAAYXCgIoHAAABg4GKFoAAAosCgIOBigd
AAAGFwoCKB4AAAYOByhaAAAKLAoCDgcoHwAABhcKAiggAAAGEwYSBihbAAAKLRUPCChbAAAKLGcC
DggoIQAABhcKK1sPCChbAAAKLRQCEgf+FQEAABsRByghAAAGFworPgIoIAAABhMIDggTCRIIKFwA
AAoSCShcAAAKMxUSCChbAAAKEgkoWwAACv4BFv4BKwEXLAoCDggoIQAABhcKAigiAAAGDgkuCgIO
CSgjAAAGFwoGLHgCDwQoQQAACi0MEgr+FQIAABsRCisVDwQoQgAAChMLEgsoWQAACnNQAAAKKBkA
AAYCDwUoQQAACi0MEgz+FQIAABsRDCsVDwUoQgAAChMNEg0oWQAACnNQAAAKKBsAAAYCDgooJwAA
BgIoVwAACnNYAAAKKCsAAAYGKh4CKA4AAAoqAAAAALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJl
c291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVy
ZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJj
ZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAABCU0pCAQABAAAAAAAM
AAAAdjQuMC4zMDMxOQAAAAAFAGwAAADACwAAI34AACwMAAAkEAAAI1N0cmluZ3MAAAAAUBwAADQG
AAAjVVMAhCIAABAAAAAjR1VJRAAAAJQiAAA8BAAAI0Jsb2IAAAAAAAAAAgAAAVcdogkJCwAAAPol
MwAWAAABAAAAQQAAAAYAAAAWAAAALQAAACcAAABcAAAAAgAAAD0AAAAGAAAAAwAAABEAAAAgAAAA
AwAAAAEAAAAGAAAAAQAAAAIAAAACAAAAAAAKAAEAAAAAAAYAywDEAAoA5wDSAA4ARwEeAQYAYwHE
AAYAeQFoAQYAqgGVAQYAPgLEAAYASQLEAAYACwTEAAYAkQd3BwYAvAeqBwYA0weqBwYA8AeqBwYA
DwiqBwYAKAiqBwYAQQiqBwYAXAiqBwYAdwiqBwYAkAiqBwYAyQipCAYA6QipCAYAPgkrCQYAWwnE
AAYAYAnEAAYAhAmqBwoAsAmaCQoAyQmaCQYA3gmpCA4AAAoeAQYAUAoiCgoAYAoiCgoAfgpqCgoA
tQpqCgYADAsACw4AGgseARIAcwtTCxIAiwtTCwYApwvEAAYAugvEAAYA2AvEAAYA6AvEAAYA8AvE
ABYAEwwHDAYAOQweDAoAVwxMDAoAkwxMDAoA2wxMDAoA7QxMDBoADw38DAYAXQ1TDQYAdQ0ACwYA
iA1TDQYAlQ1TDQoArA1MDAYA1g1TDQYA4w1TDQYA+A3EAA4AHQ4eAQYAhw7EAAYAnQ7EAAYAwQ7E
AAoAOQ8aDwoAYA8aDwoAlg8aDwoAqA8aDwAAAAABAAAAAAABAAEAAAAQADIAPAAFAAEAAQAAARAA
awA8AAkAAwAFAAEAEAB0AH8ADQAEAAgAAwEAAKMAAAARAAYAEAADABAAsQAAAAUACQAQABEAiQET
ABEAtgEXABEAAAI5ABEA2QppAREAbw8bAwYGgwJwAFaAiwJzAFaAkwJzAAEAbARwAAEAiQRwAAEA
oQRwAAEAvQRwAAEA1ATvAAEA8wTvAAEAEAX3AAEAMQX3AAEAUgX6AAEAaQUBAQEAhAX3AAEAogX3
AAEAwAUEAQEA4AUEAVAgAAAAAIMYxgEbAAEAWCAAAAAAkwjMAR8AAQCRIAAAAACTCOABJAABAJgg
AAAAAJMI7AEpAAEAoCAAAAAAlggQAj0AAgCzIAAAAACGGMYBGwACAKcgAAAAAJEY+QlZAQIAwCAA
AAAAhgAkAhsAAgCAJQAAAACBACkCRwACADgmAAAAAJEAUgJQAAYAfCYAAAAAhgBeAmAACABmJwAA
AACWAGoCawAKAJAnAAAAAIYYxgEbAAsAuyAAAAAAkQCOCl0BCwBJJwAAAACRAD8PFAMPAJgnAAAA
AIYImwKBABAAoCcAAAAAhgirAoUAEACpJwAAAACGCLsCgQARALEnAAAAAIYIxgKFABEAuicAAAAA
hgjRAoEAEgDCJwAAAACGCOAChQASAMsnAAAAAIYI7wKBABMA0ycAAAAAhgj5AoUAEwDcJwAAAACG
CAMDigAUAOQnAAAAAIYIFQOTABQA7ScAAAAAhggnA4oAFQD1JwAAAACGCDcDkwAVAP4nAAAAAIYI
RwOdABYABigAAAAAhghbA6EAFgAPKAAAAACGCG8DnQAXABcoAAAAAIYIgwOhABcAICgAAAAAhgiX
A6YAGAAoKAAAAACGCKEDrgAYADEoAAAAAIYIqwO3ABkAOSgAAAAAhgi5A7sAGQBCKAAAAACGCMcD
nQAaAEooAAAAAIYI2AOhABoAUygAAAAAhgjpA50AGwBbKAAAAACGCPoDoQAbAGQoAAAAAIYIGgTA
ABwAbCgAAAAAhggtBMkAHAB1KAAAAACGCEAEwAAdAH0oAAAAAIYIUwTJAB0AiCgAAAAAhgBmBNMA
HgDEKgAAAACGGMYBGwAoAAAAAQCmBgAAAQAABgAAAgCsBgAAAwC3BgAABAC+BgAAAQDIBgAAAgDN
BgAAAQDSBgAAAgDnBgAAAQCmBgAAAQCZCgAAAgCgCgAAAwCnCgAABACuCgAAAQBeDwAAAQCmBgAA
AQCmBgAAAQCmBgAAAQCmBgAAAQCmBgAAAQCmBgAAAQCmBgAAAQCmBgAAAQCmBgAAAQCmBgAAAQCm
BgAAAQCmBgAAAQCmBgAAAQCmBgAAAQD8BgAAAgAEBwAAAwAQBwAABAAXBwAABQAmBwAABgAzBwAA
BwBGBwAACABXBwAACQBeBwAACgBpB1EAxgGhAFkAxgGhAGEAxgGhAGkAxgGhAHEAxgGhAHkAxgGh
AIEAxgGhAIkAxgGhAJEAxgGhAJkAxgGhAKEAxgGFAKkAxgEbALEAxgEbAAkAxgEbALkAcgkyAbkA
jQk5ASkAxgE+AdEAxgFKAeEAxgEbABEAxgEbAOkAxgEbABEBxgEbABkALAtuARkBfQt0ASEBlAt6
ASkBnQuBAREBrQuFAQkAwQudADkByguNAUEB4AuSAQwAxgGdATkB9QujAVkBRwyqAQkBxgG7AWkB
awzBAWkBqAzIATkBvQzPATkBxAzWAUEAzAzcAREB1AzhAXkB5gzoAYkBFA34AXkBGw2hAHkBJg2h
ADkBNg2BAHkBQQ39AXkBZA0CApkBfg0IAqEBxgEOAqkBoA2hAKkBpg0bAHkBuA0YArEBxA0CArkB
xgEeAsEB7g2dAMEBpg0bAMkBAg6dADkBvQwlAhkBDg6FABkBMQ4rAjkBPA73ANEBQg4xAtEBUg48
AokBXA6LAhQAYw63ABQAnQu1AkEAcA66AkEBfA7JAkEAlA7PAuEBqg7VAuEByg7cAkEA1w7kAkEA
4A6BAEEA6Q6BAEEA8w6BAEEA+w6BAEEABA+BAEEADw+BAEEAxgHsAhQAxgGdAQECnQudADkBng8g
A/kBxgG7AQkCxAwlAxkAxgEbABwAYw63AEkAzAw1AxwAxgGdAUEArg86AzkBvg8/AwwAYw63AAwA
zA+1AggAHAB3AAgAIAB8ACkAkwBQAS4AOwD8Ay4AWwATBC4AMwDNAy4AQwD2Ay4AYwAcBC4AEwDN
Ay4ACwCDAy4AGwD2Ay4AIwD2Ay4AKwD2A0MAawB8AEkAkwBQAWEAmwB8AIEAmwB8AIMAqwB8AKEA
mwB8ACEBmwB8AEEBmwB8AGEBmwB8AIEBmwB8AKEBmwB8AMABmwB8AMEBmwB8AOABmwB8AOEBmwB8
AAACmwB8AAECmwB8ACACmwB8ACECmwB8AEACmwB8AEECmwB8AGACmwB8AGECmwB8AIACmwB8AIEC
mwB8AKACmwB8AKECmwB8AMACmwB8AMECmwB8AOACmwB8AAADmwB8ACADmwB8AEADmwB8AGADmwB8
AIADmwB8AKADmwB8AMADmwB8AOADmwB8AAAEmwB8ACAEmwB8AEAEmwB8AGAEmwB8AIAEmwB8AKAE
mwB8AMAEmwB8AOAEmwB8AAAFmwB8ACAFmwB8AEAFmwB8AGAFmwB8AEUBRQKXAsIC+QJFAwIAAQAD
AAMABgAEAAAAeQEvAAAA+AE0AAAAHAJCAAAAAAYMAQAADAYMAQAAEwYMAQAAHgYMAQAAJAYQAQAA
MgYQAQAAPgYZAQAATgYZAQAAXgYdAQAAZAYlAQAAbgYZAQAAewYZAQAAiAYpAQAAlwYpAQIAAgAD
AAEABAAFAAIAAwAFAAIABQAHAAIAEAAJAAEAEQAJAAIAEgALAAEAEwALAAIAFAANAAEAFQANAAIA
FgAPAAEAFwAPAAIAGAARAAEAGQARAAEAGwATAAIAGgATAAIAHAAVAAEAHQAVAAIAHgAXAAEAHwAX
AAIAIAAZAAEAIQAZAAEAIwAbAAIAIgAbAAIAJAAdAAEAJQAdAAEAJwAfAAIAJgAfAAEAKQAhAAIA
KAAhAAIAKgAjAAEAKwAjAJcBrgIuAwSAAAABAAAAohuTXgAAAAAAAAcJAAAEAAAAAAAAAAAAAAAB
ALsAAAAAAAQAAAAAAAAAAAAAAAEAxAAAAAAACwAAAAAAAAAAAAAACgD/AAAAAAALAAAAAAAAAAAA
AAAKADQLAAAAAAQAAAAAAAAAAAAAAAEA+wsAAAAAAQAAAAAAAAAAAAAA7wH8DAAAAAAAAAAAAQAA
AN4PAAAFAAQABgAEAEMAtwGBAJICAAAAAAA8TW9kdWxlPgBTVF83YzUyNTcwNGExZGY0NTlkODU3
YjMyYTFkYzRkOWRjYS5kbGwAUmVzb3VyY2VzAFNUX2NhZGRhYmY5YWFlZjQ3MWU5OTE5ZTQ1NmYw
M2ZjZTE4LlByb3BlcnRpZXMAU2V0dGluZ3MAU2NyaXB0TWFpbgBTVF9jYWRkYWJmOWFhZWY0NzFl
OTkxOWU0NTZmMDNmY2UxOABTY3JpcHRSZXN1bHRzAFRvdXJTaGVldABtc2NvcmxpYgBTeXN0ZW0A
T2JqZWN0AFN5c3RlbS5Db25maWd1cmF0aW9uAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAE1pY3Jv
c29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5T
Y3JpcHRUYXNrAFZTVEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBFbnVtAFN5c3RlbS5SZXNvdXJj
ZXMAUmVzb3VyY2VNYW5hZ2VyAHJlc291cmNlTWFuAFN5c3RlbS5HbG9iYWxpemF0aW9uAEN1bHR1
cmVJbmZvAHJlc291cmNlQ3VsdHVyZQAuY3RvcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAGdldF9DdWx0
dXJlAHNldF9DdWx0dXJlAEN1bHR1cmUAZGVmYXVsdEluc3RhbmNlAGdldF9EZWZhdWx0AERlZmF1
bHQATWFpbgBHZXRFeGlzdGluZ1RvdXJTaGVldABOdWxsYWJsZWAxAERhdGVUaW1lAERhdGVDb21w
YXJlAEdldERhdGVUaW1lAEVuY29kZU5vbkFzY2lpQ2hhcmFjdGVycwB2YWx1ZV9fAFN1Y2Nlc3MA
RmFpbHVyZQBnZXRfdG91clNoZWV0SWQAc2V0X3RvdXJTaGVldElkAGdldF93ZWxsSWQAc2V0X3dl
bGxJZABnZXRfY3VzdG9tZXJJZABzZXRfY3VzdG9tZXJJZABnZXRfc2VxTm8Ac2V0X3NlcU5vAGdl
dF9zdGFydERhdGVUaW1lAHNldF9zdGFydERhdGVUaW1lAGdldF9lbmREYXRlVGltZQBzZXRfZW5k
RGF0ZVRpbWUAZ2V0X2NvbnRyYWN0UmVwTmFtZQBzZXRfY29udHJhY3RSZXBOYW1lAGdldF9vcGVy
YXRvclJlcE5hbWUAc2V0X29wZXJhdG9yUmVwTmFtZQBnZXRfcmlnSWQAc2V0X3JpZ0lkAGdldF9h
Y3RpdmVJbmQAc2V0X2FjdGl2ZUluZABnZXRfcm93Q3JlYXRlZEJ5AHNldF9yb3dDcmVhdGVkQnkA
Z2V0X3Jvd0NoYW5nZWRCeQBzZXRfcm93Q2hhbmdlZEJ5AERhdGVUaW1lT2Zmc2V0AGdldF9yb3dD
cmVhdGVkRGF0ZQBzZXRfcm93Q3JlYXRlZERhdGUAZ2V0X3Jvd0NoYW5nZWREYXRlAHNldF9yb3dD
aGFuZ2VkRGF0ZQBBcHBseQA8dG91clNoZWV0SWQ+a19fQmFja2luZ0ZpZWxkADx3ZWxsSWQ+a19f
QmFja2luZ0ZpZWxkADxjdXN0b21lcklkPmtfX0JhY2tpbmdGaWVsZAA8c2VxTm8+a19fQmFja2lu
Z0ZpZWxkADxzdGFydERhdGVUaW1lPmtfX0JhY2tpbmdGaWVsZAA8ZW5kRGF0ZVRpbWU+a19fQmFj
a2luZ0ZpZWxkADxjb250cmFjdFJlcE5hbWU+a19fQmFja2luZ0ZpZWxkADxvcGVyYXRvclJlcE5h
bWU+a19fQmFja2luZ0ZpZWxkADxyaWdJZD5rX19CYWNraW5nRmllbGQAPGFjdGl2ZUluZD5rX19C
YWNraW5nRmllbGQAPHJvd0NyZWF0ZWRCeT5rX19CYWNraW5nRmllbGQAPHJvd0NoYW5nZWRCeT5r
X19CYWNraW5nRmllbGQAPHJvd0NyZWF0ZWREYXRlPmtfX0JhY2tpbmdGaWVsZAA8cm93Q2hhbmdl
ZERhdGU+a19fQmFja2luZ0ZpZWxkAHRvdXJTaGVldElkAHdlbGxJZABjdXN0b21lcklkAHNlcU5v
AHN0YXJ0RGF0ZVRpbWUAZW5kRGF0ZVRpbWUAY29udHJhY3RSZXBOYW1lAG9wZXJhdG9yUmVwTmFt
ZQByaWdJZABhY3RpdmVJbmQAcm93Q3JlYXRlZEJ5AHJvd0NoYW5nZWRCeQByb3dDcmVhdGVkRGF0
ZQByb3dDaGFuZ2VkRGF0ZQB2YWx1ZQBzZXJ2ZXJOYW1lAGFwaUtleQBhY2Nlc3NLZXkAZHRtMQBk
dG0yAGRhdGVUaW1lVmFyaWFibGVOYW1lAHRpbWV6b25lVmFyaWFibGVOYW1lAF93ZWxsSWQAX2N1
c3RvbWVySWQAX3NlcU5vAF9zdGFydERhdGVUaW1lAF9lbmREYXRlVGltZQBfY29udHJhY3RvclJl
cE5hbWUAX29wZXJhdG9yUmVwTmFtZQBfcmlnSWQAX2FjdGl2ZUluZABjdXJyZW50VXNlcklkAFN5
c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAFN5c3RlbS5S
ZWZsZWN0aW9uAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJp
YnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmli
dXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBB
c3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBBc3NlbWJseUN1bHR1cmVBdHRyaWJ1dGUAQXNzZW1i
bHlWZXJzaW9uQXR0cmlidXRlAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAQ29tcGls
YXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBT
VF83YzUyNTcwNGExZGY0NTlkODU3YjMyYTFkYzRkOWRjYQBTeXN0ZW0uRGlhZ25vc3RpY3MARGVi
dWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBUeXBlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVG
cm9tSGFuZGxlAEFzc2VtYmx5AGdldF9Bc3NlbWJseQBTeXN0ZW0uQ29tcG9uZW50TW9kZWwARWRp
dG9yQnJvd3NhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZVN0YXRlAENvbXBpbGVyR2VuZXJh
dGVkQXR0cmlidXRlAC5jY3RvcgBTU0lTU2NyaXB0VGFza0VudHJ5UG9pbnRBdHRyaWJ1dGUAU3lz
dGVtLlNlY3VyaXR5LkNyeXB0b2dyYXBoeS5YNTA5Q2VydGlmaWNhdGVzAFg1MDlDZXJ0aWZpY2F0
ZQBYNTA5Q2hhaW4AU3lzdGVtLk5ldC5TZWN1cml0eQBTc2xQb2xpY3lFcnJvcnMAPE1haW4+Yl9f
MABwYXJhbTAAcGFyYW0xAHBhcmFtMgBwYXJhbTMAUmVtb3RlQ2VydGlmaWNhdGVWYWxpZGF0aW9u
Q2FsbGJhY2sAQ1MkPD45X19DYWNoZWRBbm9ueW1vdXNNZXRob2REZWxlZ2F0ZTEAU3lzdGVtLlRl
eHQAU3RyaW5nQnVpbGRlcgBTY3JpcHRPYmplY3RNb2RlbABnZXRfRHRzAE1pY3Jvc29mdC5TcWxT
ZXJ2ZXIuTWFuYWdlZERUUwBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lAFZhcmlhYmxl
cwBnZXRfVmFyaWFibGVzAFZhcmlhYmxlAGdldF9JdGVtAGdldF9WYWx1ZQBJbnQzMgBBcHBlbmRG
b3JtYXQAU3RyaW5nAFRvU3RyaW5nAElzTnVsbE9yRW1wdHkAQ29udmVydABUb0ludDMyAEJvb2xl
YW4AQ2hhcgBTcGxpdABTeXN0ZW0uQ29yZQBTeXN0ZW0uTGlucQBFbnVtZXJhYmxlAFN5c3RlbS5D
b2xsZWN0aW9ucy5HZW5lcmljAElFbnVtZXJhYmxlYDEATGFzdABTeXN0ZW0uTmV0AFNlcnZpY2VQ
b2ludE1hbmFnZXIAc2V0X1NlcnZlckNlcnRpZmljYXRlVmFsaWRhdGlvbkNhbGxiYWNrAFNlY3Vy
aXR5UHJvdG9jb2xUeXBlAHNldF9TZWN1cml0eVByb3RvY29sAEZvcm1hdABSZXBsYWNlAGdldF9O
b3cAQXBwZW5kAFdlYlJlcXVlc3QAQ3JlYXRlAEh0dHBXZWJSZXF1ZXN0AFN5c3RlbS5XZWIuSGVs
cGVycwBKc29uAEVuY29kZQBzZXRfTWV0aG9kAHNldF9Db250ZW50VHlwZQBnZXRfTGVuZ3RoAHNl
dF9Db250ZW50TGVuZ3RoAFN5c3RlbS5JTwBTdHJlYW0AR2V0UmVxdWVzdFN0cmVhbQBFbmNvZGlu
ZwBnZXRfQVNDSUkAU3RyZWFtV3JpdGVyAFRleHRXcml0ZXIAV3JpdGUAQ2xvc2UAV2ViUmVzcG9u
c2UAR2V0UmVzcG9uc2UAR2V0UmVzcG9uc2VTdHJlYW0AU3RyZWFtUmVhZGVyAFRleHRSZWFkZXIA
UmVhZFRvRW5kAEV4Y2VwdGlvbgBnZXRfTWVzc2FnZQBzZXRfVGFza1Jlc3VsdABFdmVudHNPYmpl
Y3RXcmFwcGVyAGdldF9FdmVudHMARW1wdHkARmlyZUluZm9ybWF0aW9uAEZpcmVFcnJvcgBEZWNv
ZGUAZ2V0X0hhc1ZhbHVlAG9wX0VxdWFsaXR5AFRvRGF0ZVRpbWUARGF0ZVRpbWVLaW5kAGdldF9L
aW5kAFRpbWVab25lSW5mbwBGaW5kU3lzdGVtVGltZVpvbmVCeUlkAFRpbWVTcGFuAEdldFV0Y09m
ZnNldABTdWJ0cmFjdABnZXRfWWVhcgBnZXRfTW9udGgAZ2V0X0RheQBnZXRfSG91cgBnZXRfTWlu
dXRlAGdldF9TZWNvbmQAU3lzdGVtLlRleHQuUmVndWxhckV4cHJlc3Npb25zAE1hdGNoADxFbmNv
ZGVOb25Bc2NpaUNoYXJhY3RlcnM+Yl9fMgBjAE1hdGNoRXZhbHVhdG9yAENTJDw+OV9fQ2FjaGVk
QW5vbnltb3VzTWV0aG9kRGVsZWdhdGUzAENhcHR1cmUAZ2V0X0NoYXJzAFJlZ2V4AFRvVW5pdmVy
c2FsVGltZQBvcF9JbmVxdWFsaXR5AEdldFZhbHVlT3JEZWZhdWx0AFNUX2NhZGRhYmY5YWFlZjQ3
MWU5OTE5ZTQ1NmYwM2ZjZTE4LlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwAAAAAAcVMA
VABfAGMAYQBkAGQAYQBiAGYAOQBhAGEAZQBmADQANwAxAGUAOQA5ADEAOQBlADQANQA2AGYAMAAz
AGYAYwBlADEAOAAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAANVUA
cwBlAHIAOgA6AGkAbgB0AFcAZQBsAGwARAByAGkAbABsAFAAZQByAGkAbwBkAEkAZAAARVAAcgBv
AGMAZQBzAHMAaQBuAGcAIAB0AG8AdQByACAAcwBoAGUAZQB0ACAAdwBpAHQAaAAgAGkAZAAgAHsA
MAB9AC4AADdVAHMAZQByADoAOgBpAG4AdABXAGUAbABsAEkAZABGAG8AcgBUAG8AdQByAFMAaABl
AGUAdAAAP1UAcwBlAHIAOgA6AGkAbgB0AEMAdQBzAHQAbwBtAGUAcgBJAGQARgBvAHIAVABvAHUA
cgBTAGgAZQBlAHQAAClVAHMAZQByADoAOgBpAG4AdABQAGUAcgBpAG8AZABPAGIAcwBOAG8AAC1V
AHMAZQByADoAOgBvAGIAagBTAHQAYQByAHQARABhAHQAZQBUAGkAbQBlAAA1VQBzAGUAcgA6ADoA
cwB0AHIAQwBvAG4AdgBlAHIAdABlAGQAVABpAG0AZQBaAG8AbgBlAAApVQBzAGUAcgA6ADoAbwBi
AGoARQBuAGQARABhAHQAZQBUAGkAbQBlAAA1VQBzAGUAcgA6ADoAcwB0AHIAQwBvAG4AdAByAGEA
YwB0AG8AcgBSAGUAcABOAGEAbQBlAAAxVQBzAGUAcgA6ADoAcwB0AHIATwBwAGUAcgBhAHQAbwBy
AFIAZQBwAE4AYQBtAGUAAB1VAHMAZQByADoAOgBvAGIAagBSAGkAZwBJAGQAAD9VAHMAZQByADoA
OgBiAG8AbwBsAEEAYwB0AGkAdgBlAEkAbgBkAEYAbwByAFQAbwB1AHIAUwBoAGUAZQB0AAAnVQBz
AGUAcgA6ADoAcwB0AHIAUwBlAHIAdgBlAHIATgBhAG0AZQAAH1UAcwBlAHIAOgA6AHMAdAByAEEA
cABpAEsAZQB5AAAlVQBzAGUAcgA6ADoAcwB0AHIAQQBjAGMAZQBzAHMASwBlAHkAACFTAHkAcwB0
AGUAbQA6ADoAVQBzAGUAcgBOAGEAbQBlAABtaAB0AHQAcABzADoALwAvAHsAMAB9AC8AYQBwAGkA
LwB0AG8AdQByAFMAaABlAGUAdAAvAHsAMQB9AD8AYQBwAGkAawBlAHkAPQB7ADIAfQAmAGEAYwBj
AGUAcwBzAGsAZQB5AD0AewAzAH0AAAMgAAAHJQAyADAAAAMkAAAHJQAyADQAADMgAE4AbwB0ACAA
ZgBvAHUAbgBkACAALQAgAHcAaQBsAGwAIABpAG4AcwBlAHIAdAAuAAFjIABFAG4AdABpAHQAeQAg
AGYAbwB1AG4AZAAgAC0AIAB3AGkAbABsACAAYwBoAGUAYwBrACAAaQBmACAAdQBwAGQAYQB0AGUA
IABpAHMAIAByAGUAcQB1AGkAcgBlAGQALgABRyAAQQB0AHQAZQBtAHAAdABpAG4AZwAgAHcAcgBp
AHQAZQAgAHQAbwAgAEQAYQB0AGEARwB1AG0AYgBvACAAQQBQAEkALgAAB1AAVQBUAAAhYQBwAHAA
bABpAGMAYQB0AGkAbwBuAC8AagBzAG8AbgAAYSAASABUAFQAUAAgAHAAdQB0ACAAZgBhAGkAbABl
AGQAIAB3AGkAdABoACAAZQB4AGMAZQBwAHQAaQBvAG4AIAB7ADAAfQAuACAAVwBpAGwAbAAgAHIA
ZQB0AHIAeQAuAAApIABOAG8AIAB1AHAAZABhAHQAZQAgAHIAZQBxAHUAaQByAGUAZAAuAAApIAAg
AFIAZQB0AHUAcgBuAGkAbgBnACAAUwB1AGMAYwBlAHMAcwAuAAAVRwB1AG0AYgBvACAAUwBTAEkA
UwAAMyAAIABFAG4AYwBvAHUAbgB0AGUAcgBlAGQAIABlAHIAcgBvAHIAOgAgAHsAMAB9AC4AABFc
AHUAewAwADoAeAA0AH0AABlbAF4AXAB4ADAAMAAtAFwAeAA3AEYAXQABAAAA1pQu1fqb802C05HI
pB32/gAIt3pcVhk04IkIiYRdzYCAzJEDBhIVAwYSGQMgAAEEAAASFQQAABIZBQABARIZBAgAEhUE
CAASGQMGEgwEAAASDAQIABIMCCAEEhgIDg4ODwACAhURHQERIRURHQERIQogAhURHQERIQ4OBAAB
Dg4CBggDBhEUBAAAAAAEAQAAAAMgAAgEIAEBCAggABURHQERIQkgAQEVER0BESEDIAAOBCABAQ4H
IAAVER0BCAggAQEVER0BCAMgAAIEIAEBAgggABURHQERJQkgAQEVER0BESUbIAoCCAgIFREdAREh
FREdAREhDg4VER0BCAIOBwYVER0BESECBg4GBhURHQEIAgYCBwYVER0BESUDKAAICCgAFREdAREh
AygADgcoABURHQEIAygAAggoABURHQERJQYAARJdEWEEIAASZQYgAgEOEmUEBwESFQUgAQERbQgB
AAIAAAAAAAMAAAELAAQCHBJ5En0RgIEEBhKAhQUgABKAjQUgABKAkQYgARKAlRwDIAAcByACEoCJ
DhwEAAECDgQAAQgOBRURHQEIBSABARMABiABHQ4dAwwQAQEeABUSgLEBHgADCgEOBSACARwYBgAB
ARKAhQYAAQERgLkGAAIODh0cBSACDg4OBAAAESEGIAESgIkOBgABEoC9DggxvzhWrTZONQQAAQ4c
BCABAQoFIAASgMkFAAASgM0JIAIBEoDJEoDNBSAAEoDZBiABARKAyQUAAg4OHAUgABKA6QogBgEI
Dg4OCBACCCAFAggODg4IRQceEoCJAggICAgVER0BESEVER0BESEODhURHQEIAg4ODg4OEhgIEoDB
DhKA0RKA2RKAyRKA3RKA5RKA5RURHQEIHQMdHAYQAQEeAA4ECgESGBYHCQ4SgMESgNkSgMkSgN0O
EhgSGB0cBhURHQERIQQgABMABwACAhEhESEGBwIRIREhBQABESEOBSAAEYDtBgABEoDxDgcgARGA
9REhByABESERgPUMIAcBCAgICAgIEYDtGgcIHA4RIRKA8RGA9REhFREdAREhFREdAREhBgABDhKA
+QQGEoD9BCABAwgIAAMODg4SgP0GFREdARElBAAAESUEIAARIQUAAgIODj0HDgIVER0BESUVER0B
ESERIRURHQERIREhFREdAQgVER0BCBURHQEIFREdAQgVER0BESERIRURHQERIREhSQEAGi5ORVRG
cmFtZXdvcmssVmVyc2lvbj12NC41AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1l
d29yayA0LjUoAQAjU1RfY2FkZGFiZjlhYWVmNDcxZTk5MTllNDU2ZjAzZmNlMTgAAAUBAAAAABYB
ABFDb3B5cmlnaHQgQCAgMjAxOAAACAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhy
b3dzAQCAUgAAAAAAAAAAAACeUgAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkFIAAAAAAAAAAAAA
AAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAAAAAYAACAAAAA
AAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWGAAALADAAAAAAAA
AAAAALADNAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAABAAAAAQCT
XqIbAAABAJNeohs/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBhAHIARgBpAGwA
ZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAAsAQQAwAAAQBT
AHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAADsAgAAAQAwADAAMAAwADAANABiADAAAABwACQA
AQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBUAF8AYwBhAGQAZABhAGIAZgA5
AGEAYQBlAGYANAA3ADEAZQA5ADkAMQA5AGUANAA1ADYAZgAwADMAZgBjAGUAMQA4AAAAQAAPAAEA
RgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADcAMAA3ADQALgAyADQAMgAxADEAAAAA
AHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8ANwBjADUAMgA1ADcAMAA0AGEA
MQBkAGYANAA1ADkAZAA4ADUANwBiADMAMgBhADEAZABjADQAZAA5AGQAYwBhAC4AZABsAGwAAABI
ABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAEAA
IAAgADIAMAAxADgAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAUwBU
AF8ANwBjADUAMgA1ADcAMAA0AGEAMQBkAGYANAA1ADkAZAA4ADUANwBiADMAMgBhADEAZABjADQA
ZAA5AGQAYwBhAC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMAVABf
AGMAYQBkAGQAYQBiAGYAOQBhAGEAZQBmADQANwAxAGUAOQA5ADEAOQBlADQANQA2AGYAMAAzAGYA
YwBlADEAOAAAAEQADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANwAw
ADcANAAuADIANAAyADEAMQAAAAAASAAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8A
bgAAADEALgAwAC4ANwAwADcANAAuADIANAAyADEAMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAwAAACwMgAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
                </ScriptProject>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Well Loop\Tour Sheet Loop\C# Script to Clean Up Old Remarks"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Script Task"
              DTS:DTSID="{1F5CA252-6E6A-486F-8F02-96A11A492D27}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="C# Script to Clean Up Old Remarks"
              DTS:ThreadHint="5">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:ObjectData>
                <ScriptProject
                  Name="ST_12df0aa6026347b4811425bdbdadb5d3"
                  VSTAMajorVersion="3"
                  VSTAMinorVersion="0"
                  Language="CSharp"
                  ReadOnlyVariables="User::strOperationalRemarkIdList,User::intWellDrillPeriodId,User::strAccessKey,User::strApiKey,User::strServerName,System::UserName">
                  <ProjectItem
                    Name="Properties\Settings.settings"
                    Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Resources.resx"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
                  <ProjectItem
                    Name="ScriptMain.cs"
                    Encoding="UTF8"><![CDATA[using System.Net;
using System.IO;
using System.Text;
using System.Web;
using System.Web.Helpers;
using System.Linq;

#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion

namespace ST_12df0aa6026347b4811425bdbdadb5d3
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            StringBuilder logMessage = new StringBuilder();
            string operationalRemarkIdList = (string)Dts.Variables["User::strOperationalRemarkIdList"].Value;
//            string operationalRemarkIdList = Dts.Variables["User::objOperationalRemarkIdList"].Value.ToString();
            int tourSheetId = (int)Dts.Variables["User::intWellDrillPeriodId"].Value;
            logMessage.AppendFormat("Checking if operational remarks need to be deleted for tour sheet {0} - valid list of remark ids: {1}.", tourSheetId, operationalRemarkIdList);

            string serverName = (String)Dts.Variables["User::strServerName"].Value;
            string apiKey = (String)Dts.Variables["User::strApiKey"].Value;
            string accessKey = (String)Dts.Variables["User::strAccessKey"].Value;
            string currentUserId = (String)Dts.Variables["System::UserName"].Value;

            if (currentUserId != null)
            {
                currentUserId = currentUserId.Split('\\').Last();
            }

            ServicePointManager.ServerCertificateValidationCallback = delegate { return true; };
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls | SecurityProtocolType.Ssl3;

            try
            {
                string url = string.Format("https://{0}/api/operationalRemark?tourSheetId={1}&apikey={2}&accesskey={3}", serverName, tourSheetId, apiKey, accessKey);
                url = url.Replace(" ", "%20");
                url = url.Replace("$", "%24");

                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                WebResponse webResponse = request.GetResponse();
                Stream webStream = webResponse.GetResponseStream();
                StreamReader responseReader = new StreamReader(webStream);
                string response = responseReader.ReadToEnd();
                responseReader.Close();
                OperationalRemark[] operationalRemarks = Json.Decode<OperationalRemark[]>(response);
                int[] validRemarkIds = string.IsNullOrEmpty(operationalRemarkIdList) ? new int[] {} : operationalRemarkIdList.Split((",").ToCharArray()).Select(s => Convert.ToInt32(s)).ToArray();

		        OperationalRemark[] toDelete = operationalRemarks.Where(or => !validRemarkIds.Contains(or.operationalRemarkId)).ToArray();
		
		        if (toDelete.Any())
		        {
	                foreach (OperationalRemark or in toDelete)
        	        {
                        logMessage.AppendFormat(" Attempting delete of operational remark with id {0}.", or.operationalRemarkId);
                	    url = string.Format("https://{0}/api/operationalRemark/{1}?apikey={2}&accesskey={3}", serverName, or.operationalRemarkId, apiKey, accessKey);
        	            request = (HttpWebRequest)WebRequest.Create(url);
	                    string gumboPayload = Json.Encode(or);

                	    request.Method = "DELETE";
        	            request.ContentType = "application/json";
	                    request.ContentLength = gumboPayload.Length;
                	    StreamWriter requestWriter = new StreamWriter(request.GetRequestStream(), System.Text.Encoding.ASCII);
        	            requestWriter.Write(gumboPayload);
	                    requestWriter.Close();
                	    webResponse = request.GetResponse();
        	            webStream = webResponse.GetResponseStream();
	                    responseReader = new StreamReader(webStream);
                	    response = responseReader.ReadToEnd();
        	            responseReader.Close();
	                }
		        }
		        else
		        {
                    logMessage.Append(" No deletes required.");
		        }
                
                Dts.TaskResult = (int)ScriptResults.Success;
                logMessage.Append("  Returning Success.");
                bool fireAgain = false;
                Dts.Events.FireInformation(0, "Gumbo SSIS", logMessage.ToString(), string.Empty, 0, ref fireAgain);

            }
            catch (Exception e)
            {
                logMessage.AppendFormat("  Encountered error: {0}.", e.Message);
                Dts.Events.FireError(0, "Gumbo SSIS", logMessage.ToString(), string.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }


        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        #region data class
        class OperationalRemark
        {
            public int operationalRemarkId { get; set; }
            public int tourSheetId { get; set; }
            public DateTime? startDateTime { get; set; }
            public DateTime? endDateTime { get; set; }
            public string remarkType { get; set; }
            public string remark { get; set; }
            public string remarkCode { get; set; }
            public bool activeInd { get; set; }
            public string rowCreatedBy { get; set; }
            public string rowChangedBy { get; set; }
            public DateTime? rowCreatedDate { get; set; }
            public DateTime? rowChangedDate { get; set; }

        }
        #endregion

    }
}]]></ProjectItem>
                  <ProjectItem
                    Name="ST_12df0aa6026347b4811425bdbdadb5d3.csproj"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{D2380899-B44F-4D4C-9EE3-86DBAB22B252}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_12df0aa6026347b4811425bdbdadb5d3</RootNamespace>
    <AssemblyName>ST_12df0aa6026347b4811425bdbdadb5d3</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Web.Helpers, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
      <DesignTime>True</DesignTime>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\10.0\InstallDir#\devenv.exe" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
                  <ProjectItem
                    Name="Project"
                    Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_12df0aa6026347b4811425bdbdadb5d3</msb:CodeName>
		<msb:DisplayName>ST_12df0aa6026347b4811425bdbdadb5d3</msb:DisplayName>
		<msb:ProjectId>{6FFB25AF-6EB6-4865-A451-3C4A2D102A41}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_12df0aa6026347b4811425bdbdadb5d3.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_12df0aa6026347b4811425bdbdadb5d3.Properties.Settings.get_Default():ST_12df0aa6026347b4811425bdbdadb5d3.Properties.Sett" +
    "ings")]

namespace ST_12df0aa6026347b4811425bdbdadb5d3.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\AssemblyInfo.cs"
                    Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_12df0aa6026347b4811425bdbdadb5d3")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_12df0aa6026347b4811425bdbdadb5d3")]
[assembly: AssemblyCopyright("Copyright @  2019")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Resources.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_12df0aa6026347b4811425bdbdadb5d3.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_12df0aa6026347b4811425bdbdadb5d3.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_12df0aa6026347b4811425bdbdadb5d3.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_12df0aa6026347b4811425bdbdadb5d3.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_12df0aa6026347b4811425bdbdadb5d3.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
                  <BinaryItem
                    Name="ST_12df0aa6026347b4811425bdbdadb5d3.dll">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
AAQqIgIDfQwAAAQqHgJ7DQAABCoiAgN9DQAABCoeAnsOAAAEKiICA30OAAAEKh4Cew8AAAQqIgID
fQ8AAAQqHgJ7EAAABCoiAgN9EAAABCoeAnsRAAAEKiICA30RAAAEKh4CexIAAAQqIgIDfRIAAAQq
HgJ7EwAABCoiAgN9EwAABCoeAnsUAAAEKiICA30UAAAEKh4CKA4AAAoqAAAAALQAAADOyu++AQAA
AJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249
NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5
I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQA
AABCU0pCAQABAAAAAAAMAAAAdjQuMC4zMDMxOQAAAAAFAGwAAAAQCgAAI34AAHwKAACIDQAAI1N0
cmluZ3MAAAAABBgAALgEAAAjVVMAvBwAABAAAAAjR1VJRAAAAMwcAAA8AwAAI0Jsb2IAAAAAAAAA
AgAAAVcdogkJCwAAAPolMwAWAAABAAAAOQAAAAcAAAAVAAAAJgAAABMAAABHAAAAAgAAADgAAAAC
AAAAAwAAAA8AAAAcAAAAAgAAAAEAAAAGAAAAAQAAAAMAAAAIAAAAAAAKAAEAAAAAAAYA0wDMAAoA
7wDaAA4ATwEmAQYAawHMAAYAgQFwAQYAsgGdAQYAmQLMAAYApALMAAYADQbzBQYAOAYmBgYATwYm
BgYAbAYmBgYAiwYmBgYApAYmBgYAvQYmBgYA2AYmBgYA8wYmBgYADAcmBgYARQclBwYAZQclBwYA
lgeDBwYAswfMAAYAuAfMAAYA3AcmBgoACAjyBwoAIQjyBwYANgglBw4AWAgmAQYA2AiqCAoA6Aiq
CAoABgnyCAoAPQnyCAYAlQnMAAYAwwnMABIA6wnfCQYAEQr2CQYANAooCg4AQgomARYAmwp7ChYA
swp7CgYAzwrMAAYA1grMAAYA6QrMAAoABAv5CgoAQAv5CgoAeQv5CgoAiwv5CgoAmgv5CgYAvAuy
CwYA1QuyCwYA4guyCxoAEAz9CwYAnwwoCgYAsgyyCwYAvwyyCw4A5gwmAQYAJA3MAAAAAAABAAAA
AAABAAEAAAAQADIAPAAFAAEAAQAAARAAawA8AAkAAwAFAAEAEAB0AH8ADQAEAAgAAwEAAKMAAAAR
AAYADAADABAAsQAAAAUACQAMAAMBEAB6CAAABQAVACUAEQCRARMAEQC+ARcAEQAIAjkAEQBhCekA
EQCcCfMABgYxAkcAVoA5AkoAVoBBAkoAAQDvA0cAAQAUBEcAAQAxBIYAAQBQBIYAAQBtBI4AAQCJ
BI4AAQChBI4AAQC9BJEAAQDYBI4AAQD2BI4AAQAUBYYAAQA0BYYABgCNCNQAUCAAAAAAgxjOARsA
AQBYIAAAAACTCNQBHwABAJEgAAAAAJMI6AEkAAEAmCAAAAAAkwj0ASkAAQCgIAAAAACWCBgCPQAC
ALMgAAAAAIYYzgEbAAIApyAAAAAAkRhRCNAAAgDkIAAAAACGACwCGwACAOAkAAAAAIYYzgEbAAIA
wyAAAAAAkQAWCd4AAgDGIAAAAACRAIgJ7gAGAOgkAAAAAIYISQJYAAcA8CQAAAAAhghhAlwABwD5
JAAAAACGCHkCWAAIAAElAAAAAIYIiQJcAAgACiUAAAAAhgitAmEACQASJQAAAACGCL8CagAJABsl
AAAAAIYI0QJhAAoAIyUAAAAAhgjhAmoACgAsJQAAAACGCPECdAALADQlAAAAAIYIAAN4AAsAPSUA
AAAAhggPA3QADABFJQAAAACGCBoDeAAMAE4lAAAAAIYIJQN0AA0AViUAAAAAhgg0A3gADQBfJQAA
AACGCEMDfQAOAGclAAAAAIYIUQOBAA4AcCUAAAAAhghfA3QADwB4JQAAAACGCHADeAAPAIElAAAA
AIYIgQN0ABAAiSUAAAAAhgiSA3gAEACSJQAAAACGCKMDYQARAJolAAAAAIYItgNqABEAoyUAAAAA
hgjJA2EAEgCrJQAAAACGCNwDagASALQlAAAAAIYYzgEbABMAuyAAAAAAhhjOARsAEwDOIAAAAACG
AJwI2AATAAAAAQDtBQAAAQAhCQAAAgAoCQAAAwAvCQAABAA2CQAAAQCTCQAAAQDtBQAAAQDtBQAA
AQDtBQAAAQDtBQAAAQDtBQAAAQDtBQAAAQDtBQAAAQDtBQAAAQDtBQAAAQDtBQAAAQDtBQAAAQDt
BQAAAQCnCEkAzgF4AFEAzgF4AFkAzgF4AGEAzgF4AGkAzgF4AHEAzgF4AHkAzgF4AIEAzgF4AIkA
zgF4AJEAzgF4AJkAzgFcAKEAzgEbAKkAzgEbAAkAzgEbALEAygepALEA5QewACkAzgG1AMkAzgHB
ANkAzgEbABEAzgEbAOEAzgEbABEBywnuABkBHwr8ACkBzgEbABkAVAoOATEBpQoUATkBvAoaAUEB
xQohASkB3AolAUkB7gouARkB9Ao1AQEBzgFGAWEBGAtMAWEBVQtTAUkBagtaAUkBcQthAXEBhAtn
AXEBpgtuAYEBwwt0AZEBzgF6AZkB7Qt0AJkB9wsbAKEBFQyKAUkBHAyXAUkBKgycAQwAzgFGARkB
NgypARkBPQzJARQAzgFGARkBRQzgARkBSwz/ASkB3AoLAqEBTwwTAnEBVgx4AHEBYQx4AEkBcQxY
AHEBfAwYAnEBjgx0AakBqAwdArEBzgEjArkBygx4ALkB9wsbACkB0AwtAjEB1wxcADEB+gw0AgkA
BQ10AEkBDg2OAMEBFA06AskBLg10AMEBOg1FAhkAzgEbAAgAHABOAAgAIABTACkAkwDHAC4AOwD9
Ai4AWwAUAy4AMwDOAi4AQwD3Ai4AYwAdAy4AEwDOAi4ACwCEAi4AGwD3Ai4AIwD3Ai4AKwD3AkMA
awBTAEkAkwDHAGEAmwBTAIEAmwBTAIMAqwBTAKEAmwBTAOMAmwBTACEBmwBTAEABmwBTAEEBmwBT
AGABmwBTAGEBmwBTAIABmwBTAIEBmwBTAKABmwBTAKEBmwBTAMABmwBTAMEBmwBTAOABmwBTAOEB
mwBTAAACmwBTAAECmwBTACACmwBTACECmwBTAEACmwBTAEECmwBTAGACmwBTAGECmwBTAIACmwBT
AIECmwBTAKACmwBTAMACmwBTAOACmwBTAAADmwBTACADmwBTAEADmwBTAGADmwBTAIADmwBTAKAD
mwBTAMADmwBTAOADmwBTAAAEmwBTACAEmwBTAEAEmwBTAGAEmwBTALwATgICAAEAAwADAAYABAAA
AIEBLwAAAAACNAAAACQCQgAAAFQFlAAAAGgFlAAAAHQFmAAAAIIFmAAAAI4FoQAAAJkFoQAAAKAF
oQAAAKsFpQAAALUFoQAAAMIFoQAAAM8FmAAAAN4FmAACAAIAAwACAAMABQABAAQABQACAAUABwAB
AA0ACQACAAwACQACAA4ACwABAA8ACwACABAADQABABEADQACABIADwABABMADwABABUAEQACABQA
EQACABYAEwABABcAEwACABgAFQABABkAFQACABoAFwABABsAFwACABwAGQABAB0AGQACAB4AGwAB
AB8AGwACACAAHQABACEAHQACACIAHwABACMAHwChAdcBBIAAAAEAAACBG1lSAAAAAAAAfwAAAAQA
AAAAAAAAAAAAAAEAwwAAAAAABAAAAAAAAAAAAAAAAQDMAAAAAAALAAAAAAAAAAAAAAAKAAcBAAAA
AAQAAAAAAAAAAAAAAAEA0wkAAAAACwAAAAAAAAAAAAAACgBcCgAAAAABAAAAAAAAAAAAAACBAf0L
AAAAAAAAAAABAAAARA0AAAUABAAGAAQABwAEAC8ACgE/AEIBVwCRAV8AxAFhAAoBZQD6AWEA+gFn
APoBAAAAAAA8TW9kdWxlPgBTVF8xMmRmMGFhNjAyNjM0N2I0ODExNDI1YmRiZGFkYjVkMy5kbGwA
UmVzb3VyY2VzAFNUXzEyZGYwYWE2MDI2MzQ3YjQ4MTE0MjViZGJkYWRiNWQzLlByb3BlcnRpZXMA
U2V0dGluZ3MAU2NyaXB0TWFpbgBTVF8xMmRmMGFhNjAyNjM0N2I0ODExNDI1YmRiZGFkYjVkMwBT
Y3JpcHRSZXN1bHRzAE9wZXJhdGlvbmFsUmVtYXJrAG1zY29ybGliAFN5c3RlbQBPYmplY3QAU3lz
dGVtLkNvbmZpZ3VyYXRpb24AQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UATWljcm9zb2Z0LlNxbFNl
cnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sA
VlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAEVudW0AU3lzdGVtLlJlc291cmNlcwBSZXNvdXJj
ZU1hbmFnZXIAcmVzb3VyY2VNYW4AU3lzdGVtLkdsb2JhbGl6YXRpb24AQ3VsdHVyZUluZm8AcmVz
b3VyY2VDdWx0dXJlAC5jdG9yAGdldF9SZXNvdXJjZU1hbmFnZXIAZ2V0X0N1bHR1cmUAc2V0X0N1
bHR1cmUAQ3VsdHVyZQBkZWZhdWx0SW5zdGFuY2UAZ2V0X0RlZmF1bHQARGVmYXVsdABNYWluAHZh
bHVlX18AU3VjY2VzcwBGYWlsdXJlAGdldF9vcGVyYXRpb25hbFJlbWFya0lkAHNldF9vcGVyYXRp
b25hbFJlbWFya0lkAGdldF90b3VyU2hlZXRJZABzZXRfdG91clNoZWV0SWQATnVsbGFibGVgMQBE
YXRlVGltZQBnZXRfc3RhcnREYXRlVGltZQBzZXRfc3RhcnREYXRlVGltZQBnZXRfZW5kRGF0ZVRp
bWUAc2V0X2VuZERhdGVUaW1lAGdldF9yZW1hcmtUeXBlAHNldF9yZW1hcmtUeXBlAGdldF9yZW1h
cmsAc2V0X3JlbWFyawBnZXRfcmVtYXJrQ29kZQBzZXRfcmVtYXJrQ29kZQBnZXRfYWN0aXZlSW5k
AHNldF9hY3RpdmVJbmQAZ2V0X3Jvd0NyZWF0ZWRCeQBzZXRfcm93Q3JlYXRlZEJ5AGdldF9yb3dD
aGFuZ2VkQnkAc2V0X3Jvd0NoYW5nZWRCeQBnZXRfcm93Q3JlYXRlZERhdGUAc2V0X3Jvd0NyZWF0
ZWREYXRlAGdldF9yb3dDaGFuZ2VkRGF0ZQBzZXRfcm93Q2hhbmdlZERhdGUAPG9wZXJhdGlvbmFs
UmVtYXJrSWQ+a19fQmFja2luZ0ZpZWxkADx0b3VyU2hlZXRJZD5rX19CYWNraW5nRmllbGQAPHN0
YXJ0RGF0ZVRpbWU+a19fQmFja2luZ0ZpZWxkADxlbmREYXRlVGltZT5rX19CYWNraW5nRmllbGQA
PHJlbWFya1R5cGU+a19fQmFja2luZ0ZpZWxkADxyZW1hcms+a19fQmFja2luZ0ZpZWxkADxyZW1h
cmtDb2RlPmtfX0JhY2tpbmdGaWVsZAA8YWN0aXZlSW5kPmtfX0JhY2tpbmdGaWVsZAA8cm93Q3Jl
YXRlZEJ5PmtfX0JhY2tpbmdGaWVsZAA8cm93Q2hhbmdlZEJ5PmtfX0JhY2tpbmdGaWVsZAA8cm93
Q3JlYXRlZERhdGU+a19fQmFja2luZ0ZpZWxkADxyb3dDaGFuZ2VkRGF0ZT5rX19CYWNraW5nRmll
bGQAb3BlcmF0aW9uYWxSZW1hcmtJZAB0b3VyU2hlZXRJZABzdGFydERhdGVUaW1lAGVuZERhdGVU
aW1lAHJlbWFya1R5cGUAcmVtYXJrAHJlbWFya0NvZGUAYWN0aXZlSW5kAHJvd0NyZWF0ZWRCeQBy
b3dDaGFuZ2VkQnkAcm93Q3JlYXRlZERhdGUAcm93Q2hhbmdlZERhdGUAdmFsdWUAU3lzdGVtLlJ1
bnRpbWUuVmVyc2lvbmluZwBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1dGUAU3lzdGVtLlJlZmxlY3Rp
b24AQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAEFz
c2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAQXNz
ZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAEFzc2VtYmx5
VHJhZGVtYXJrQXR0cmlidXRlAEFzc2VtYmx5Q3VsdHVyZUF0dHJpYnV0ZQBBc3NlbWJseVZlcnNp
b25BdHRyaWJ1dGUAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBDb21waWxhdGlvblJl
bGF4YXRpb25zQXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAFN5c3RlbS5E
aWFnbm9zdGljcwBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAFR5cGUAUnVudGltZVR5cGVI
YW5kbGUAR2V0VHlwZUZyb21IYW5kbGUAQXNzZW1ibHkAZ2V0X0Fzc2VtYmx5AFN5c3RlbS5Db21w
b25lbnRNb2RlbABFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlU3RhdGUA
Q29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUALmNjdG9yAFNTSVNTY3JpcHRUYXNrRW50cnlQb2lu
dEF0dHJpYnV0ZQA8PmNfX0Rpc3BsYXlDbGFzczUAdmFsaWRSZW1hcmtJZHMAPE1haW4+Yl9fMgBv
cgBTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5Llg1MDlDZXJ0aWZpY2F0ZXMAWDUwOUNlcnRp
ZmljYXRlAFg1MDlDaGFpbgBTeXN0ZW0uTmV0LlNlY3VyaXR5AFNzbFBvbGljeUVycm9ycwA8TWFp
bj5iX18wAHBhcmFtMABwYXJhbTEAcGFyYW0yAHBhcmFtMwBSZW1vdGVDZXJ0aWZpY2F0ZVZhbGlk
YXRpb25DYWxsYmFjawBDUyQ8PjlfX0NhY2hlZEFub255bW91c01ldGhvZERlbGVnYXRlMwA8TWFp
bj5iX18xAHMARnVuY2AyAENTJDw+OV9fQ2FjaGVkQW5vbnltb3VzTWV0aG9kRGVsZWdhdGU0AENv
bnZlcnQAVG9JbnQzMgBTeXN0ZW0uQ29yZQBTeXN0ZW0uTGlucQBFbnVtZXJhYmxlAFN5c3RlbS5D
b2xsZWN0aW9ucy5HZW5lcmljAElFbnVtZXJhYmxlYDEAQ29udGFpbnMAU3lzdGVtLlRleHQAU3Ry
aW5nQnVpbGRlcgBTY3JpcHRPYmplY3RNb2RlbABnZXRfRHRzAE1pY3Jvc29mdC5TcWxTZXJ2ZXIu
TWFuYWdlZERUUwBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lAFZhcmlhYmxlcwBnZXRf
VmFyaWFibGVzAFZhcmlhYmxlAGdldF9JdGVtAGdldF9WYWx1ZQBTdHJpbmcASW50MzIAQXBwZW5k
Rm9ybWF0AENoYXIAU3BsaXQATGFzdABTeXN0ZW0uTmV0AFNlcnZpY2VQb2ludE1hbmFnZXIAc2V0
X1NlcnZlckNlcnRpZmljYXRlVmFsaWRhdGlvbkNhbGxiYWNrAFNlY3VyaXR5UHJvdG9jb2xUeXBl
AHNldF9TZWN1cml0eVByb3RvY29sAEZvcm1hdABSZXBsYWNlAFdlYlJlcXVlc3QAQ3JlYXRlAEh0
dHBXZWJSZXF1ZXN0AFdlYlJlc3BvbnNlAEdldFJlc3BvbnNlAFN5c3RlbS5JTwBTdHJlYW0AR2V0
UmVzcG9uc2VTdHJlYW0AU3RyZWFtUmVhZGVyAFRleHRSZWFkZXIAUmVhZFRvRW5kAENsb3NlAFN5
c3RlbS5XZWIuSGVscGVycwBKc29uAERlY29kZQBJc051bGxPckVtcHR5AFRvQ2hhckFycmF5AFNl
bGVjdABUb0FycmF5AFdoZXJlAEFueQBFbmNvZGUAc2V0X01ldGhvZABzZXRfQ29udGVudFR5cGUA
Z2V0X0xlbmd0aABzZXRfQ29udGVudExlbmd0aABHZXRSZXF1ZXN0U3RyZWFtAEVuY29kaW5nAGdl
dF9BU0NJSQBTdHJlYW1Xcml0ZXIAVGV4dFdyaXRlcgBXcml0ZQBBcHBlbmQAc2V0X1Rhc2tSZXN1
bHQARXZlbnRzT2JqZWN0V3JhcHBlcgBnZXRfRXZlbnRzAFRvU3RyaW5nAEVtcHR5AEZpcmVJbmZv
cm1hdGlvbgBFeGNlcHRpb24AZ2V0X01lc3NhZ2UARmlyZUVycm9yAFNUXzEyZGYwYWE2MDI2MzQ3
YjQ4MTE0MjViZGJkYWRiNWQzLlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwAAAHFTAFQA
XwAxADIAZABmADAAYQBhADYAMAAyADYAMwA0ADcAYgA0ADgAMQAxADQAMgA1AGIAZABiAGQAYQBk
AGIANQBkADMALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAEFVAHMA
ZQByADoAOgBzAHQAcgBPAHAAZQByAGEAdABpAG8AbgBhAGwAUgBlAG0AYQByAGsASQBkAEwAaQBz
AHQAADVVAHMAZQByADoAOgBpAG4AdABXAGUAbABsAEQAcgBpAGwAbABQAGUAcgBpAG8AZABJAGQA
AIDNQwBoAGUAYwBrAGkAbgBnACAAaQBmACAAbwBwAGUAcgBhAHQAaQBvAG4AYQBsACAAcgBlAG0A
YQByAGsAcwAgAG4AZQBlAGQAIAB0AG8AIABiAGUAIABkAGUAbABlAHQAZQBkACAAZgBvAHIAIAB0
AG8AdQByACAAcwBoAGUAZQB0ACAAewAwAH0AIAAtACAAdgBhAGwAaQBkACAAbABpAHMAdAAgAG8A
ZgAgAHIAZQBtAGEAcgBrACAAaQBkAHMAOgAgAHsAMQB9AC4AASdVAHMAZQByADoAOgBzAHQAcgBT
AGUAcgB2AGUAcgBOAGEAbQBlAAAfVQBzAGUAcgA6ADoAcwB0AHIAQQBwAGkASwBlAHkAACVVAHMA
ZQByADoAOgBzAHQAcgBBAGMAYwBlAHMAcwBLAGUAeQAAIVMAeQBzAHQAZQBtADoAOgBVAHMAZQBy
AE4AYQBtAGUAAICVaAB0AHQAcABzADoALwAvAHsAMAB9AC8AYQBwAGkALwBvAHAAZQByAGEAdABp
AG8AbgBhAGwAUgBlAG0AYQByAGsAPwB0AG8AdQByAFMAaABlAGUAdABJAGQAPQB7ADEAfQAmAGEA
cABpAGsAZQB5AD0AewAyAH0AJgBhAGMAYwBlAHMAcwBrAGUAeQA9AHsAMwB9AAADIAAAByUAMgAw
AAADJAAAByUAMgA0AAADLAAAayAAQQB0AHQAZQBtAHAAdABpAG4AZwAgAGQAZQBsAGUAdABlACAA
bwBmACAAbwBwAGUAcgBhAHQAaQBvAG4AYQBsACAAcgBlAG0AYQByAGsAIAB3AGkAdABoACAAaQBk
ACAAewAwAH0ALgAAfWgAdAB0AHAAcwA6AC8ALwB7ADAAfQAvAGEAcABpAC8AbwBwAGUAcgBhAHQA
aQBvAG4AYQBsAFIAZQBtAGEAcgBrAC8AewAxAH0APwBhAHAAaQBrAGUAeQA9AHsAMgB9ACYAYQBj
AGMAZQBzAHMAawBlAHkAPQB7ADMAfQAADUQARQBMAEUAVABFAAAhYQBwAHAAbABpAGMAYQB0AGkA
bwBuAC8AagBzAG8AbgAAKyAATgBvACAAZABlAGwAZQB0AGUAcwAgAHIAZQBxAHUAaQByAGUAZAAu
AAApIAAgAFIAZQB0AHUAcgBuAGkAbgBnACAAUwB1AGMAYwBlAHMAcwAuAAAVRwB1AG0AYgBvACAA
UwBTAEkAUwAAMyAAIABFAG4AYwBvAHUAbgB0AGUAcgBlAGQAIABlAHIAcgBvAHIAOgAgAHsAMAB9
AC4AAADbA965g2mgSo3q5li1oDcMAAi3elxWGTTgiQiJhF3NgIDMkQMGEhUDBhIZAyAAAQQAABIV
BAAAEhkFAAEBEhkECAASFQQIABIZAwYSDAQAABIMBAgAEgwCBggDBhEUBAAAAAAEAQAAAAMgAAgE
IAEBCAggABURHQERIQkgAQEVER0BESEDIAAOBCABAQ4DIAACBCABAQIHBhURHQERIQIGDgIGAgMo
AAgIKAAVER0BESEDKAAOAygAAgYAARJZEV0EIAASYQYgAgEOEmEEBwESFQUgAQERaQgBAAIAAAAA
AAMAAAEDBh0IBSABAhIYCgAEAhwSdRJ5EX0EBhKAgQQAAQgOCAYVEoCFAg4IDRABAgIVEoCRAR4A
HgADCgEIBSAAEoCZBSAAEoCdBiABEoChHAMgABwIIAMSgJUOHBwGIAEdDh0DDBABAR4AFRKAkQEe
AAMKAQ4FIAIBHBgGAAEBEoCBBgABARGAtQYAAg4OHRwFIAIODg4GAAESgLkOBSAAEoDBBSAAEoDF
BiABARKAxQgxvzhWrTZONQYQAQEeAA4FCgEdEhgEAAECDgQgAB0DBxUSgIUCDggaEAICFRKAkQEe
ARUSgJEBHgAVEoCFAh4AHgEECgIOCA0QAQEdHgAVEoCRAR4ACBUSgIUCEhgCGRABAhUSgJEBHgAV
EoCRAR4AFRKAhQIeAAIECgESGAsQAQECFRKAkQEeAAcgAhKAlQ4cBAABDhwEIAEBCgUAABKA1Qkg
AgESgMUSgNUGIAESgJUOBSAAEoDhCiAGAQgODg4IEAIIIAUCCA4ODgg1BxoSgJUOCA4ODg4OEoC9
EoDBEoDFEoDJDh0SGB0SGBIYDhKA2QISHBKA5R0DHRwdEhgIHRxJAQAaLk5FVEZyYW1ld29yayxW
ZXJzaW9uPXY0LjUBAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEi5ORVQgRnJhbWV3b3JrIDQuNSgB
ACNTVF8xMmRmMGFhNjAyNjM0N2I0ODExNDI1YmRiZGFkYjVkMwAABQEAAAAAFgEAEUNvcHlyaWdo
dCBAICAyMDE5AAAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBqEYAAAAA
AAAAAAAAvkYAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAALBGAAAAAAAAAABfQ29yRGxsTWFpbgBt
c2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAAAAAY
AACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWGAAALAD
AAAAAAAAAAAAALADNAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAAB
AAAAAQBZUoEbAAABAFlSgRs/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBhAHIA
RgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAAsAQQ
AwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAADsAgAAAQAwADAAMAAwADAANABiADAA
AABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBUAF8AMQAyAGQAZgAw
AGEAYQA2ADAAMgA2ADMANAA3AGIANAA4ADEAMQA0ADIANQBiAGQAYgBkAGEAZABiADUAZAAzAAAA
QAAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADcAMAA0ADEALgAyADEAMAA4
ADEAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8AMQAyAGQAZgAwAGEA
YQA2ADAAMgA2ADMANAA3AGIANAA4ADEAMQA0ADIANQBiAGQAYgBkAGEAZABiADUAZAAzAC4AZABs
AGwAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgA
dAAgAEAAIAAgADIAMAAxADkAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBl
AAAAUwBUAF8AMQAyAGQAZgAwAGEAYQA2ADAAMgA2ADMANAA3AGIANAA4ADEAMQA0ADIANQBiAGQA
YgBkAGEAZABiADUAZAAzAC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAA
AFMAVABfADEAMgBkAGYAMABhAGEANgAwADIANgAzADQANwBiADQAOAAxADEANAAyADUAYgBkAGIA
ZABhAGQAYgA1AGQAMwAAAEQADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAw
AC4ANwAwADQAMQAuADIAMQAwADgAMQAAAAAASAAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIA
cwBpAG8AbgAAADEALgAwAC4ANwAwADQAMQAuADIAMQAwADgAMQAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAwAAADQNgAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
                </ScriptProject>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Well Loop\Tour Sheet Loop\Get List of Valid Remark Ids"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{B91FFD95-550F-4FAB-ADDD-34A77A07D479}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Get List of Valid Remark Ids"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="5">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{B09DFF4B-1666-40D6-850C-21EC437987D1}"
                  SQLTask:BypassPrepare="False"
                  SQLTask:SqlStatementSource="select iif(l is null, '', cast(l as varchar(4000))) as idList from&#xA;(&#xA;select substring((&#xA;select&#xA;',' + cast(wdpmr.WellDrillPeriodremarkId as varchar(20))&#xA;from &#xA;xref.vWellDrillPeriod vwdp&#xA;cross apply dbo.[WellDrillPeriodMergedRemarks](vwdp.WellDrillPeriodID) wdpmr&#xA;where vwdp.WellDrillPeriodId = ?&#xA;and wdpmr.RemarkType_rRemarkTypeID &lt;&gt; 1&#xA;and wdpmr.EffectiveDate is not null&#xA;and wdpmr.ExpiryDate is not null&#xA;FOR XML PATH('')),2,4000) as l&#xA;) qry&#xA;"
                  SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="idList"
                    SQLTask:DtsVariableName="User::strOperationalRemarkIdList" />
                  <SQLTask:ParameterBinding
                    SQLTask:ParameterName="0"
                    SQLTask:DtsVariableName="User::intWellDrillPeriodId"
                    SQLTask:ParameterDirection="Input"
                    SQLTask:DataType="3"
                    SQLTask:ParameterSize="-1" />
                </SQLTask:SqlTaskData>
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Well Loop\Tour Sheet Loop.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:DTSID="{6382F9BC-66AD-424D-9405-6DB4CB3D01B1}"
              DTS:From="Package\Well Loop\Tour Sheet Loop\C# Script to Call Data Gumbo Tour Sheet API"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\Well Loop\Tour Sheet Loop\Get List of Valid Remark Ids" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Well Loop\Tour Sheet Loop.PrecedenceConstraints[Constraint 1]"
              DTS:CreationName=""
              DTS:DTSID="{6EBDEB35-94C6-453F-AAAA-6A7362E76115}"
              DTS:From="Package\Well Loop\Tour Sheet Loop\Get List of Valid Remark Ids"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 1"
              DTS:To="Package\Well Loop\Tour Sheet Loop\C# Script to Clean Up Old Remarks" />
          </DTS:PrecedenceConstraints>
          <DTS:ForEachVariableMappings>
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{c61cdf30-e866-426b-af1c-b50a2dba35df}"
              DTS:ObjectName="{E13B52D8-3E41-47FD-AC41-28F33F2A6A0A}"
              DTS:ValueIndex="0"
              DTS:VariableName="User::intWellDrillPeriodId" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{b13aa655-c751-421e-989e-c1bb34ca92e4}"
              DTS:ObjectName="{2CC2EDBA-5000-4980-B12B-43B1706B5E0F}"
              DTS:ValueIndex="1"
              DTS:VariableName="User::intWellIdForTourSheet" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{7996732a-e7e7-4c21-86dd-3efe38e10d1d}"
              DTS:ObjectName="{391DA37A-0258-4F1C-8B25-84149A318A7A}"
              DTS:ValueIndex="2"
              DTS:VariableName="User::intCustomerIdForTourSheet" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{bc80b4dc-0257-48d4-a41b-624aacb1ac9c}"
              DTS:ObjectName="{358FF8A6-1F48-4626-8D9A-2C5F2806F6A9}"
              DTS:ValueIndex="3"
              DTS:VariableName="User::intPeriodObsNo" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{8d2dae15-de85-4faa-8fd6-229526c524bb}"
              DTS:ObjectName="{BF72BE32-BA28-4B92-B37B-288E21DC514A}"
              DTS:ValueIndex="4"
              DTS:VariableName="User::objStartDateTime" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{d832cd01-a370-466e-a2e4-9f53095879e4}"
              DTS:ObjectName="{C36128E8-A7A1-44DF-B703-C1994486927C}"
              DTS:ValueIndex="5"
              DTS:VariableName="User::objEndDateTime" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{0901b0ed-a94f-4744-a082-1802fc08d8c4}"
              DTS:ObjectName="{3634E941-9B86-462C-B7A2-80D3131C7AA5}"
              DTS:ValueIndex="6"
              DTS:VariableName="User::strContractorRepName" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{cf991d92-630e-48ba-b377-466ceea83efe}"
              DTS:ObjectName="{62342B8E-B08A-4A12-A15D-75AACD1A4075}"
              DTS:ValueIndex="7"
              DTS:VariableName="User::strOperatorRepName" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{2c0d7b20-cc98-4c96-9140-9782df6f5a1f}"
              DTS:ObjectName="{0F7D73F2-079C-4D63-A1EC-530076A56E8A}"
              DTS:ValueIndex="8"
              DTS:VariableName="User::objRigId" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{db994643-5777-4f09-876f-8690256b6212}"
              DTS:ObjectName="{CE8A6FCE-F64A-484D-82C9-7DFF399A7251}"
              DTS:ValueIndex="9"
              DTS:VariableName="User::boolActiveIndForTourSheet" />
          </DTS:ForEachVariableMappings>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Well Loop\Tour Sheet Remark Loop"
          DTS:CreationName="STOCK:FOREACHLOOP"
          DTS:Description="Foreach Loop Container"
          DTS:DTSID="{846b00e3-31f0-4a2f-9c04-4707aef84295}"
          DTS:ExecutableType="STOCK:FOREACHLOOP"
          DTS:LocaleID="-1"
          DTS:MaxErrorCount="6"
          DTS:ObjectName="Tour Sheet Remark Loop">
          <DTS:ForEachEnumerator
            DTS:CreationName="Microsoft.SqlServer.Dts.Runtime.Enumerators.ADO.ForEachADOEnumerator, Microsoft.SqlServer.ForEachADOEnumerator, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
            DTS:DTSID="{1d0f07e3-dd63-4583-8a9b-8203e3559325}"
            DTS:ObjectName="{4F357A1D-CA44-434A-8085-25C4D1BB103C}">
            <DTS:ObjectData>
              <FEEADO
                EnumType="EnumerateRowsInFirstTable"
                VarName="User::objTourSheetRemarkList" />
            </DTS:ObjectData>
          </DTS:ForEachEnumerator>
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Well Loop\Tour Sheet Remark Loop\C# Script to Call Data Gumbo Tour Sheet Remark API"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Script Task"
              DTS:DTSID="{50c66aaa-1ae2-46b8-a795-4739aad41d86}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="C# Script to Call Data Gumbo Tour Sheet Remark API"
              DTS:ThreadHint="7">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:ObjectData>
                <ScriptProject
                  Name="ST_bff62daa7bd642e3aa74f822dafe3a85"
                  VSTAMajorVersion="3"
                  VSTAMinorVersion="0"
                  Language="CSharp"
                  ReadOnlyVariables="User::strRemarkCodeForOperationalRemark,User::boolActiveIndForRemark,User::intWellDrillPeriodIdForRemark,User::intWellDrillPeriodRemarkId,User::objEffectiveDate,User::objExpiryDate,User::objRemarkType,User::strAccessKey,User::strApiKey,User::strConvertedTimeZone,User::strRemark,User::strServerName,System::UserName">
                  <ProjectItem
                    Name="Properties\AssemblyInfo.cs"
                    Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_044ed802767949b5973e121564e7b333")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_044ed802767949b5973e121564e7b333")]
[assembly: AssemblyCopyright("Copyright @  2018")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Resources.resx"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
                  <ProjectItem
                    Name="ScriptMain.cs"
                    Encoding="UTF8"><![CDATA[using System.Net;
using System.IO;
using System.Text;
using System.Web;
using System.Web.Helpers;
using System.Linq;
using System.Text.RegularExpressions;

#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion


namespace ST_044ed802767949b5973e121564e7b333
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            StringBuilder logMessage = new StringBuilder();
            bool fireAgain = false;
            int remarkId = (int)Dts.Variables["User::intWellDrillPeriodRemarkId"].Value;
            logMessage.AppendFormat("Processing tour sheet remark with id {0}.", remarkId); 
            int tourSheetId = (int)Dts.Variables["User::intWellDrillPeriodIdForRemark"].Value;

            DateTime? effectiveDate = GetDateTime("User::objEffectiveDate", "User::strConvertedTimeZone");
            DateTime? expiryDate = GetDateTime("User::objExpiryDate", "User::strConvertedTimeZone");
            
            string remark = (string)Dts.Variables["User::strRemark"].Value;
            string remarkType = Dts.Variables["User::objRemarkType"].Value.ToString();
            bool activeInd = (bool)Dts.Variables["User::boolActiveIndForRemark"].Value;
            string remarkCode = Dts.Variables["strRemarkCodeForOperationalRemark"].Value.ToString();

            // for now, make it a number only
            //remarkCode = Regex.Replace(remarkCode, "[^0-9]", "");

            string serverName = (String)Dts.Variables["User::strServerName"].Value;
            string apiKey = (String)Dts.Variables["User::strApiKey"].Value;
            string accessKey = (String)Dts.Variables["User::strAccessKey"].Value;
            string currentUserId = (String)Dts.Variables["System::UserName"].Value;

            if (currentUserId != null)
            {
                currentUserId = currentUserId.Split('\\').Last();
            }

            ServicePointManager.ServerCertificateValidationCallback = delegate { return true; };
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls | SecurityProtocolType.Ssl3;

            try
            {
                string url = string.Format("https://{0}/api/operationalRemark/{1}?apikey={2}&accesskey={3}", serverName, remarkId, apiKey, accessKey);
                url = url.Replace(" ", "%20");
                url = url.Replace("$", "%24");

                DateTime now = DateTime.Now;
                OperationalRemark existingOperationalRemark = GetExistingOperationalRemark(remarkId, serverName, apiKey, accessKey);

                if (existingOperationalRemark == null)
                {
                    logMessage.Append(" Not found - will insert."); 
                    existingOperationalRemark = new OperationalRemark();
                    existingOperationalRemark.operationalRemarkId = remarkId;
                }
                else
                {
                    logMessage.Append(" Entity found - will check if update is required.");
                }

                if (existingOperationalRemark.Apply(tourSheetId, effectiveDate, expiryDate, remarkType, remark, remarkCode, activeInd, currentUserId, logMessage))
                {
                    int retries = 2;
                    while (retries > 0)
                    {
                        try
                        {
                            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                            logMessage.Append(" Attempting write to DataGumbo API.");
                            string gumboPayload = Json.Encode(existingOperationalRemark);
                            gumboPayload = EncodeNonAsciiCharacters(gumboPayload);

                            request.Method = "PUT";
                            request.ContentType = "application/json";
                            request.ContentLength = gumboPayload.Length;
                            StreamWriter requestWriter = new StreamWriter(request.GetRequestStream(), System.Text.Encoding.ASCII);
                            requestWriter.Write(gumboPayload);
                            requestWriter.Close();

                            WebResponse webResponse = request.GetResponse();
                            Stream webStream = webResponse.GetResponseStream();
                            StreamReader responseReader = new StreamReader(webStream);
                            string response = responseReader.ReadToEnd();
                            responseReader.Close();
                            retries = 0; // indicate success
                        }
                        catch (Exception e)
                        {
                            retries--;
                            if (retries > 0)
                            {
                                logMessage.Append(string.Format(" HTTP put failed with exception {0}. Will retry.", e.Message));
                            }
                            else
                            {
                                throw e;
                            }
                        }
                    }
                }
                else
                {
                    logMessage.Append(" No update required.");
                }
                Dts.TaskResult = (int)ScriptResults.Success;
                logMessage.Append("  Returning Success.");
                Dts.Events.FireInformation(0, "Gumbo SSIS", logMessage.ToString(), string.Empty, 0, ref fireAgain);
            }
            catch (Exception e)
            {
                logMessage.AppendFormat("  Encountered error: {0}.", e.Message);
                Dts.Events.FireError(0, "Gumbo SSIS", logMessage.ToString(), string.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        private OperationalRemark GetExistingOperationalRemark(int operationalRemarkId, string serverName, string apiKey, string accessKey)
        {
            try
            {
                string url = string.Format("https://{0}/api/operationalRemark/{1}?apikey={2}&accesskey={3}", serverName, operationalRemarkId, apiKey, accessKey);
                url = url.Replace(" ", "%20");
                url = url.Replace("$", "%24");
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                WebResponse webResponse = request.GetResponse();
                Stream webStream = webResponse.GetResponseStream();
                StreamReader responseReader = new StreamReader(webStream);
                string response = responseReader.ReadToEnd();
                responseReader.Close();
                OperationalRemark tourSheet = Json.Decode<OperationalRemark>(response);
                return tourSheet;
            }
            catch (Exception e)
            {
                return null;
            }
        }


        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        #region data class
        class OperationalRemark
        {
            public int operationalRemarkId { get; set; }
            public int tourSheetId { get; set; }
            public DateTime? startDateTime { get; set; }
            public DateTime? endDateTime { get; set; }
            public string remarkType { get; set; }
            public string remark { get; set; }
            public string remarkCode { get; set; }
            public bool activeInd { get; set; }
            public string rowCreatedBy { get; set; }
            public string rowChangedBy { get; set; }
            public DateTime? rowCreatedDate { get; set; }
            public DateTime? rowChangedDate { get; set; }

            public bool Apply(int _tourSheetId, DateTime? _startDateTime, DateTime? _endDateTime, string _remarkType, string _remark, string _remarkCode, bool _activeInd, string currentUserId, StringBuilder logMessage)
            {
                bool ret = false;
                if (rowCreatedBy == null)
                {
                    logMessage.Append("  rowCreatedBy is null.");
                    rowCreatedBy = currentUserId;
                    ret = true;
                }
                if (rowCreatedDate == null)
                {
                    logMessage.Append("  rowCreatedDate is null.");
                    rowCreatedDate = DateTime.Now;
                    ret = true;
                }
                if (tourSheetId != _tourSheetId)
                {
                    logMessage.Append("  tourSheetId has changed.");
                    tourSheetId = _tourSheetId;
                    ret = true;
                }
                if (!DateCompare(startDateTime, _startDateTime))
                {
                    logMessage.Append("  startDateTime has changed.");
                    startDateTime = _startDateTime.HasValue ? _startDateTime.Value.ToUniversalTime() : (DateTime?)null;
                    ret = true;
                }
                if (!DateCompare(endDateTime, _endDateTime))
                {
                    logMessage.Append("  endDateTime has changed.");
                    endDateTime = _endDateTime.HasValue ? _endDateTime.Value.ToUniversalTime() : (DateTime?)null;
                    ret = true;
                }
                if (remarkType != _remarkType)
                {
                    logMessage.Append("  remarktype has changed.");
                    remarkType = _remarkType;
                    ret = true;
                }
                if (remark != _remark)
                {
                    logMessage.Append("  remark has changed.");
                    remark = _remark;
                    ret = true;
                }
                if (remarkCode != _remarkCode)
                {
                    logMessage.Append("  remarkCode has changed.");
                    remarkCode = _remarkCode;
                    ret = true;
                }
                if (activeInd != _activeInd)
                {
                    logMessage.Append("  activeInd has changed.");
                    activeInd = _activeInd;
                    ret = true;
                }
                if (ret)
                {
                    startDateTime = _startDateTime.HasValue ? _startDateTime.Value.ToUniversalTime() : (DateTime?)null;
                    endDateTime = _endDateTime.HasValue ? _endDateTime.Value.ToUniversalTime() : (DateTime?)null;
                    rowChangedBy = currentUserId;
                    rowChangedDate = DateTime.Now;
                }
                return ret;
            }
        }
        #endregion

        #region DateTimeConversion
        private static bool DateCompare(DateTime? dtm1, DateTime? dtm2)
        {
            if (dtm1.HasValue)
            {
                if (dtm2.HasValue)
                {
                    DateTime d1 = dtm1.Value;
                    DateTime d2 = dtm2.Value;
                    return d1 == d2;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                return !dtm2.HasValue;
            }
        }

        public DateTime? GetDateTime(string dateTimeVariableName, string timezoneVariableName)
        {
            Object dtmOValue = Dts.Variables[dateTimeVariableName].Value;
            if (dtmOValue == null)
            {
                return null;
            }
            String dtmSValue = dtmOValue.ToString();

            if (string.IsNullOrEmpty(dtmSValue))
            {
                return null;
            }

            DateTime convertedValue = Convert.ToDateTime(dtmSValue);

            if (convertedValue.Kind == DateTimeKind.Unspecified)
            {
                TimeZoneInfo tzInfo = TimeZoneInfo.FindSystemTimeZoneById((String)Dts.Variables[timezoneVariableName].Value);
                TimeSpan offset = tzInfo.GetUtcOffset(convertedValue);
                DateTime afterAdjustment = convertedValue.Subtract(offset);
                return new DateTime(afterAdjustment.Year, afterAdjustment.Month, afterAdjustment.Day, afterAdjustment.Hour, afterAdjustment.Minute, afterAdjustment.Second, DateTimeKind.Utc);
            }
            else
            {
                return convertedValue;
            }
        }

        #endregion
        public static string EncodeNonAsciiCharacters(string value)
        {
            return Regex.Replace(value, @"[^\x00-\x7F]", c => string.Format(@"\u{0:x4}", (int)c.Value[0]));
        }

    }
}]]></ProjectItem>
                  <ProjectItem
                    Name="ST_bff62daa7bd642e3aa74f822dafe3a85.csproj"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{A764679C-32A5-4A64-8D7F-4FF67EF9C12D}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_044ed802767949b5973e121564e7b333</RootNamespace>
    <AssemblyName>ST_bff62daa7bd642e3aa74f822dafe3a85</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Web.Helpers, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
      <DesignTime>True</DesignTime>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\10.0\InstallDir#\devenv.exe" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
                  <ProjectItem
                    Name="Project"
                    Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_044ed802767949b5973e121564e7b333</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_044ed802767949b5973e121564e7b333</msb:DisplayName>
		<msb:ProjectId>{56483FBB-49C5-4902-843C-D36F30910143}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_bff62daa7bd642e3aa74f822dafe3a85.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_044ed802767949b5973e121564e7b333.Properties.Settings.get_Default():ST_044ed802767949b5973e121564e7b333.Properties.Sett" +
    "ings")]

namespace ST_044ed802767949b5973e121564e7b333.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.settings"
                    Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Resources.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_044ed802767949b5973e121564e7b333.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_044ed802767949b5973e121564e7b333.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_044ed802767949b5973e121564e7b333.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_044ed802767949b5973e121564e7b333.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_044ed802767949b5973e121564e7b333.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
                  <BinaryItem
                    Name="ST_bff62daa7bd642e3aa74f822dafe3a85.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDALZ13FwAAAAAAAAAAOAAAiELAQsAADIAAAAIAAAAAAAAnlEA
AAAgAAAAYAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACgAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAFBRAABLAAAAAGAAAAgEAAAAAAAAAAAAAAAAAAAA
AAAAAIAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAApDEAAAAgAAAAMgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAAgEAAAAYAAAAAYAAAA0AAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAIAAAAACAAAAOgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAACA
UQAAAAAAAEgAAAACAAUAyCoAAIgmAAABAAAAAAAAABAqAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKA4AAAoqEzACAC0AAAABAAARfgEAAAQtIHIBAABw0AIA
AAIoDwAACm8QAAAKcxEAAAoKBoABAAAEfgEAAAQqGn4CAAAEKh4CgAIAAAQqGn4DAAAEKi5zBgAA
BoADAAAEKh4CKBQAAAoqChcqAAAbMAoA/gMAAAIAABFzFgAACgoWCwIoFwAACm8YAAAKcnMAAHBv
GQAACm8aAAAKpSUAAAEMBnK1AABwCIwlAAABbxsAAAomAigXAAAKbxgAAApyCQEAcG8ZAAAKbxoA
AAqlJQAAAQ0CclEBAHByfwEAcCgLAAAGEwQCcrUBAHByfwEAcCgLAAAGEwUCKBcAAApvGAAACnLd
AQBwbxkAAApvGgAACnQmAAABEwYCKBcAAApvGAAACnL9AQBwbxkAAApvGgAACm8cAAAKEwcCKBcA
AApvGAAACnIlAgBwbxkAAApvGgAACqUnAAABEwgCKBcAAApvGAAACnJfAgBwbxkAAApvGgAACm8c
AAAKEwkCKBcAAApvGAAACnKjAgBwbxkAAApvGgAACnQmAAABEwoCKBcAAApvGAAACnLLAgBwbxkA
AApvGgAACnQmAAABEwsCKBcAAApvGAAACnLrAgBwbxkAAApvGgAACnQmAAABEwwCKBcAAApvGAAA
CnIRAwBwbxkAAApvGgAACnQmAAABEw0RDSweEQ0XjSgAAAETGREZFh9cnREZbx0AAAooAQAAKxMN
fgQAAAQtERT+Bg4AAAZzHwAACoAEAAAEfgQAAAQoIAAACiDwDAAAKCEAAApyMwMAcBqNAQAAARMa
ERoWEQqiERoXCIwlAAABohEaGBELohEaGREMohEaKCIAAAoTDhEOcrEDAHBytQMAcG8jAAAKEw4R
DnK9AwBwcsEDAHBvIwAAChMOKCQAAAomAggRChELEQwoCQAABhMPEQ8tHQZyyQMAcG8lAAAKJnMp
AAAGEw8RDwhvEQAABisMBnL9AwBwbyUAAAomEQ8JEQQRBREHEQYRCREIEQ0GbygAAAY54wAAABgT
EDjRAAAAEQ4oJgAACnQuAAABExEGcmEEAHBvJQAACiYRDygnAAAKExIREigMAAAGExIREXKpBABw
bygAAAoREXKxBABwbykAAAoRERESbyoAAApqbysAAAoREW8sAAAKKC0AAApzLgAAChMTERMREm8v
AAAKERNvMAAAChERbzEAAAoTFBEUbzIAAAoTFREVczMAAAoTFhEWbzQAAAomERZvNQAAChYTEN4s
ExcREBdZExAREBYxGgZy0wQAcBEXbzYAAAooNwAACm8lAAAKJisDERd63gAREBY9J////ysMBnI1
BQBwbyUAAAomAigXAAAKFm84AAAKBnJfBQBwbyUAAAomAigXAAAKbzkAAAoWcokFAHAGbxwAAAp+
OgAAChYSAW87AAAK3kYTGAZynwUAcBEYbzYAAApvGwAACiYCKBcAAApvOQAAChZyiQUAcAZvHAAA
Cn46AAAKFm88AAAKJgIoFwAAChdvOAAACt4AKgAAQTQAAAAAAACSAgAApQAAADcDAAAsAAAANwAA
AQAAAADUAQAA4wEAALcDAABGAAAANwAAARswBACbAAAAAwAAEXIzAwBwGo0BAAABEwgRCBYEohEI
FwOMJQAAAaIRCBgFohEIGQ4EohEIKCIAAAoKBnKxAwBwcrUDAHBvIwAACgoGcr0DAHBywQMAcG8j
AAAKCgYoJgAACnQuAAABCwdvMQAACgwIbzIAAAoNCXMzAAAKEwQRBG80AAAKEwURBG81AAAKEQUo
AgAAKxMGEQYTB94GJhQTB94AEQcqAAEQAAAAAAAAkpIABjcAAAETMAIANwAAAAQAABEPACg+AAAK
LCMPASg+AAAKLBgPACg/AAAKCg8BKD8AAAoLBgcoQAAACioWKg8BKD4AAAoW/gEqABMwBwDBAAAA
BQAAEQIoFwAACm8YAAAKA28ZAAAKbxoAAAoKBi0LEgb+FQEAABsRBioGbxwAAAoLByhBAAAKLAsS
B/4VAQAAGxEHKgcoQgAACgwSAihDAAAKLWsCKBcAAApvGAAACgRvGQAACm8aAAAKdCYAAAEoRAAA
Cg0JCG9FAAAKEwQSAhEEKEYAAAoTBRIFKEcAAAoSBShIAAAKEgUoSQAAChIFKEoAAAoSBShLAAAK
EgUoTAAAChdzTQAACnNOAAAKKghzTgAACipyctMFAHACb08AAAoWb1AAAAqMJQAAASg3AAAKKqYC
cuUFAHB+BQAABC0RFP4GDwAABnNRAAAKgAUAAAR+BQAABChSAAAKKh4CKFMAAAoqHgJ7CQAABCoi
AgN9CQAABCoeAnsKAAAEKiICA30KAAAEKh4CewsAAAQqIgIDfQsAAAQqHgJ7DAAABCoiAgN9DAAA
BCoeAnsNAAAEKiICA30NAAAEKh4Cew4AAAQqIgIDfQ4AAAQqHgJ7DwAABCoiAgN9DwAABCoeAnsQ
AAAEKiICA30QAAAEKh4CexEAAAQqIgIDfREAAAQqHgJ7EgAABCoiAgN9EgAABCoeAnsTAAAEKiIC
A30TAAAEKh4CexQAAAQqIgIDfRQAAAQqEzACABcCAAAGAAARFgoCKCAAAAYtFw4Jcv8FAHBvJQAA
CiYCDggoIQAABhcKAigkAAAGCxIBKD4AAAotHw4Jci8GAHBvJQAACiYCKCQAAApzTgAACiglAAAG
FwoCKBIAAAYDLhYOCXJjBgBwbyUAAAomAgMoEwAABhcKAigUAAAGBCgKAAAGLT0OCXKZBgBwbyUA
AAomAg8CKD4AAAotCxIC/hUBAAAbCCsUDwIoPwAACg0SAyhUAAAKc04AAAooFQAABhcKAigWAAAG
BSgKAAAGLT8OCXLTBgBwbyUAAAomAg8DKD4AAAotDBIE/hUBAAAbEQQrFQ8DKD8AAAoTBRIFKFQA
AApzTgAACigXAAAGFwoCKBgAAAYOBChVAAAKLBcOCXIJBwBwbyUAAAomAg4EKBkAAAYXCgIoGgAA
Bg4FKFUAAAosFw4Jcj0HAHBvJQAACiYCDgUoGwAABhcKAigcAAAGDgYoVQAACiwXDglyaQcAcG8l
AAAKJgIOBigdAAAGFwoCKB4AAAYOBy4XDglynQcAcG8lAAAKJgIOBygfAAAGFwoGLHgCDwIoPgAA
Ci0MEgb+FQEAABsRBisVDwIoPwAAChMHEgcoVAAACnNOAAAKKBUAAAYCDwMoPgAACi0MEgj+FQEA
ABsRCCsVDwMoPwAAChMJEgkoVAAACnNOAAAKKBcAAAYCDggoIwAABgIoJAAACnNOAAAKKCcAAAYG
Kh4CKA4AAAoqALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRl
ciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlU
b2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0
AgAAAAAAAAAAAAAAUEFEUEFEULQAAABCU0pCAQABAAAAAAAMAAAAdjQuMC4zMDMxOQAAAAAFAGwA
AADsCgAAI34AAFgLAACUDwAAI1N0cmluZ3MAAAAA7BoAANAHAAAjVVMAvCIAABAAAAAjR1VJRAAA
AMwiAAC8AwAAI0Jsb2IAAAAAAAAAAgAAAVcdogkJCwAAAPolMwAWAAABAAAAQAAAAAYAAAAUAAAA
KQAAACQAAABVAAAAAgAAADcAAAAGAAAAAwAAAA8AAAAcAAAAAQAAAAEAAAAGAAAAAQAAAAIAAAAC
AAAAAAAKAAEAAAAAAAYA0wDMAAoA7wDaAA4ATwEmAQYAawHMAAYAgQFwAQYAsgGdAQYATgLMAAYA
WQLMAAYASQQ9BAYAOAceBwYAYwdRBwYAegdRBwYAlwdRBwYAtgdRBwYAzwdRBwYA6AdRBwYAAwhR
BwYAHghRBwYANwhRBwYAcAhQCAYAkAhQCAYA5QjSCAYAAgnMAAYABwnMAAYAKwlRBwoAVwlBCQoA
cAlBCQYAhQlQCA4ApwkmAQYA9wnJCQoABwrJCQoAJQoRCgoAXAoRCg4ApwomARIAAAvgChIAGAvg
CgYANAvMAAYARwvMAAYAVwvMAAYAXwvMABYAggt2CwYAqAuNCwoAxgu7CwoAAgy7CwoASgy7CwoA
XAy7CxoAfgxrDAYAzAzCDAYA5Aw9BAYA9wzCDAYABA3CDAoAGw27CwYARQ3CDAYAUg3CDAYAZw3M
AA4AjA0mAQYA+Q3MAAYADA7MAAYAIg7MAAYARg7MAAoAvg6fDgoA5Q6fDgoAGw+fDgoALQ+fDgAA
AAABAAAAAAABAAEAAAAQADIAPAAFAAEAAQAAARAAawA8AAkAAwAFAAEAEAB0AH8ADQAEAAgAAwEA
AKMAAAARAAYAEAADABAAsQAAAAUACQAQABEAkQETABEAvgEXABEACAI5ABEAgAohAREA9A66AgYG
kwJwAFaAmwJzAFaAowJzAAEAXQRwAAEAggRwAAEAnwTHAAEAvgTHAAEA2wTPAAEA9wTPAAEADwXP
AAEAKwXSAAEARgXPAAEAZAXPAAEAggXHAAEAogXHAFAgAAAAAIMYzgEbAAEAWCAAAAAAkwjUAR8A
AQCRIAAAAACTCOgBJAABAJggAAAAAJMI9AEpAAEAoCAAAAAAlggYAj0AAgCzIAAAAACGGM4BGwAC
AKcgAAAAAJEYoAkRAQIAwCAAAAAAhgAsAhsAAgAAJQAAAACBADECRwACALglAAAAAJEAYgJQAAYA
/CUAAAAAhgBuAmAACADmJgAAAACWAHoCawAKABAnAAAAAIYYzgEbAAsAuyAAAAAAkQA1ChUBCwDJ
JgAAAACRAMQOswIPABgnAAAAAIYIqwKBABAAICcAAAAAhgjDAoUAEAApJwAAAACGCNsCgQARADEn
AAAAAIYI6wKFABEAOicAAAAAhgj7AooAEgBCJwAAAACGCA0DkwASAEsnAAAAAIYIHwOKABMAUycA
AAAAhggvA5MAEwBcJwAAAACGCD8DnQAUAGQnAAAAAIYITgOhABQAbScAAAAAhghdA50AFQB1JwAA
AACGCGgDoQAVAH4nAAAAAIYIcwOdABYAhicAAAAAhgiCA6EAFgCPJwAAAACGCJEDpgAXAJcnAAAA
AIYInwOqABcAoCcAAAAAhgitA50AGACoJwAAAACGCL4DoQAYALEnAAAAAIYIzwOdABkAuScAAAAA
hgjgA6EAGQDCJwAAAACGCPEDigAaAMonAAAAAIYIBASTABoA0ycAAAAAhggXBIoAGwDbJwAAAACG
CCoEkwAbAOQnAAAAAIYAVwSvABwAByoAAAAAhhjOARsAJQAAAAEAWwYAAAEAwgUAAAIAYQYAAAMA
bAYAAAQAcwYAAAEAfQYAAAIAggYAAAEAhwYAAAIAnAYAAAEAWwYAAAEAQAoAAAIARwoAAAMATgoA
AAQAVQoAAAEA4w4AAAEAWwYAAAEAWwYAAAEAWwYAAAEAWwYAAAEAWwYAAAEAWwYAAAEAWwYAAAEA
WwYAAAEAWwYAAAEAWwYAAAEAWwYAAAEAWwYAAAEAsQYAAAIAvgYAAAMAzQYAAAQA2gYAAAUA5gYA
AAYA7gYAAAcA+gYAAAgABQcAAAkAEwdRAM4BoQBZAM4BoQBhAM4BoQBpAM4BoQBxAM4BoQB5AM4B
oQCBAM4BoQCJAM4BoQCRAM4BoQCZAM4BoQChAM4BhQCpAM4BGwCxAM4BGwAJAM4BGwC5ABkJ6gC5
ADQJ8QApAM4B9gDRAM4BAgHhAM4BGwARAM4BGwDpAM4BGwBJAM4BGwAZALkKJgERAQoLLAEZASEL
MgEhASoLOQFJADoLPQEJAE4LnQAxAWQLRAFJAbYLSwEJAc4BXAFZAdoLYgFZARcMaQExASwMcAEx
ATMMdwFBADsMfQFJAEMMggFpAVUMiAF5AYMMmAFpAYoMoQBpAZUMoQAxAaUMgQBpAbAMnQFpAdMM
ogGJAe0MqAGRAc4BrgGZAQ8NoQCZARUNGwBpAScNuAGhATMNogGpAc4BvgGxAV0NnQCxARUNGwC5
AXENnQAxASwMxQERAX0NhQARAaANywExAasNzwDBAbEN0QHBAcEN3AF5AcsNHwIMANINpgAMACoL
SQJBAN8NTgIxAesNXQLJAQEOYgJBABkOaALZAS8ObgLZAU8OdQJBAFwOfQJBAGUOgQBBAG4OgQBB
AHgOgQBBAIAOgQBBAIkOgQBBAJQOgQBBAM4BhQIMAM4BkgL5ASoLnQAxASMPvwLxAc4BXAEBAjMM
xAIZAM4BGwBBADMPzQIxAUMP0gIIABwAdwAIACAAfAApAJMACAEuADsAewMuAFsAkgMuADMATAMu
AEMAdQMuAGMAmwMuABMATAMuAAsAAgMuABsAdQMuACMAdQMuACsAdQNDAGsAfABJAJMACAFhAJsA
fACBAJsAfACDAKsAfAChAJsAfAAhAZsAfABBAZsAfABhAZsAfACBAZsAfAChAZsAfADAAZsAfADB
AZsAfADgAZsAfADhAZsAfAAAApsAfAABApsAfAAgApsAfAAhApsAfABAApsAfABBApsAfABgApsA
fABhApsAfACAApsAfACBApsAfACgApsAfADAApsAfADgApsAfAAAA5sAfAAgA5sAfABAA5sAfABg
A5sAfACAA5sAfACgA5sAfADAA5sAfADgA5sAfAAABJsAfAAgBJsAfABABJsAfABgBJsAfACABJsA
fACgBJsAfADABJsAfADgBJsAfAD9AOUBKwJWApgC2AICAAEAAwADAAYABAAAAIEBLwAAAAACNAAA
ACQCQgAAAMIF1QAAANYF1QAAAOIF2QAAAPAF2QAAAPwF4gAAAAcG4gAAAA4G4gAAABkG5gAAACMG
4gAAADAG4gAAAD0G2QAAAEwG2QACAAIAAwACAAMABQABAAQABQACAAUABwABABEACQACABAACQAC
ABIACwABABMACwACABQADQABABUADQACABYADwABABcADwABABkAEQACABgAEQACABoAEwABABsA
EwACABwAFQABAB0AFQACAB4AFwABAB8AFwACACAAGQABACEAGQACACIAGwABACMAGwACACQAHQAB
ACUAHQACACYAHwABACcAHwBCAgSAAAABAAAAohtjXgAAAAAAAK4IAAAEAAAAAAAAAAAAAAABAMMA
AAAAAAQAAAAAAAAAAAAAAAEAzAAAAAAACwAAAAAAAAAAAAAACgAHAQAAAAALAAAAAAAAAAAAAAAK
AMEKAAAAAAQAAAAAAAAAAAAAAAEAagsAAAAAAQAAAAAAAAAAAAAAjwFrDAAAAAAAAAAAAQAAAFEP
AAAFAAQABgAEAD0AWAF7ACYCAAAAPE1vZHVsZT4AU1RfYmZmNjJkYWE3YmQ2NDJlM2FhNzRmODIy
ZGFmZTNhODUuZGxsAFJlc291cmNlcwBTVF8wNDRlZDgwMjc2Nzk0OWI1OTczZTEyMTU2NGU3YjMz
My5Qcm9wZXJ0aWVzAFNldHRpbmdzAFNjcmlwdE1haW4AU1RfMDQ0ZWQ4MDI3Njc5NDliNTk3M2Ux
MjE1NjRlN2IzMzMAU2NyaXB0UmVzdWx0cwBPcGVyYXRpb25hbFJlbWFyawBtc2NvcmxpYgBTeXN0
ZW0AT2JqZWN0AFN5c3RlbS5Db25maWd1cmF0aW9uAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAE1p
Y3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNr
cy5TY3JpcHRUYXNrAFZTVEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBFbnVtAFN5c3RlbS5SZXNv
dXJjZXMAUmVzb3VyY2VNYW5hZ2VyAHJlc291cmNlTWFuAFN5c3RlbS5HbG9iYWxpemF0aW9uAEN1
bHR1cmVJbmZvAHJlc291cmNlQ3VsdHVyZQAuY3RvcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAGdldF9D
dWx0dXJlAHNldF9DdWx0dXJlAEN1bHR1cmUAZGVmYXVsdEluc3RhbmNlAGdldF9EZWZhdWx0AERl
ZmF1bHQATWFpbgBHZXRFeGlzdGluZ09wZXJhdGlvbmFsUmVtYXJrAE51bGxhYmxlYDEARGF0ZVRp
bWUARGF0ZUNvbXBhcmUAR2V0RGF0ZVRpbWUARW5jb2RlTm9uQXNjaWlDaGFyYWN0ZXJzAHZhbHVl
X18AU3VjY2VzcwBGYWlsdXJlAGdldF9vcGVyYXRpb25hbFJlbWFya0lkAHNldF9vcGVyYXRpb25h
bFJlbWFya0lkAGdldF90b3VyU2hlZXRJZABzZXRfdG91clNoZWV0SWQAZ2V0X3N0YXJ0RGF0ZVRp
bWUAc2V0X3N0YXJ0RGF0ZVRpbWUAZ2V0X2VuZERhdGVUaW1lAHNldF9lbmREYXRlVGltZQBnZXRf
cmVtYXJrVHlwZQBzZXRfcmVtYXJrVHlwZQBnZXRfcmVtYXJrAHNldF9yZW1hcmsAZ2V0X3JlbWFy
a0NvZGUAc2V0X3JlbWFya0NvZGUAZ2V0X2FjdGl2ZUluZABzZXRfYWN0aXZlSW5kAGdldF9yb3dD
cmVhdGVkQnkAc2V0X3Jvd0NyZWF0ZWRCeQBnZXRfcm93Q2hhbmdlZEJ5AHNldF9yb3dDaGFuZ2Vk
QnkAZ2V0X3Jvd0NyZWF0ZWREYXRlAHNldF9yb3dDcmVhdGVkRGF0ZQBnZXRfcm93Q2hhbmdlZERh
dGUAc2V0X3Jvd0NoYW5nZWREYXRlAFN5c3RlbS5UZXh0AFN0cmluZ0J1aWxkZXIAQXBwbHkAPG9w
ZXJhdGlvbmFsUmVtYXJrSWQ+a19fQmFja2luZ0ZpZWxkADx0b3VyU2hlZXRJZD5rX19CYWNraW5n
RmllbGQAPHN0YXJ0RGF0ZVRpbWU+a19fQmFja2luZ0ZpZWxkADxlbmREYXRlVGltZT5rX19CYWNr
aW5nRmllbGQAPHJlbWFya1R5cGU+a19fQmFja2luZ0ZpZWxkADxyZW1hcms+a19fQmFja2luZ0Zp
ZWxkADxyZW1hcmtDb2RlPmtfX0JhY2tpbmdGaWVsZAA8YWN0aXZlSW5kPmtfX0JhY2tpbmdGaWVs
ZAA8cm93Q3JlYXRlZEJ5PmtfX0JhY2tpbmdGaWVsZAA8cm93Q2hhbmdlZEJ5PmtfX0JhY2tpbmdG
aWVsZAA8cm93Q3JlYXRlZERhdGU+a19fQmFja2luZ0ZpZWxkADxyb3dDaGFuZ2VkRGF0ZT5rX19C
YWNraW5nRmllbGQAb3BlcmF0aW9uYWxSZW1hcmtJZAB0b3VyU2hlZXRJZABzdGFydERhdGVUaW1l
AGVuZERhdGVUaW1lAHJlbWFya1R5cGUAcmVtYXJrAHJlbWFya0NvZGUAYWN0aXZlSW5kAHJvd0Ny
ZWF0ZWRCeQByb3dDaGFuZ2VkQnkAcm93Q3JlYXRlZERhdGUAcm93Q2hhbmdlZERhdGUAdmFsdWUA
c2VydmVyTmFtZQBhcGlLZXkAYWNjZXNzS2V5AGR0bTEAZHRtMgBkYXRlVGltZVZhcmlhYmxlTmFt
ZQB0aW1lem9uZVZhcmlhYmxlTmFtZQBfdG91clNoZWV0SWQAX3N0YXJ0RGF0ZVRpbWUAX2VuZERh
dGVUaW1lAF9yZW1hcmtUeXBlAF9yZW1hcmsAX3JlbWFya0NvZGUAX2FjdGl2ZUluZABjdXJyZW50
VXNlcklkAGxvZ01lc3NhZ2UAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBUYXJnZXRGcmFtZXdv
cmtBdHRyaWJ1dGUAU3lzdGVtLlJlZmxlY3Rpb24AQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3Nl
bWJseURlc2NyaXB0aW9uQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBB
c3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5
Q29weXJpZ2h0QXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAEFzc2VtYmx5Q3Vs
dHVyZUF0dHJpYnV0ZQBBc3NlbWJseVZlcnNpb25BdHRyaWJ1dGUAU3lzdGVtLlJ1bnRpbWUuQ29t
cGlsZXJTZXJ2aWNlcwBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAFJ1bnRpbWVDb21w
YXRpYmlsaXR5QXR0cmlidXRlAFNUX2JmZjYyZGFhN2JkNjQyZTNhYTc0ZjgyMmRhZmUzYTg1AFN5
c3RlbS5EaWFnbm9zdGljcwBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAFR5cGUAUnVudGlt
ZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUAQXNzZW1ibHkAZ2V0X0Fzc2VtYmx5AFN5c3Rl
bS5Db21wb25lbnRNb2RlbABFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxl
U3RhdGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUALmNjdG9yAFNTSVNTY3JpcHRUYXNrRW50
cnlQb2ludEF0dHJpYnV0ZQBTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5Llg1MDlDZXJ0aWZp
Y2F0ZXMAWDUwOUNlcnRpZmljYXRlAFg1MDlDaGFpbgBTeXN0ZW0uTmV0LlNlY3VyaXR5AFNzbFBv
bGljeUVycm9ycwA8TWFpbj5iX18wAHBhcmFtMABwYXJhbTEAcGFyYW0yAHBhcmFtMwBSZW1vdGVD
ZXJ0aWZpY2F0ZVZhbGlkYXRpb25DYWxsYmFjawBDUyQ8PjlfX0NhY2hlZEFub255bW91c01ldGhv
ZERlbGVnYXRlMQBTY3JpcHRPYmplY3RNb2RlbABnZXRfRHRzAE1pY3Jvc29mdC5TcWxTZXJ2ZXIu
TWFuYWdlZERUUwBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lAFZhcmlhYmxlcwBnZXRf
VmFyaWFibGVzAFZhcmlhYmxlAGdldF9JdGVtAGdldF9WYWx1ZQBJbnQzMgBBcHBlbmRGb3JtYXQA
U3RyaW5nAFRvU3RyaW5nAEJvb2xlYW4AQ2hhcgBTcGxpdABTeXN0ZW0uQ29yZQBTeXN0ZW0uTGlu
cQBFbnVtZXJhYmxlAFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljAElFbnVtZXJhYmxlYDEATGFz
dABTeXN0ZW0uTmV0AFNlcnZpY2VQb2ludE1hbmFnZXIAc2V0X1NlcnZlckNlcnRpZmljYXRlVmFs
aWRhdGlvbkNhbGxiYWNrAFNlY3VyaXR5UHJvdG9jb2xUeXBlAHNldF9TZWN1cml0eVByb3RvY29s
AEZvcm1hdABSZXBsYWNlAGdldF9Ob3cAQXBwZW5kAFdlYlJlcXVlc3QAQ3JlYXRlAEh0dHBXZWJS
ZXF1ZXN0AFN5c3RlbS5XZWIuSGVscGVycwBKc29uAEVuY29kZQBzZXRfTWV0aG9kAHNldF9Db250
ZW50VHlwZQBnZXRfTGVuZ3RoAHNldF9Db250ZW50TGVuZ3RoAFN5c3RlbS5JTwBTdHJlYW0AR2V0
UmVxdWVzdFN0cmVhbQBFbmNvZGluZwBnZXRfQVNDSUkAU3RyZWFtV3JpdGVyAFRleHRXcml0ZXIA
V3JpdGUAQ2xvc2UAV2ViUmVzcG9uc2UAR2V0UmVzcG9uc2UAR2V0UmVzcG9uc2VTdHJlYW0AU3Ry
ZWFtUmVhZGVyAFRleHRSZWFkZXIAUmVhZFRvRW5kAEV4Y2VwdGlvbgBnZXRfTWVzc2FnZQBzZXRf
VGFza1Jlc3VsdABFdmVudHNPYmplY3RXcmFwcGVyAGdldF9FdmVudHMARW1wdHkARmlyZUluZm9y
bWF0aW9uAEZpcmVFcnJvcgBEZWNvZGUAZ2V0X0hhc1ZhbHVlAG9wX0VxdWFsaXR5AElzTnVsbE9y
RW1wdHkAQ29udmVydABUb0RhdGVUaW1lAERhdGVUaW1lS2luZABnZXRfS2luZABUaW1lWm9uZUlu
Zm8ARmluZFN5c3RlbVRpbWVab25lQnlJZABUaW1lU3BhbgBHZXRVdGNPZmZzZXQAU3VidHJhY3QA
Z2V0X1llYXIAZ2V0X01vbnRoAGdldF9EYXkAZ2V0X0hvdXIAZ2V0X01pbnV0ZQBnZXRfU2Vjb25k
AFN5c3RlbS5UZXh0LlJlZ3VsYXJFeHByZXNzaW9ucwBNYXRjaAA8RW5jb2RlTm9uQXNjaWlDaGFy
YWN0ZXJzPmJfXzIAYwBNYXRjaEV2YWx1YXRvcgBDUyQ8PjlfX0NhY2hlZEFub255bW91c01ldGhv
ZERlbGVnYXRlMwBDYXB0dXJlAGdldF9DaGFycwBSZWdleABUb1VuaXZlcnNhbFRpbWUAb3BfSW5l
cXVhbGl0eQBTVF8wNDRlZDgwMjc2Nzk0OWI1OTczZTEyMTU2NGU3YjMzMy5Qcm9wZXJ0aWVzLlJl
c291cmNlcy5yZXNvdXJjZXMAAHFTAFQAXwAwADQANABlAGQAOAAwADIANwA2ADcAOQA0ADkAYgA1
ADkANwAzAGUAMQAyADEANQA2ADQAZQA3AGIAMwAzADMALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4A
UgBlAHMAbwB1AHIAYwBlAHMAAEFVAHMAZQByADoAOgBpAG4AdABXAGUAbABsAEQAcgBpAGwAbABQ
AGUAcgBpAG8AZABSAGUAbQBhAHIAawBJAGQAAFNQAHIAbwBjAGUAcwBzAGkAbgBnACAAdABvAHUA
cgAgAHMAaABlAGUAdAAgAHIAZQBtAGEAcgBrACAAdwBpAHQAaAAgAGkAZAAgAHsAMAB9AC4AAEdV
AHMAZQByADoAOgBpAG4AdABXAGUAbABsAEQAcgBpAGwAbABQAGUAcgBpAG8AZABJAGQARgBvAHIA
UgBlAG0AYQByAGsAAC1VAHMAZQByADoAOgBvAGIAagBFAGYAZgBlAGMAdABpAHYAZQBEAGEAdABl
AAA1VQBzAGUAcgA6ADoAcwB0AHIAQwBvAG4AdgBlAHIAdABlAGQAVABpAG0AZQBaAG8AbgBlAAAn
VQBzAGUAcgA6ADoAbwBiAGoARQB4AHAAaQByAHkARABhAHQAZQAAH1UAcwBlAHIAOgA6AHMAdABy
AFIAZQBtAGEAcgBrAAAnVQBzAGUAcgA6ADoAbwBiAGoAUgBlAG0AYQByAGsAVAB5AHAAZQAAOVUA
cwBlAHIAOgA6AGIAbwBvAGwAQQBjAHQAaQB2AGUASQBuAGQARgBvAHIAUgBlAG0AYQByAGsAAENz
AHQAcgBSAGUAbQBhAHIAawBDAG8AZABlAEYAbwByAE8AcABlAHIAYQB0AGkAbwBuAGEAbABSAGUA
bQBhAHIAawAAJ1UAcwBlAHIAOgA6AHMAdAByAFMAZQByAHYAZQByAE4AYQBtAGUAAB9VAHMAZQBy
ADoAOgBzAHQAcgBBAHAAaQBLAGUAeQAAJVUAcwBlAHIAOgA6AHMAdAByAEEAYwBjAGUAcwBzAEsA
ZQB5AAAhUwB5AHMAdABlAG0AOgA6AFUAcwBlAHIATgBhAG0AZQAAfWgAdAB0AHAAcwA6AC8ALwB7
ADAAfQAvAGEAcABpAC8AbwBwAGUAcgBhAHQAaQBvAG4AYQBsAFIAZQBtAGEAcgBrAC8AewAxAH0A
PwBhAHAAaQBrAGUAeQA9AHsAMgB9ACYAYQBjAGMAZQBzAHMAawBlAHkAPQB7ADMAfQAAAyAAAAcl
ADIAMAAAAyQAAAclADIANAAAMyAATgBvAHQAIABmAG8AdQBuAGQAIAAtACAAdwBpAGwAbAAgAGkA
bgBzAGUAcgB0AC4AAWMgAEUAbgB0AGkAdAB5ACAAZgBvAHUAbgBkACAALQAgAHcAaQBsAGwAIABj
AGgAZQBjAGsAIABpAGYAIAB1AHAAZABhAHQAZQAgAGkAcwAgAHIAZQBxAHUAaQByAGUAZAAuAAFH
IABBAHQAdABlAG0AcAB0AGkAbgBnACAAdwByAGkAdABlACAAdABvACAARABhAHQAYQBHAHUAbQBi
AG8AIABBAFAASQAuAAAHUABVAFQAACFhAHAAcABsAGkAYwBhAHQAaQBvAG4ALwBqAHMAbwBuAABh
IABIAFQAVABQACAAcAB1AHQAIABmAGEAaQBsAGUAZAAgAHcAaQB0AGgAIABlAHgAYwBlAHAAdABp
AG8AbgAgAHsAMAB9AC4AIABXAGkAbABsACAAcgBlAHQAcgB5AC4AACkgAE4AbwAgAHUAcABkAGEA
dABlACAAcgBlAHEAdQBpAHIAZQBkAC4AACkgACAAUgBlAHQAdQByAG4AaQBuAGcAIABTAHUAYwBj
AGUAcwBzAC4AABVHAHUAbQBiAG8AIABTAFMASQBTAAAzIAAgAEUAbgBjAG8AdQBuAHQAZQByAGUA
ZAAgAGUAcgByAG8AcgA6ACAAewAwAH0ALgAAEVwAdQB7ADAAOgB4ADQAfQAAGVsAXgBcAHgAMAAw
AC0AXAB4ADcARgBdAAEvIAAgAHIAbwB3AEMAcgBlAGEAdABlAGQAQgB5ACAAaQBzACAAbgB1AGwA
bAAuAAAzIAAgAHIAbwB3AEMAcgBlAGEAdABlAGQARABhAHQAZQAgAGkAcwAgAG4AdQBsAGwALgAA
NSAAIAB0AG8AdQByAFMAaABlAGUAdABJAGQAIABoAGEAcwAgAGMAaABhAG4AZwBlAGQALgAAOSAA
IABzAHQAYQByAHQARABhAHQAZQBUAGkAbQBlACAAaABhAHMAIABjAGgAYQBuAGcAZQBkAC4AADUg
ACAAZQBuAGQARABhAHQAZQBUAGkAbQBlACAAaABhAHMAIABjAGgAYQBuAGcAZQBkAC4AADMgACAA
cgBlAG0AYQByAGsAdAB5AHAAZQAgAGgAYQBzACAAYwBoAGEAbgBnAGUAZAAuAAArIAAgAHIAZQBt
AGEAcgBrACAAaABhAHMAIABjAGgAYQBuAGcAZQBkAC4AADMgACAAcgBlAG0AYQByAGsAQwBvAGQA
ZQAgAGgAYQBzACAAYwBoAGEAbgBnAGUAZAAuAAAxIAAgAGEAYwB0AGkAdgBlAEkAbgBkACAAaABh
AHMAIABjAGgAYQBuAGcAZQBkAC4AAADfGKZcKJghQJQQrlU9wjP6AAi3elxWGTTgiQiJhF3NgIDM
kQMGEhUDBhIZAyAAAQQAABIVBAAAEhkFAAEBEhkECAASFQQIABIZAwYSDAQAABIMBAgAEgwIIAQS
GAgODg4PAAICFREdAREhFREdAREhCiACFREdAREhDg4EAAEODgIGCAMGERQEAAAAAAQBAAAAAyAA
CAQgAQEICCAAFREdAREhCSABARURHQERIQMgAA4EIAEBDgMgAAIEIAEBAhcgCQIIFREdAREhFREd
AREhDg4OAg4SJQcGFREdAREhAgYOAgYCAygACAgoABURHQERIQMoAA4DKAACBgABEl0RYQQgABJl
BiACAQ4SZQQHARIVBSABARFtCAEAAgAAAAAAAwAAAQsABAIcEnkSfRGAgQQGEoCFBSAAEoCJBSAA
EoCNBiABEoCRHAMgABwGIAISJQ4cBiABHQ4dAwwQAQEeABUSgKkBHgADCgEOBSACARwYBgABARKA
hQYAAQERgLEGAAIODh0cBSACDg4OBAAAESEFIAESJQ4GAAESgLUOCDG/OFatNk41BAABDhwEIAEB
CgUgABKAwQUAABKAxQkgAgESgMESgMUFIAASgNEGIAEBEoDBBQACDg4cBSAAEoDhCiAGAQgODg4I
EAIIIAUCCA4ODgg5BxsSJQIICBURHQERIRURHQERIQ4OAg4ODg4ODhIYCBKAuQ4SgMkSgNESgMES
gNUSgN0SgN0dAx0cBhABAR4ADgQKARIYFgcJDhKAuRKA0RKAwRKA1Q4SGBIYHRwGFREdAREhBCAA
EwAHAAICESERIQYHAhEhESEEAAECDgUAAREhDgUgABGA6QYAARKA7Q4HIAERgPERIQcgAREhEYDx
DCAHAQgICAgICBGA6QUgAQETABoHCBwOESESgO0RgPERIRURHQERIRURHQERIQYAAQ4SgPUEBhKA
+QQgAQMICAADDg4OEoD5BCAAESEFAAICDg4pBwoCFREdAREhFREdAREhESEVER0BESERIRURHQER
IREhFREdAREhESFJAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjUBAFQOFEZyYW1ld29ya0Rp
c3BsYXlOYW1lEi5ORVQgRnJhbWV3b3JrIDQuNSgBACNTVF8wNDRlZDgwMjc2Nzk0OWI1OTczZTEy
MTU2NGU3YjMzMwAABQEAAAAAFgEAEUNvcHlyaWdodCBAICAyMDE4AAAIAQAIAAAAAAAeAQABAFQC
FldyYXBOb25FeGNlcHRpb25UaHJvd3MBAAB4UQAAAAAAAAAAAACOUQAAACAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAgFEAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAAgAAA
AAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhgAACwAwAAAAAA
AAAAAACwAzQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAAAAEA
Y16iGwAAAQBjXqIbPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBs
AGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAEEAMAAAEA
UwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAA7AIAAAEAMAAwADAAMAAwADQAYgAwAAAAcAAk
AAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABfADAANAA0AGUAZAA4ADAA
MgA3ADYANwA5ADQAOQBiADUAOQA3ADMAZQAxADIAMQA1ADYANABlADcAYgAzADMAMwAAAEAADwAB
AEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA3ADAANwA0AC4AMgA0ADEANgAzAAAA
AABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAVABfAGIAZgBmADYAMgBkAGEAYQA3
AGIAZAA2ADQAMgBlADMAYQBhADcANABmADgAMgAyAGQAYQBmAGUAMwBhADgANQAuAGQAbABsAAAA
SAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABA
ACAAIAAyADAAMQA4AAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMA
VABfAGIAZgBmADYAMgBkAGEAYQA3AGIAZAA2ADQAMgBlADMAYQBhADcANABmADgAMgAyAGQAYQBm
AGUAMwBhADgANQAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQA
XwAwADQANABlAGQAOAAwADIANwA2ADcAOQA0ADkAYgA1ADkANwAzAGUAMQAyADEANQA2ADQAZQA3
AGIAMwAzADMAAABEAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADcA
MAA3ADQALgAyADQAMQA2ADMAAAAAAEgADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBv
AG4AAAAxAC4AMAAuADcAMAA3ADQALgAyADQAMQA2ADMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAMAAAAoDEAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
                </ScriptProject>
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:ForEachVariableMappings>
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{5BE02815-D19E-4196-8F0E-A2A62870A6C9}"
              DTS:ObjectName="{5BE02815-D19E-4196-8F0E-A2A62870A6C9}"
              DTS:ValueIndex="0"
              DTS:VariableName="User::intWellDrillPeriodRemarkId" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{02BEF0BC-09BD-4436-9BF2-9893617B1A2A}"
              DTS:ObjectName="{02BEF0BC-09BD-4436-9BF2-9893617B1A2A}"
              DTS:ValueIndex="1"
              DTS:VariableName="User::intWellDrillPeriodIdForRemark" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{654A2CF1-D3EF-4379-87B0-76512297601B}"
              DTS:ObjectName="{654A2CF1-D3EF-4379-87B0-76512297601B}"
              DTS:ValueIndex="2"
              DTS:VariableName="User::objEffectiveDate" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{CAB64965-25E2-4937-85D1-6AB1318CC535}"
              DTS:ObjectName="{CAB64965-25E2-4937-85D1-6AB1318CC535}"
              DTS:ValueIndex="3"
              DTS:VariableName="User::objExpiryDate" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{C1E882E9-F9C8-42C4-ACA3-447D0CC5D86A}"
              DTS:ObjectName="{C1E882E9-F9C8-42C4-ACA3-447D0CC5D86A}"
              DTS:ValueIndex="4"
              DTS:VariableName="User::strRemark" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{62244A93-A3CE-4D98-BD20-3BB11B600221}"
              DTS:ObjectName="{62244A93-A3CE-4D98-BD20-3BB11B600221}"
              DTS:ValueIndex="5"
              DTS:VariableName="User::objRemarkType" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{00F634A5-2766-4BAF-853A-22A5028DC5F5}"
              DTS:ObjectName="{00F634A5-2766-4BAF-853A-22A5028DC5F5}"
              DTS:ValueIndex="6"
              DTS:VariableName="User::boolActiveIndForRemark" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{F5A245C9-4624-4BC6-8CE7-84E8289FDC1C}"
              DTS:ObjectName="{F5A245C9-4624-4BC6-8CE7-84E8289FDC1C}"
              DTS:ValueIndex="7"
              DTS:VariableName="User::strRemarkCodeForOperationalRemark" />
          </DTS:ForEachVariableMappings>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Well Loop\Tripping Speeds Loop"
          DTS:CreationName="STOCK:FOREACHLOOP"
          DTS:Description="Foreach Loop Container"
          DTS:DTSID="{7b25de5b-4e7e-4771-b8eb-dfeedb20fff4}"
          DTS:ExecutableType="STOCK:FOREACHLOOP"
          DTS:LocaleID="-1"
          DTS:MaxErrorCount="6"
          DTS:ObjectName="Tripping Speeds Loop">
          <DTS:ForEachEnumerator
            DTS:CreationName="Microsoft.SqlServer.Dts.Runtime.Enumerators.ADO.ForEachADOEnumerator, Microsoft.SqlServer.ForEachADOEnumerator, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
            DTS:DTSID="{617bf2e8-2f19-4238-a4be-e1c3c54730e2}"
            DTS:ObjectName="{4F357A1D-CA44-434A-8085-25C4D1BB103C}">
            <DTS:ObjectData>
              <FEEADO
                EnumType="EnumerateRowsInFirstTable"
                VarName="User::objTrippingSpeedList" />
            </DTS:ObjectData>
          </DTS:ForEachEnumerator>
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Well Loop\Tripping Speeds Loop\C# Script to Call Data Gumbo Tripping Speed API"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Script Task"
              DTS:DTSID="{071444ff-dfd8-41a8-9da4-9d1f04ee9944}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="C# Script to Call Data Gumbo Tripping Speed API"
              DTS:ThreadHint="2">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:ObjectData>
                <ScriptProject
                  Name="ST_920433629e24497b8794725ec493be1e"
                  VSTAMajorVersion="3"
                  VSTAMinorVersion="0"
                  Language="CSharp"
                  ReadOnlyVariables="User::strBitDepthUom,User::strBlockHeightUom,User::strRemarkTypeForTrippingSpeed,User::boolActiveIndForTrippingSpeed,User::boolIsBitInCasing,User::boolIsCrewHandlingBHA,User::dblActiveDeltaBitDepth,User::dblActiveDeltaBlockHeight,User::dblActiveDistanceTravelled,User::dblActiveTime,User::dblFromBitDepth,User::dblToBitDepth,User::intWellIdForTrippingSpeed,User::intWellTrippingSpeedId,User::objFromDateTimeForTrippingSpeed,User::objToDateTimeForTrippingSpeed,User::strAccessKey,User::strActivityDescriptionForTrippingSpeed,User::strApiKey,User::strConvertedTimeZone,User::strDrillerNamesForTrippingSpeed,User::strRemarkForTrippingSpeed,User::strServerName,User::strSinglesOrStandsForTrippingSpeed,User::strTimeZone,System::UserName">
                  <ProjectItem
                    Name="Properties\AssemblyInfo.cs"
                    Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_55f71c9cca9240129d14c3b450178613")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_55f71c9cca9240129d14c3b450178613")]
[assembly: AssemblyCopyright("Copyright @  2018")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Resources.resx"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
                  <ProjectItem
                    Name="ScriptMain.cs"
                    Encoding="UTF8"><![CDATA[using System.Collections.Generic;
using System.Net;
using System.IO;
using System.Text;
using System.Web;
using System.Web.Helpers;
using System.Linq;
using Microsoft.SqlServer.Dts.Tasks.ScriptTask;
using System.Text.RegularExpressions;

#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion

namespace ST_55f71c9cca9240129d14c3b450178613
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            StringBuilder logMessage = new StringBuilder();
            bool fireAgain = false;
            int trippingSpeedId = (int)Dts.Variables["User::intWellTrippingSpeedId"].Value;
            logMessage.AppendFormat("Processing tripping speed with id {0}.", trippingSpeedId);
            int wellId = (int)Dts.Variables["User::intWellIdForTrippingSpeed"].Value;

            DateTime? startDateTime = GetDateTime("User::objFromDateTimeForTrippingSpeed", "User::strConvertedTimeZone");
            DateTime? endDateTime = GetDateTime("User::objToDateTimeForTrippingSpeed", "User::strConvertedTimeZone");

            double activeTime = (double)Dts.Variables["User::dblActiveTime"].Value;
            double fromDepth = (double)Dts.Variables["User::dblFromBitDepth"].Value;
            double toDepth = (double)Dts.Variables["User::dblToBitDepth"].Value;
            string activityDescription = (String)Dts.Variables["User::strActivityDescriptionForTrippingSpeed"].Value;
            string drillerNames = Dts.Variables["User::strDrillerNamesForTrippingSpeed"].Value.ToString();
            string singleOrStands = (String)Dts.Variables["User::strSinglesOrStandsForTrippingSpeed"].Value;
            double activeDeltaBlockHeight = (double)Dts.Variables["User::dblActiveDeltaBlockHeight"].Value;
            double activeDeltaBitDepth = (double)Dts.Variables["User::dblActiveDeltaBitDepth"].Value;
            double activeDistanceTravelled = (double)Dts.Variables["User::dblActiveDistanceTravelled"].Value;
            string remark = Dts.Variables["User::strRemarkForTrippingSpeed"].Value.ToString();
            bool bitInCasingInd = (bool)Dts.Variables["User::boolIsBitInCasing"].Value;
            bool crewHandlingBHAInd = (bool)Dts.Variables["User::boolIsCrewHandlingBHA"].Value;
            bool activeInd = (bool)Dts.Variables["User::boolActiveIndForTrippingSpeed"].Value;
            string remarkType = Dts.Variables["User::strRemarkTypeForTrippingSpeed"].Value.ToString();
            string strBlockHeightUom = Dts.Variables["User::strBlockHeightUom"].Value.ToString();
            string strBitDepthUom = Dts.Variables["User::strBitDepthUom"].Value.ToString();

            string serverName = (String)Dts.Variables["User::strServerName"].Value;
            string apiKey = (String)Dts.Variables["User::strApiKey"].Value;
            string accessKey = (String)Dts.Variables["User::strAccessKey"].Value;
            string currentUserId = (String)Dts.Variables["System::UserName"].Value;

            if (currentUserId != null)
            {
                currentUserId = currentUserId.Split('\\').Last();
            }

            ServicePointManager.ServerCertificateValidationCallback = delegate { return true; };
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls | SecurityProtocolType.Ssl3;

            try
            {
                string url = string.Format("https://{0}/api/trippingSpeed/{1}?apikey={2}&accesskey={3}", serverName, trippingSpeedId, apiKey, accessKey);
                url = url.Replace(" ", "%20");
                url = url.Replace("$", "%24");

                DateTime now = DateTime.Now;
                TrippingSpeed existingTrippingSpeed = GetExistingTrippingSpeed(trippingSpeedId, serverName, apiKey, accessKey);

                if (strBlockHeightUom == "feet")
                {
                    activeDeltaBlockHeight *= 0.3048;
                }
                if (strBitDepthUom == "feet")
                {
                    activeDeltaBitDepth *= 0.3048;
                    fromDepth *= 0.3048;
                    toDepth *= 0.3048;
                    activeDistanceTravelled *= 0.3048;
                }

                if (existingTrippingSpeed == null)
                {
                    logMessage.Append(" Not found - will insert."); 
                    existingTrippingSpeed = new TrippingSpeed();
                    existingTrippingSpeed.trippingSpeedId = trippingSpeedId;
                }
                else
                {
                    logMessage.Append(" Entity found - will check if update is required.");
                }

                if (existingTrippingSpeed.Apply(wellId, startDateTime, endDateTime, activeTime, fromDepth, toDepth, activityDescription, drillerNames, singleOrStands, activeDeltaBlockHeight, activeDeltaBitDepth, activeDistanceTravelled, remark, bitInCasingInd, crewHandlingBHAInd, remarkType, activeInd, currentUserId, logMessage))
                {
                    int retries = 2;
                    while (retries > 0)
                    {
                        try
                        {
                            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                            logMessage.Append(" Attempting write to DataGumbo API.");
                            string gumboPayload = Json.Encode(existingTrippingSpeed);

                            request.Method = "PUT";
                            request.ContentType = "application/json";
                            
                            gumboPayload = EncodeNonAsciiCharacters(gumboPayload);

                            request.ContentLength = gumboPayload.Length;
                            StreamWriter requestWriter = new StreamWriter(request.GetRequestStream(), System.Text.Encoding.ASCII);
                            requestWriter.Write(gumboPayload);
                            requestWriter.Close();

                            WebResponse webResponse = request.GetResponse();
                            Stream webStream = webResponse.GetResponseStream();
                            StreamReader responseReader = new StreamReader(webStream);
                            string response = responseReader.ReadToEnd();
                            responseReader.Close();
                            retries = 0; // indicate success
                        }
                        catch (Exception e)
                        {
                            retries--;
                            if (retries > 0)
                            {
                                logMessage.Append(string.Format(" HTTP put failed with exception {0}. Will retry.", e.Message));
                            }
                            else
                            {
                                throw e;
                            }
                        }
                    }
                }
                else
                {
                    logMessage.Append(" No update required.");
                }

                Dts.TaskResult = (int)ScriptResults.Success;
                logMessage.Append("  Returning Success.");
                Dts.Events.FireInformation(0, "Gumbo SSIS", logMessage.ToString(), string.Empty, 0, ref fireAgain);

            }
            catch (Exception e)
            {
                logMessage.AppendFormat("  Encountered error: {0}.", e.Message);
                Dts.Events.FireError(0, "Gumbo SSIS", logMessage.ToString(), string.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        private TrippingSpeed GetExistingTrippingSpeed(int trippingSpeedId, string serverName, string apiKey, string accessKey)
        {
            try
            {
                string url = string.Format("https://{0}/api/trippingSpeed/{1}?apikey={2}&accesskey={3}", serverName, trippingSpeedId, apiKey, accessKey);
                url = url.Replace(" ", "%20");
                url = url.Replace("$", "%24");
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                WebResponse webResponse = request.GetResponse();
                Stream webStream = webResponse.GetResponseStream();
                StreamReader responseReader = new StreamReader(webStream);
                string response = responseReader.ReadToEnd();
                responseReader.Close();
                TrippingSpeed tourSheetFormation = Json.Decode<TrippingSpeed>(response);
                return tourSheetFormation;
            }
            catch (Exception e)
            {
                return null;
            }
        }

        private static bool DateCompare(DateTime? dtm1, DateTime? dtm2)
        {
            if (dtm1.HasValue)
            {
                if (dtm2.HasValue)
                {
                    DateTime d1 = dtm1.Value;
                    DateTime d2 = dtm2.Value;
                    return d1 == d2;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                return !dtm2.HasValue;
            }
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        #region data class
        class TrippingSpeed
        {
            public int trippingSpeedId { get; set; }
            public int wellId { get; set; }
            public DateTime? startDateTime { get; set; }
            public DateTime? endDateTime { get; set; }
            public double activeTime { get; set; }
            public double fromDepth { get; set; }
            public double toDepth { get; set; }
            public string activityDescription { get; set; }
            public string drillerNames { get; set; }
            public string singleOrStands { get; set; }
            public double activeDeltaBlockHeight { get; set; }
            public double activeDeltaBitDepth { get; set; }
            public double activeDistanceTravelled { get; set; }
            public string remark { get; set; }
            public bool bitInCasingInd { get; set; }
            public bool crewHandlingBHAInd { get; set; }
            public string remarkType { get; set;}
            public bool activeInd { get; set; }
            public string rowCreatedBy { get; set; }
            public string rowChangedBy { get; set; }
            public DateTime? rowCreatedDate { get; set; }
            public DateTime? rowChangedDate { get; set; }

            public bool Apply(int _wellId, DateTime? _startDateTime, DateTime? _endDateTime, double _activeTime, double _fromDepth, double _toDepth,
                string _activityDescription, string _drillerNames, string _singleOrStands, double _activeDeltaBlockHeight, double _activeDeltaBitDepth,
                double _activeDistanceTravelled, string _remark, bool _bitInCasingInd, bool _crewHandlingBHAInd, string _remarkType, bool _activeInd, 
                string currentUserId, StringBuilder logMessage)
            {
                bool ret = false;
                if (rowCreatedBy == null)
                {
                    rowCreatedBy = currentUserId;
                    ret = true;
                }
                if (rowCreatedDate == null)
                {
                    rowCreatedDate = DateTime.Now;
                    ret = true;
                }
                if (wellId != _wellId)
                {
                    logMessage.Append(" wellId has changed");
                    wellId = _wellId;
                    ret = true;
                }
                if (!DateCompare(startDateTime, _startDateTime))
                {
                    logMessage.Append(" startDateTime has changed");
                    startDateTime = _startDateTime.HasValue ? _startDateTime.Value.ToUniversalTime() : (DateTime?)null;
                    ret = true;
                }
                if (!DateCompare(endDateTime, _endDateTime))
                {
                    logMessage.Append(" endDateTime has changed");
                    endDateTime = _endDateTime.HasValue ? _endDateTime.Value.ToUniversalTime() : (DateTime?)null;
                    ret = true;
                }
                if (activeTime != _activeTime)
                {
                    logMessage.Append(" activeTime has changed");
                    activeTime = _activeTime;
                    ret = true;
                }
                if (fromDepth != _fromDepth)
                {
                    logMessage.Append(" fromDepth has changed");
                    fromDepth = _fromDepth;
                    ret = true;
                }
                if (toDepth != _toDepth)
                {
                    logMessage.Append(" toDepth has changed");
                    toDepth = _toDepth;
                    ret = true;
                }
                if (activityDescription != _activityDescription)
                {
                    logMessage.Append(" activityDescription has changed");
                    activityDescription = _activityDescription;
                    ret = true;
                }
                if (drillerNames != _drillerNames)
                {
                    logMessage.Append(" drillerNames has changed");
                    drillerNames = _drillerNames;
                    ret = true;
                }
                if (singleOrStands != _singleOrStands)
                {
                    logMessage.Append(" singleOrStands has changed");
                    singleOrStands = _singleOrStands;
                    ret = true;
                }
                if (activeDeltaBlockHeight != _activeDeltaBlockHeight)
                {
                    logMessage.Append(" activeDeltaBlockHeight has changed");
                    activeDeltaBlockHeight = _activeDeltaBlockHeight;
                    ret = true;
                }
                if (activeDeltaBitDepth != _activeDeltaBitDepth)
                {
                    logMessage.Append(" activeDeltaBitDepth has changed");
                    activeDeltaBitDepth = _activeDeltaBitDepth;
                    ret = true;
                }
                if (activeDistanceTravelled != _activeDistanceTravelled)
                {
                    logMessage.Append(" activeDistanceTravelled has changed");
                    activeDistanceTravelled = _activeDistanceTravelled;
                    ret = true;
                }
                if (remark != _remark)
                {
                    logMessage.Append(" remark has changed");
                    remark = _remark;
                    ret = true;
                }

                if (bitInCasingInd != _bitInCasingInd)
                {
                    logMessage.Append(" bitInCasingInd has changed");
                    bitInCasingInd = _bitInCasingInd;
                    ret = true;
                }
                if (crewHandlingBHAInd != _crewHandlingBHAInd)
                {
                    logMessage.Append(" crewHandlingBHAInd has changed");
                    crewHandlingBHAInd = _crewHandlingBHAInd;
                    ret = true;
                }
                if (activeInd != _activeInd)
                {
                    logMessage.Append(" activeInd has changed");
                    activeInd = _activeInd;
                    ret = true;
                }
                if (remarkType != _remarkType)
                {
                    logMessage.Append(string.Format(" remarkType has changed from '{0}' to '{1}'", remarkType, _remarkType));
                    remarkType = _remarkType;
                    ret = true;
                }
                if (ret)
                {
                    startDateTime = _startDateTime.HasValue ? _startDateTime.Value.ToUniversalTime() : (DateTime?)null;
                    endDateTime = _endDateTime.HasValue ? _endDateTime.Value.ToUniversalTime() : (DateTime?)null;
                    rowChangedBy = currentUserId;
                    rowChangedDate = DateTime.Now;
                }
                return ret;
            }
        }
        #endregion

        #region DateTimeConversion
        public DateTime? GetDateTime(string dateTimeVariableName, string timezoneVariableName)
        {
            Object dtmOValue = Dts.Variables[dateTimeVariableName].Value;
            if (dtmOValue == null)
            {
                return null;
            }
            String dtmSValue = dtmOValue.ToString();

            if (string.IsNullOrEmpty(dtmSValue))
            {
                return null;
            }

            DateTime convertedValue = Convert.ToDateTime(dtmSValue);

            if (convertedValue.Kind == DateTimeKind.Unspecified)
            {
                TimeZoneInfo tzInfo = TimeZoneInfo.FindSystemTimeZoneById((String)Dts.Variables[timezoneVariableName].Value);
                TimeSpan offset = tzInfo.GetUtcOffset(convertedValue);
                DateTime afterAdjustment = convertedValue.Subtract(offset);
                return new DateTime(afterAdjustment.Year, afterAdjustment.Month, afterAdjustment.Day, afterAdjustment.Hour, afterAdjustment.Minute, afterAdjustment.Second, DateTimeKind.Utc);
            } 
            else 
            {
                return convertedValue;
            }
        }

        #endregion
        public static string EncodeNonAsciiCharacters(string value)
        {
            return Regex.Replace(value, @"[^\x00-\x7F]", c => string.Format(@"\u{0:x4}", (int)c.Value[0]));
        }
    }
}]]></ProjectItem>
                  <ProjectItem
                    Name="ST_920433629e24497b8794725ec493be1e.csproj"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{95687E5A-9FB2-4B08-99D2-051AE95AE968}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_55f71c9cca9240129d14c3b450178613</RootNamespace>
    <AssemblyName>ST_920433629e24497b8794725ec493be1e</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Web.Helpers, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
      <DesignTime>True</DesignTime>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\10.0\InstallDir#\devenv.exe" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
                  <ProjectItem
                    Name="Project"
                    Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_55f71c9cca9240129d14c3b450178613</msb:CodeName>
		<msb:DisplayName>ST_55f71c9cca9240129d14c3b450178613</msb:DisplayName>
		<msb:ProjectId>{EAB07A68-33D6-4D75-8D3C-9B2312BEE368}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_920433629e24497b8794725ec493be1e.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_55f71c9cca9240129d14c3b450178613.Properties.Settings.get_Default():ST_55f71c9cca9240129d14c3b450178613.Properties.Sett" +
    "ings")]

namespace ST_55f71c9cca9240129d14c3b450178613.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.settings"
                    Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Resources.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_55f71c9cca9240129d14c3b450178613.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_55f71c9cca9240129d14c3b450178613.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_55f71c9cca9240129d14c3b450178613.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_55f71c9cca9240129d14c3b450178613.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_55f71c9cca9240129d14c3b450178613.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
                  <BinaryItem
                    Name="ST_920433629e24497b8794725ec493be1e.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAIskLl0AAAAAAAAAAOAAAiELAQsAAEQAAAAIAAAAAAAATmIA
AAAgAAAAgAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAADAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAPRhAABXAAAAAIAAAAgEAAAAAAAAAAAAAAAAAAAA
AAAAAKAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAVEIAAAAgAAAARAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAAgEAAAAgAAAAAYAAABGAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAKAAAAACAAAATAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAAw
YgAAAAAAAEgAAAACAAUAwC4AADQzAAABAAAAAAAAAAguAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKA4AAAoqEzACAC0AAAABAAARfgEAAAQtIHIBAABw0AIA
AAIoDwAACm8QAAAKcxEAAAoKBoABAAAEfgEAAAQqGn4CAAAEKh4CgAIAAAQqGn4DAAAEKi5zBgAA
BoADAAAEKh4CKBQAAAoqChcqAAAbMBQAAAYAAAIAABFzFgAACgoWCwIoFwAACm8YAAAKcnMAAHBv
GQAACm8aAAAKpSUAAAEMBnKtAABwCIwlAAABbxsAAAomAigXAAAKbxgAAApy+wAAcG8ZAAAKbxoA
AAqlJQAAAQ0CcjsBAHByhwEAcCgLAAAGEwQCcr0BAHByhwEAcCgLAAAGEwUCKBcAAApvGAAACnIF
AgBwbxkAAApvGgAACqUmAAABEwYCKBcAAApvGAAACnItAgBwbxkAAApvGgAACqUmAAABEwcCKBcA
AApvGAAACnJZAgBwbxkAAApvGgAACqUmAAABEwgCKBcAAApvGAAACnKBAgBwbxkAAApvGgAACnQn
AAABEwkCKBcAAApvGAAACnLbAgBwbxkAAApvGgAACm8cAAAKEwoCKBcAAApvGAAACnInAwBwbxkA
AApvGgAACnQnAAABEwsCKBcAAApvGAAACnJ5AwBwbxkAAApvGgAACqUmAAABEwwCKBcAAApvGAAA
CnK5AwBwbxkAAApvGgAACqUmAAABEw0CKBcAAApvGAAACnLzAwBwbxkAAApvGgAACqUmAAABEw4C
KBcAAApvGAAACnI1BABwbxkAAApvGgAACm8cAAAKEw8CKBcAAApvGAAACnJ1BABwbxkAAApvGgAA
CqUoAAABExACKBcAAApvGAAACnKlBABwbxkAAApvGgAACqUoAAABExECKBcAAApvGAAACnLdBABw
bxkAAApvGgAACqUoAAABExICKBcAAApvGAAACnIlBQBwbxkAAApvGgAACm8cAAAKExMCKBcAAApv
GAAACnJtBQBwbxkAAApvGgAACm8cAAAKExQCKBcAAApvGAAACnKdBQBwbxkAAApvGgAACm8cAAAK
ExUCKBcAAApvGAAACnLHBQBwbxkAAApvGgAACnQnAAABExYCKBcAAApvGAAACnLvBQBwbxkAAApv
GgAACnQnAAABExcCKBcAAApvGAAACnIPBgBwbxkAAApvGgAACnQnAAABExgCKBcAAApvGAAACnI1
BgBwbxkAAApvGgAACnQnAAABExkRGSweERkXjSkAAAETJRElFh9cnRElbx0AAAooAQAAKxMZfgQA
AAQtERT+Bg4AAAZzHwAACoAEAAAEfgQAAAQoIAAACiDwDAAAKCEAAApyVwYAcBqNAQAAARMmESYW
ERaiESYXCIwlAAABohEmGBEXohEmGREYohEmKCIAAAoTGhEacs0GAHBy0QYAcG8jAAAKExoRGnLZ
BgBwct0GAHBvIwAAChMaKCQAAAomAggRFhEXERgoCQAABhMbERRy5QYAcCglAAAKLA4RDCP9h/Tb
14HTP1oTDBEVcuUGAHAoJQAACiw4EQ0j/Yf029eB0z9aEw0RByP9h/Tb14HTP1oTBxEII/2H9NvX
gdM/WhMIEQ4j/Yf029eB0z9aEw4RGy0dBnLvBgBwbyYAAAomcz0AAAYTGxEbCG8RAAAGKwwGciMH
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
KFYAAAosFw4TcrMKAHBvJgAACiYCDgkoIwAABhcKAigkAAAGDgouFw4TcusKAHBvJgAACiYCDgoo
JQAABhcKAigmAAAGDgsuFw4TcjMLAHBvJgAACiYCDgsoJwAABhcKAigoAAAGDgwuFw4TcnULAHBv
JgAACiYCDgwoKQAABhcKAigqAAAGDg0oVgAACiwXDhNyvwsAcG8mAAAKJgIODSgrAAAGFwoCKCwA
AAYODi4XDhNy5wsAcG8mAAAKJgIODigtAAAGFwoCKC4AAAYODy4XDhNyHwwAcG8mAAAKJgIODygv
AAAGFwoCKDIAAAYOES4XDhNyXwwAcG8mAAAKJgIOESgzAAAGFwoCKDAAAAYOEChWAAAKLCQOE3KN
DABwAigwAAAGDhAoVwAACm8mAAAKJgIOECgxAAAGFwoGLHgCDwIoPwAACi0MEgb+FQEAABsRBisV
DwIoQAAAChMHEgcoVQAACnNPAAAKKBUAAAYCDwMoPwAACi0MEgj+FQEAABsRCCsVDwMoQAAAChMJ
EgkoVQAACnNPAAAKKBcAAAYCDhIoNwAABgIoJAAACnNPAAAKKDsAAAYGKh4CKA4AAAoqAAAAAAAA
tAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2Nvcmxp
YiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1
YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAA
AABQQURQQURQtAAAAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAADQOAAAjfgAA
oA4AALQTAAAjU3RyaW5ncwAAAABUIgAA6AwAACNVUwA8LwAAEAAAACNHVUlEAAAATC8AAOgDAAAj
QmxvYgAAAAAAAAACAAABVx2iCQkLAAAA+iUzABYAAAEAAABBAAAABgAAAB4AAAA9AAAAOAAAAFcA
AAACAAAAVQAAAAYAAAADAAAAGQAAADAAAAABAAAAAQAAAAYAAAABAAAAAgAAAAIAAAAAAAoAAQAA
AAAABgDPAMgACgDrANYADgBLASIBBgBnAcgABgB9AWwBBgCuAZkBBgBGAsgABgBRAsgABgDNBcEF
BgBOCzQLBgB5C2cLBgCQC2cLBgCtC2cLBgDMC2cLBgDlC2cLBgD+C2cLBgAZDGcLBgA0DGcLBgBN
DGcLBgCGDGYMBgCmDGYMBgD7DOgMBgAYDcgABgAdDcgABgBBDWcLCgBtDVcNCgCGDVcNBgCbDWYM
DgC9DSIBBgANDt8NCgAdDt8NCgA7DicOCgByDicODgC9DiIBEgAWD/YOEgAuD/YOBgBKD8gABgBd
D8gABgBkD8gABgB0D8gABgB8D8gAFgCfD5MPBgDFD6oPCgDjD9gPCgAfENgPCgBzENgPCgCFENgP
GgCnEJQQBgD1EOsQBgANEcEFBgAgEesQBgAtEesQCgBEEdgPBgBuEesQBgB7EesQBgCQEcgADgC1
ESIBBgAWEsgABgApEsgABgA/EsgABgBjEsgACgDbErwSCgACE7wSCgA4E7wSCgBKE7wSAAAAAAEA
AAAAAAEAAQAAABAAMgA8AAUAAQABAAABEABrADwACQADAAUAAQAQAHQAfwANAAQACAADAQAAowAA
ABEABgAQAAMAEACxAAAABQAJABAAEQCNARMAEQC6ARcAEQAEAjkAEQCWDjsBEQARE+YCBgaLAnAA
VoCTAnMAVoCbAnMAAQDhBXAAAQACBnAAAQAaBtoAAQA5BtoAAQBWBuIAAQByBuIAAQCNBuIAAQCm
BuUAAQDLBuUAAQDpBuUAAQAJB+IAAQAxB+IAAQBWB+IAAQB/B+UAAQCXB+gAAQC3B+gAAQDbB+UA
AQD3B+gAAQASCOUAAQAwCOUAAQBOCNoAAQBuCNoAUCAAAAAAgxjKARsAAQBYIAAAAACTCNABHwAB
AJEgAAAAAJMI5AEkAAEAmCAAAAAAkwjwASkAAQCgIAAAAACWCBQCPQACALMgAAAAAIYYygEbAAIA
pyAAAAAAkRi2DSsBAgDAIAAAAACGACgCGwACAAAnAAAAAIEALQJHAAIAuCcAAAAAkQBaAlAABgD8
JwAAAACGAGYCYAAIAOYoAAAAAJYAcgJrAAoAECkAAAAAhhjKARsACwC7IAAAAACRAEsOLwELAMko
AAAAAJEA4RLfAg8AGCkAAAAAhgijAoEAEAAgKQAAAACGCLcChQAQACkpAAAAAIYIywKBABEAMSkA
AAAAhgjWAoUAEQA6KQAAAACGCOECigASAEIpAAAAAIYI8wKTABIASykAAAAAhggFA4oAEwBTKQAA
AACGCBUDkwATAFwpAAAAAIYIJQOdABQAZCkAAAAAhgg0A6EAFABtKQAAAACGCEMDnQAVAHUpAAAA
AIYIUQOhABUAfikAAAAAhghfA50AFgCGKQAAAACGCGsDoQAWAI8pAAAAAIYIdwOmABcAlykAAAAA
hgiPA6oAFwCgKQAAAACGCKcDpgAYAKgpAAAAAIYIuAOqABgAsSkAAAAAhgjJA6YAGQC5KQAAAACG
CNwDqgAZAMIpAAAAAIYI7wOdABoAyikAAAAAhggKBKEAGgDTKQAAAACGCCUEnQAbANspAAAAAIYI
PQShABsA5CkAAAAAhghVBJ0AHADsKQAAAACGCHEEoQAcAPUpAAAAAIYIjQSmAB0A/SkAAAAAhgiY
BKoAHQAGKgAAAACGCKMErwAeAA4qAAAAAIYItgSzAB4AFyoAAAAAhgjJBK8AHwAfKgAAAACGCOAE
swAfACgqAAAAAIYI9wSmACAAMCoAAAAAhggGBaoAIAA5KgAAAACGCBUFrwAhAEEqAAAAAIYIIwWz
ACEASioAAAAAhggxBaYAIgBSKgAAAACGCEIFqgAiAFsqAAAAAIYIUwWmACMAYyoAAAAAhghkBaoA
IwBsKgAAAACGCHUFigAkAHQqAAAAAIYIiAWTACQAfSoAAAAAhgibBYoAJQCFKgAAAACGCK4FkwAl
AJAqAAAAAIYA2wW4ACYA+i0AAAAAhhjKARsAOQAAAAEAxQkAAAEAjggAAAIAywkAAAMA1gkAAAQA
3QkAAAEA5wkAAAIA7AkAAAEA8QkAAAIABgoAAAEAxQkAAAEAVg4AAAIAXQ4AAAMAZA4AAAQAaw4A
AAEAABMAAAEAxQkAAAEAxQkAAAEAxQkAAAEAxQkAAAEAxQkAAAEAxQkAAAEAxQkAAAEAxQkAAAEA
xQkAAAEAxQkAAAEAxQkAAAEAxQkAAAEAxQkAAAEAxQkAAAEAxQkAAAEAxQkAAAEAxQkAAAEAxQkA
AAEAxQkAAAEAxQkAAAEAxQkAAAEAxQkAAAEAGwoAAAIAIwoAAAMAMgoAAAQAPwoAAAUASwoAAAYA
VgoAAAcAXwoAAAgAdAoAAAkAggoAAAoAkgoAAAsAqgoAAAwAvwoAAA0A2AoAAA4A4AoAAA8A8AoA
ABAABAsAABEAEAsAABIAGwsAABMAKQtRAMoBqgBZAMoBqgBhAMoBqgBpAMoBqgBxAMoBqgB5AMoB
qgCBAMoBqgCJAMoBqgCRAMoBqgCZAMoBqgChAMoBhQCpAMoBGwCxAMoBGwAJAMoBGwC5AC8NBAG5
AEoNCwEpAMoBEAHRAMoBHAHhAMoBGwARAMoBGwDpAMoBGwBJAMoBGwAZAM8OQAERASAPRgEZATcP
TAEhAUAPUwFJAFAPVwEJAGsPpgA5AYEPXgFRAdMPZQEJAcoBdgFhAfcPfAFhATQQgwE5AUkQigE5
AVAQkQFBAFgQlwE5AWAQnAFJAGwQogFxAX4QqAGBAawQuAFxAbMQqgBxAb4QqgA5Ac4QgQBxAdkQ
vQFxAfwQwgGRARYRyAGZAcoBzgGhATgRqgChAT4RGwBxAVAR2AGpAVwRwgGxAcoB3gG5AYYRpgC5
AT4RGwDBAZoRpgA5AUkQ5QERAaYRhQARAckR6wE5AdQR5QDJAdoR8QHJAeoR/AGBAfQRSwIMAPsR
rwAMAEAPdQJBAGAQegI5AQgSiQLRAR4SjgJBADYSlALhAUwSmgLhAWwSoQJBAHkSqQJBAIISgQBB
AIsSgQBBAJUSgQBBAJ0SgQBBAKYSgQBBALESgQBBAMoBsQIMAMoBvgIBAkAPpgA5AUAT6wL5AcoB
dgEJAlAQ8AIZAMoBGwBBAFAT+QI5AWATnAE5AUkQ/gIIABwAdwAIACAAfAApAJMAIgEuADMAeQMu
AEMAogMuACMAogMuADsAqAMuAFsAvwMuAGMAyAMuACsAogMuAAsALwMuABMAeQMuABsAogNDAGsA
fABJAJMAIgFhAJsAfACBAJsAfACDAKsAfAChAJsAfAAhAZsAfABBAZsAfABhAZsAfACBAZsAfACh
AZsAfADAAZsAfADBAZsAfADgAZsAfADhAZsAfAAAApsAfAABApsAfAAgApsAfAAhApsAfABAApsA
fABBApsAfABgApsAfABhApsAfACAApsAfACBApsAfACgApsAfAChApsAfADAApsAfADBApsAfADg
ApsAfADhApsAfAAAA5sAfAABA5sAfAAgA5sAfAAhA5sAfABAA5sAfABBA5sAfABgA5sAfABhA5sA
fACAA5sAfACBA5sAfACgA5sAfAChA5sAfADAA5sAfADBA5sAfADgA5sAfAAABJsAfAAgBJsAfABA
BJsAfABgBJsAfACABJsAfACgBJsAfADABJsAfADgBJsAfAAABZsAfAAgBZsAfABABZsAfABgBZsA
fACABZsAfACgBZsAfADABZsAfADgBZsAfAAABpsAfAAgBpsAfABABpsAfABgBpsAfACABpsAfACg
BpsAfADABpsAfADgBpsAfAAAB5sAfAAgB5sAfABAB5sAfABgB5sAfAAXAQUCVwKCAsQCBQMCAAEA
AwADAAYABAAAAH0BLwAAAPwBNAAAACACQgAAAI4I6wAAAJ4I6wAAAKUI7wAAALMI7wAAAL8I+AAA
AMoI+AAAANQI+AAAANwI/AAAAPAI/AAAAP0I/AAAAAwJ+AAAACMJ+AAAADcJ+AAAAE8J/AAAAFYJ
AAEAAGUJAAEAAHgJ/AAAAIMJAAEAAI0J/AAAAJoJ/AAAAKcJ7wAAALYJ7wACAAIAAwACAAMABQAB
AAQABQACAAUABwACABAACQABABEACQABABMACwACABIACwACABQADQABABUADQACABYADwABABcA
DwABABkAEQACABgAEQACABoAEwABABsAEwACABwAFQABAB0AFQABAB8AFwACAB4AFwACACAAGQAB
ACEAGQABACMAGwACACIAGwABACUAHQACACQAHQACACYAHwABACcAHwACACgAIQABACkAIQABACsA
IwACACoAIwACACwAJQABAC0AJQABAC8AJwACAC4AJwABADEAKQACADAAKQACADIAKwABADMAKwAB
ADUALQACADQALQACADYALwABADcALwACADgAMQABADkAMQACADoAMwABADsAMwBuAgSAAAABAAAA
4BtNVwAAAAAAAMQMAAAEAAAAAAAAAAAAAAABAL8AAAAAAAQAAAAAAAAAAAAAAAEAyAAAAAAACwAA
AAAAAAAAAAAACgADAQAAAAALAAAAAAAAAAAAAAAKANcOAAAAAAQAAAAAAAAAAAAAAAEAhw8AAAAA
AQAAAAAAAAAAAAAArwGUEAAAAAAAAAAAAQAAAG4TAAAFAAQABgAEAD0AcgF9AFICAAAAAAA8TW9k
dWxlPgBTVF85MjA0MzM2MjllMjQ0OTdiODc5NDcyNWVjNDkzYmUxZS5kbGwAUmVzb3VyY2VzAFNU
XzU1ZjcxYzljY2E5MjQwMTI5ZDE0YzNiNDUwMTc4NjEzLlByb3BlcnRpZXMAU2V0dGluZ3MAU2Ny
aXB0TWFpbgBTVF81NWY3MWM5Y2NhOTI0MDEyOWQxNGMzYjQ1MDE3ODYxMwBTY3JpcHRSZXN1bHRz
AFRyaXBwaW5nU3BlZWQAbXNjb3JsaWIAU3lzdGVtAE9iamVjdABTeXN0ZW0uQ29uZmlndXJhdGlv
bgBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sA
TWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBWU1RBUlRTY3JpcHRPYmpl
Y3RNb2RlbEJhc2UARW51bQBTeXN0ZW0uUmVzb3VyY2VzAFJlc291cmNlTWFuYWdlcgByZXNvdXJj
ZU1hbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBDdWx0dXJlSW5mbwByZXNvdXJjZUN1bHR1cmUALmN0
b3IAZ2V0X1Jlc291cmNlTWFuYWdlcgBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQBDdWx0dXJlAGRl
ZmF1bHRJbnN0YW5jZQBnZXRfRGVmYXVsdABEZWZhdWx0AE1haW4AR2V0RXhpc3RpbmdUcmlwcGlu
Z1NwZWVkAE51bGxhYmxlYDEARGF0ZVRpbWUARGF0ZUNvbXBhcmUAR2V0RGF0ZVRpbWUARW5jb2Rl
Tm9uQXNjaWlDaGFyYWN0ZXJzAHZhbHVlX18AU3VjY2VzcwBGYWlsdXJlAGdldF90cmlwcGluZ1Nw
ZWVkSWQAc2V0X3RyaXBwaW5nU3BlZWRJZABnZXRfd2VsbElkAHNldF93ZWxsSWQAZ2V0X3N0YXJ0
RGF0ZVRpbWUAc2V0X3N0YXJ0RGF0ZVRpbWUAZ2V0X2VuZERhdGVUaW1lAHNldF9lbmREYXRlVGlt
ZQBnZXRfYWN0aXZlVGltZQBzZXRfYWN0aXZlVGltZQBnZXRfZnJvbURlcHRoAHNldF9mcm9tRGVw
dGgAZ2V0X3RvRGVwdGgAc2V0X3RvRGVwdGgAZ2V0X2FjdGl2aXR5RGVzY3JpcHRpb24Ac2V0X2Fj
dGl2aXR5RGVzY3JpcHRpb24AZ2V0X2RyaWxsZXJOYW1lcwBzZXRfZHJpbGxlck5hbWVzAGdldF9z
aW5nbGVPclN0YW5kcwBzZXRfc2luZ2xlT3JTdGFuZHMAZ2V0X2FjdGl2ZURlbHRhQmxvY2tIZWln
aHQAc2V0X2FjdGl2ZURlbHRhQmxvY2tIZWlnaHQAZ2V0X2FjdGl2ZURlbHRhQml0RGVwdGgAc2V0
X2FjdGl2ZURlbHRhQml0RGVwdGgAZ2V0X2FjdGl2ZURpc3RhbmNlVHJhdmVsbGVkAHNldF9hY3Rp
dmVEaXN0YW5jZVRyYXZlbGxlZABnZXRfcmVtYXJrAHNldF9yZW1hcmsAZ2V0X2JpdEluQ2FzaW5n
SW5kAHNldF9iaXRJbkNhc2luZ0luZABnZXRfY3Jld0hhbmRsaW5nQkhBSW5kAHNldF9jcmV3SGFu
ZGxpbmdCSEFJbmQAZ2V0X3JlbWFya1R5cGUAc2V0X3JlbWFya1R5cGUAZ2V0X2FjdGl2ZUluZABz
ZXRfYWN0aXZlSW5kAGdldF9yb3dDcmVhdGVkQnkAc2V0X3Jvd0NyZWF0ZWRCeQBnZXRfcm93Q2hh
bmdlZEJ5AHNldF9yb3dDaGFuZ2VkQnkAZ2V0X3Jvd0NyZWF0ZWREYXRlAHNldF9yb3dDcmVhdGVk
RGF0ZQBnZXRfcm93Q2hhbmdlZERhdGUAc2V0X3Jvd0NoYW5nZWREYXRlAFN5c3RlbS5UZXh0AFN0
cmluZ0J1aWxkZXIAQXBwbHkAPHRyaXBwaW5nU3BlZWRJZD5rX19CYWNraW5nRmllbGQAPHdlbGxJ
ZD5rX19CYWNraW5nRmllbGQAPHN0YXJ0RGF0ZVRpbWU+a19fQmFja2luZ0ZpZWxkADxlbmREYXRl
VGltZT5rX19CYWNraW5nRmllbGQAPGFjdGl2ZVRpbWU+a19fQmFja2luZ0ZpZWxkADxmcm9tRGVw
dGg+a19fQmFja2luZ0ZpZWxkADx0b0RlcHRoPmtfX0JhY2tpbmdGaWVsZAA8YWN0aXZpdHlEZXNj
cmlwdGlvbj5rX19CYWNraW5nRmllbGQAPGRyaWxsZXJOYW1lcz5rX19CYWNraW5nRmllbGQAPHNp
bmdsZU9yU3RhbmRzPmtfX0JhY2tpbmdGaWVsZAA8YWN0aXZlRGVsdGFCbG9ja0hlaWdodD5rX19C
YWNraW5nRmllbGQAPGFjdGl2ZURlbHRhQml0RGVwdGg+a19fQmFja2luZ0ZpZWxkADxhY3RpdmVE
aXN0YW5jZVRyYXZlbGxlZD5rX19CYWNraW5nRmllbGQAPHJlbWFyaz5rX19CYWNraW5nRmllbGQA
PGJpdEluQ2FzaW5nSW5kPmtfX0JhY2tpbmdGaWVsZAA8Y3Jld0hhbmRsaW5nQkhBSW5kPmtfX0Jh
Y2tpbmdGaWVsZAA8cmVtYXJrVHlwZT5rX19CYWNraW5nRmllbGQAPGFjdGl2ZUluZD5rX19CYWNr
aW5nRmllbGQAPHJvd0NyZWF0ZWRCeT5rX19CYWNraW5nRmllbGQAPHJvd0NoYW5nZWRCeT5rX19C
YWNraW5nRmllbGQAPHJvd0NyZWF0ZWREYXRlPmtfX0JhY2tpbmdGaWVsZAA8cm93Q2hhbmdlZERh
dGU+a19fQmFja2luZ0ZpZWxkAHRyaXBwaW5nU3BlZWRJZAB3ZWxsSWQAc3RhcnREYXRlVGltZQBl
bmREYXRlVGltZQBhY3RpdmVUaW1lAGZyb21EZXB0aAB0b0RlcHRoAGFjdGl2aXR5RGVzY3JpcHRp
b24AZHJpbGxlck5hbWVzAHNpbmdsZU9yU3RhbmRzAGFjdGl2ZURlbHRhQmxvY2tIZWlnaHQAYWN0
aXZlRGVsdGFCaXREZXB0aABhY3RpdmVEaXN0YW5jZVRyYXZlbGxlZAByZW1hcmsAYml0SW5DYXNp
bmdJbmQAY3Jld0hhbmRsaW5nQkhBSW5kAHJlbWFya1R5cGUAYWN0aXZlSW5kAHJvd0NyZWF0ZWRC
eQByb3dDaGFuZ2VkQnkAcm93Q3JlYXRlZERhdGUAcm93Q2hhbmdlZERhdGUAdmFsdWUAc2VydmVy
TmFtZQBhcGlLZXkAYWNjZXNzS2V5AGR0bTEAZHRtMgBkYXRlVGltZVZhcmlhYmxlTmFtZQB0aW1l
em9uZVZhcmlhYmxlTmFtZQBfd2VsbElkAF9zdGFydERhdGVUaW1lAF9lbmREYXRlVGltZQBfYWN0
aXZlVGltZQBfZnJvbURlcHRoAF90b0RlcHRoAF9hY3Rpdml0eURlc2NyaXB0aW9uAF9kcmlsbGVy
TmFtZXMAX3NpbmdsZU9yU3RhbmRzAF9hY3RpdmVEZWx0YUJsb2NrSGVpZ2h0AF9hY3RpdmVEZWx0
YUJpdERlcHRoAF9hY3RpdmVEaXN0YW5jZVRyYXZlbGxlZABfcmVtYXJrAF9iaXRJbkNhc2luZ0lu
ZABfY3Jld0hhbmRsaW5nQkhBSW5kAF9yZW1hcmtUeXBlAF9hY3RpdmVJbmQAY3VycmVudFVzZXJJ
ZABsb2dNZXNzYWdlAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAVGFyZ2V0RnJhbWV3b3JrQXR0
cmlidXRlAFN5c3RlbS5SZWZsZWN0aW9uAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlE
ZXNjcmlwdGlvbkF0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1i
bHlDb21wYW55QXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHly
aWdodEF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBBc3NlbWJseUN1bHR1cmVB
dHRyaWJ1dGUAQXNzZW1ibHlWZXJzaW9uQXR0cmlidXRlAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVy
U2VydmljZXMAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJp
bGl0eUF0dHJpYnV0ZQBTVF85MjA0MzM2MjllMjQ0OTdiODc5NDcyNWVjNDkzYmUxZQBTeXN0ZW0u
RGlhZ25vc3RpY3MARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBUeXBlAFJ1bnRpbWVUeXBl
SGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAEFzc2VtYmx5AGdldF9Bc3NlbWJseQBTeXN0ZW0uQ29t
cG9uZW50TW9kZWwARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZVN0YXRl
AENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAC5jY3RvcgBTU0lTU2NyaXB0VGFza0VudHJ5UG9p
bnRBdHRyaWJ1dGUAU3lzdGVtLlNlY3VyaXR5LkNyeXB0b2dyYXBoeS5YNTA5Q2VydGlmaWNhdGVz
AFg1MDlDZXJ0aWZpY2F0ZQBYNTA5Q2hhaW4AU3lzdGVtLk5ldC5TZWN1cml0eQBTc2xQb2xpY3lF
cnJvcnMAPE1haW4+Yl9fMABwYXJhbTAAcGFyYW0xAHBhcmFtMgBwYXJhbTMAUmVtb3RlQ2VydGlm
aWNhdGVWYWxpZGF0aW9uQ2FsbGJhY2sAQ1MkPD45X19DYWNoZWRBbm9ueW1vdXNNZXRob2REZWxl
Z2F0ZTEAU2NyaXB0T2JqZWN0TW9kZWwAZ2V0X0R0cwBNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFn
ZWREVFMATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBWYXJpYWJsZXMAZ2V0X1Zhcmlh
YmxlcwBWYXJpYWJsZQBnZXRfSXRlbQBnZXRfVmFsdWUASW50MzIAQXBwZW5kRm9ybWF0AERvdWJs
ZQBTdHJpbmcAVG9TdHJpbmcAQm9vbGVhbgBDaGFyAFNwbGl0AFN5c3RlbS5Db3JlAFN5c3RlbS5M
aW5xAEVudW1lcmFibGUAU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMASUVudW1lcmFibGVgMQBM
YXN0AFN5c3RlbS5OZXQAU2VydmljZVBvaW50TWFuYWdlcgBzZXRfU2VydmVyQ2VydGlmaWNhdGVW
YWxpZGF0aW9uQ2FsbGJhY2sAU2VjdXJpdHlQcm90b2NvbFR5cGUAc2V0X1NlY3VyaXR5UHJvdG9j
b2wARm9ybWF0AFJlcGxhY2UAZ2V0X05vdwBvcF9FcXVhbGl0eQBBcHBlbmQAV2ViUmVxdWVzdABD
cmVhdGUASHR0cFdlYlJlcXVlc3QAU3lzdGVtLldlYi5IZWxwZXJzAEpzb24ARW5jb2RlAHNldF9N
ZXRob2QAc2V0X0NvbnRlbnRUeXBlAGdldF9MZW5ndGgAc2V0X0NvbnRlbnRMZW5ndGgAU3lzdGVt
LklPAFN0cmVhbQBHZXRSZXF1ZXN0U3RyZWFtAEVuY29kaW5nAGdldF9BU0NJSQBTdHJlYW1Xcml0
ZXIAVGV4dFdyaXRlcgBXcml0ZQBDbG9zZQBXZWJSZXNwb25zZQBHZXRSZXNwb25zZQBHZXRSZXNw
b25zZVN0cmVhbQBTdHJlYW1SZWFkZXIAVGV4dFJlYWRlcgBSZWFkVG9FbmQARXhjZXB0aW9uAGdl
dF9NZXNzYWdlAHNldF9UYXNrUmVzdWx0AEV2ZW50c09iamVjdFdyYXBwZXIAZ2V0X0V2ZW50cwBF
bXB0eQBGaXJlSW5mb3JtYXRpb24ARmlyZUVycm9yAERlY29kZQBnZXRfSGFzVmFsdWUASXNOdWxs
T3JFbXB0eQBDb252ZXJ0AFRvRGF0ZVRpbWUARGF0ZVRpbWVLaW5kAGdldF9LaW5kAFRpbWVab25l
SW5mbwBGaW5kU3lzdGVtVGltZVpvbmVCeUlkAFRpbWVTcGFuAEdldFV0Y09mZnNldABTdWJ0cmFj
dABnZXRfWWVhcgBnZXRfTW9udGgAZ2V0X0RheQBnZXRfSG91cgBnZXRfTWludXRlAGdldF9TZWNv
bmQAU3lzdGVtLlRleHQuUmVndWxhckV4cHJlc3Npb25zAE1hdGNoADxFbmNvZGVOb25Bc2NpaUNo
YXJhY3RlcnM+Yl9fMgBjAE1hdGNoRXZhbHVhdG9yAENTJDw+OV9fQ2FjaGVkQW5vbnltb3VzTWV0
aG9kRGVsZWdhdGUzAENhcHR1cmUAZ2V0X0NoYXJzAFJlZ2V4AFRvVW5pdmVyc2FsVGltZQBvcF9J
bmVxdWFsaXR5AFNUXzU1ZjcxYzljY2E5MjQwMTI5ZDE0YzNiNDUwMTc4NjEzLlByb3BlcnRpZXMu
UmVzb3VyY2VzLnJlc291cmNlcwAAAAAAcVMAVABfADUANQBmADcAMQBjADkAYwBjAGEAOQAyADQA
MAAxADIAOQBkADEANABjADMAYgA0ADUAMAAxADcAOAA2ADEAMwAuAFAAcgBvAHAAZQByAHQAaQBl
AHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAOVUAcwBlAHIAOgA6AGkAbgB0AFcAZQBsAGwAVAByAGkA
cABwAGkAbgBnAFMAcABlAGUAZABJAGQAAE1QAHIAbwBjAGUAcwBzAGkAbgBnACAAdAByAGkAcABw
AGkAbgBnACAAcwBwAGUAZQBkACAAdwBpAHQAaAAgAGkAZAAgAHsAMAB9AC4AAD9VAHMAZQByADoA
OgBpAG4AdABXAGUAbABsAEkAZABGAG8AcgBUAHIAaQBwAHAAaQBuAGcAUwBwAGUAZQBkAABLVQBz
AGUAcgA6ADoAbwBiAGoARgByAG8AbQBEAGEAdABlAFQAaQBtAGUARgBvAHIAVAByAGkAcABwAGkA
bgBnAFMAcABlAGUAZAAANVUAcwBlAHIAOgA6AHMAdAByAEMAbwBuAHYAZQByAHQAZQBkAFQAaQBt
AGUAWgBvAG4AZQAAR1UAcwBlAHIAOgA6AG8AYgBqAFQAbwBEAGEAdABlAFQAaQBtAGUARgBvAHIA
VAByAGkAcABwAGkAbgBnAFMAcABlAGUAZAAAJ1UAcwBlAHIAOgA6AGQAYgBsAEEAYwB0AGkAdgBl
AFQAaQBtAGUAACtVAHMAZQByADoAOgBkAGIAbABGAHIAbwBtAEIAaQB0AEQAZQBwAHQAaAAAJ1UA
cwBlAHIAOgA6AGQAYgBsAFQAbwBCAGkAdABEAGUAcAB0AGgAAFlVAHMAZQByADoAOgBzAHQAcgBB
AGMAdABpAHYAaQB0AHkARABlAHMAYwByAGkAcAB0AGkAbwBuAEYAbwByAFQAcgBpAHAAcABpAG4A
ZwBTAHAAZQBlAGQAAEtVAHMAZQByADoAOgBzAHQAcgBEAHIAaQBsAGwAZQByAE4AYQBtAGUAcwBG
AG8AcgBUAHIAaQBwAHAAaQBuAGcAUwBwAGUAZQBkAABRVQBzAGUAcgA6ADoAcwB0AHIAUwBpAG4A
ZwBsAGUAcwBPAHIAUwB0AGEAbgBkAHMARgBvAHIAVAByAGkAcABwAGkAbgBnAFMAcABlAGUAZAAA
P1UAcwBlAHIAOgA6AGQAYgBsAEEAYwB0AGkAdgBlAEQAZQBsAHQAYQBCAGwAbwBjAGsASABlAGkA
ZwBoAHQAADlVAHMAZQByADoAOgBkAGIAbABBAGMAdABpAHYAZQBEAGUAbAB0AGEAQgBpAHQARABl
AHAAdABoAABBVQBzAGUAcgA6ADoAZABiAGwAQQBjAHQAaQB2AGUARABpAHMAdABhAG4AYwBlAFQA
cgBhAHYAZQBsAGwAZQBkAAA/VQBzAGUAcgA6ADoAcwB0AHIAUgBlAG0AYQByAGsARgBvAHIAVABy
AGkAcABwAGkAbgBnAFMAcABlAGUAZAAAL1UAcwBlAHIAOgA6AGIAbwBvAGwASQBzAEIAaQB0AEkA
bgBDAGEAcwBpAG4AZwAAN1UAcwBlAHIAOgA6AGIAbwBvAGwASQBzAEMAcgBlAHcASABhAG4AZABs
AGkAbgBnAEIASABBAABHVQBzAGUAcgA6ADoAYgBvAG8AbABBAGMAdABpAHYAZQBJAG4AZABGAG8A
cgBUAHIAaQBwAHAAaQBuAGcAUwBwAGUAZQBkAABHVQBzAGUAcgA6ADoAcwB0AHIAUgBlAG0AYQBy
AGsAVAB5AHAAZQBGAG8AcgBUAHIAaQBwAHAAaQBuAGcAUwBwAGUAZQBkAAAvVQBzAGUAcgA6ADoA
cwB0AHIAQgBsAG8AYwBrAEgAZQBpAGcAaAB0AFUAbwBtAAApVQBzAGUAcgA6ADoAcwB0AHIAQgBp
AHQARABlAHAAdABoAFUAbwBtAAAnVQBzAGUAcgA6ADoAcwB0AHIAUwBlAHIAdgBlAHIATgBhAG0A
ZQAAH1UAcwBlAHIAOgA6AHMAdAByAEEAcABpAEsAZQB5AAAlVQBzAGUAcgA6ADoAcwB0AHIAQQBj
AGMAZQBzAHMASwBlAHkAACFTAHkAcwB0AGUAbQA6ADoAVQBzAGUAcgBOAGEAbQBlAAB1aAB0AHQA
cABzADoALwAvAHsAMAB9AC8AYQBwAGkALwB0AHIAaQBwAHAAaQBuAGcAUwBwAGUAZQBkAC8AewAx
AH0APwBhAHAAaQBrAGUAeQA9AHsAMgB9ACYAYQBjAGMAZQBzAHMAawBlAHkAPQB7ADMAfQAAAyAA
AAclADIAMAAAAyQAAAclADIANAAACWYAZQBlAHQAADMgAE4AbwB0ACAAZgBvAHUAbgBkACAALQAg
AHcAaQBsAGwAIABpAG4AcwBlAHIAdAAuAAFjIABFAG4AdABpAHQAeQAgAGYAbwB1AG4AZAAgAC0A
IAB3AGkAbABsACAAYwBoAGUAYwBrACAAaQBmACAAdQBwAGQAYQB0AGUAIABpAHMAIAByAGUAcQB1
AGkAcgBlAGQALgABRyAAQQB0AHQAZQBtAHAAdABpAG4AZwAgAHcAcgBpAHQAZQAgAHQAbwAgAEQA
YQB0AGEARwB1AG0AYgBvACAAQQBQAEkALgAAB1AAVQBUAAAhYQBwAHAAbABpAGMAYQB0AGkAbwBu
AC8AagBzAG8AbgAAYSAASABUAFQAUAAgAHAAdQB0ACAAZgBhAGkAbABlAGQAIAB3AGkAdABoACAA
ZQB4AGMAZQBwAHQAaQBvAG4AIAB7ADAAfQAuACAAVwBpAGwAbAAgAHIAZQB0AHIAeQAuAAApIABO
AG8AIAB1AHAAZABhAHQAZQAgAHIAZQBxAHUAaQByAGUAZAAuAAApIAAgAFIAZQB0AHUAcgBuAGkA
bgBnACAAUwB1AGMAYwBlAHMAcwAuAAAVRwB1AG0AYgBvACAAUwBTAEkAUwAAMyAAIABFAG4AYwBv
AHUAbgB0AGUAcgBlAGQAIABlAHIAcgBvAHIAOgAgAHsAMAB9AC4AABFcAHUAewAwADoAeAA0AH0A
ABlbAF4AXAB4ADAAMAAtAFwAeAA3AEYAXQABJyAAdwBlAGwAbABJAGQAIABoAGEAcwAgAGMAaABh
AG4AZwBlAGQAADUgAHMAdABhAHIAdABEAGEAdABlAFQAaQBtAGUAIABoAGEAcwAgAGMAaABhAG4A
ZwBlAGQAADEgAGUAbgBkAEQAYQB0AGUAVABpAG0AZQAgAGgAYQBzACAAYwBoAGEAbgBnAGUAZAAA
LyAAYQBjAHQAaQB2AGUAVABpAG0AZQAgAGgAYQBzACAAYwBoAGEAbgBnAGUAZAAALSAAZgByAG8A
bQBEAGUAcAB0AGgAIABoAGEAcwAgAGMAaABhAG4AZwBlAGQAACkgAHQAbwBEAGUAcAB0AGgAIABo
AGEAcwAgAGMAaABhAG4AZwBlAGQAAEEgAGEAYwB0AGkAdgBpAHQAeQBEAGUAcwBjAHIAaQBwAHQA
aQBvAG4AIABoAGEAcwAgAGMAaABhAG4AZwBlAGQAADMgAGQAcgBpAGwAbABlAHIATgBhAG0AZQBz
ACAAaABhAHMAIABjAGgAYQBuAGcAZQBkAAA3IABzAGkAbgBnAGwAZQBPAHIAUwB0AGEAbgBkAHMA
IABoAGEAcwAgAGMAaABhAG4AZwBlAGQAAEcgAGEAYwB0AGkAdgBlAEQAZQBsAHQAYQBCAGwAbwBj
AGsASABlAGkAZwBoAHQAIABoAGEAcwAgAGMAaABhAG4AZwBlAGQAAEEgAGEAYwB0AGkAdgBlAEQA
ZQBsAHQAYQBCAGkAdABEAGUAcAB0AGgAIABoAGEAcwAgAGMAaABhAG4AZwBlAGQAAEkgAGEAYwB0
AGkAdgBlAEQAaQBzAHQAYQBuAGMAZQBUAHIAYQB2AGUAbABsAGUAZAAgAGgAYQBzACAAYwBoAGEA
bgBnAGUAZAAAJyAAcgBlAG0AYQByAGsAIABoAGEAcwAgAGMAaABhAG4AZwBlAGQAADcgAGIAaQB0
AEkAbgBDAGEAcwBpAG4AZwBJAG4AZAAgAGgAYQBzACAAYwBoAGEAbgBnAGUAZAAAPyAAYwByAGUA
dwBIAGEAbgBkAGwAaQBuAGcAQgBIAEEASQBuAGQAIABoAGEAcwAgAGMAaABhAG4AZwBlAGQAAC0g
AGEAYwB0AGkAdgBlAEkAbgBkACAAaABhAHMAIABjAGgAYQBuAGcAZQBkAABXIAByAGUAbQBhAHIA
awBUAHkAcABlACAAaABhAHMAIABjAGgAYQBuAGcAZQBkACAAZgByAG8AbQAgACcAewAwAH0AJwAg
AHQAbwAgACcAewAxAH0AJwABAAAAOf1JwW5dI0KBeHQo8DmOzwAIt3pcVhk04IkIiYRdzYCAzJED
BhIVAwYSGQMgAAEEAAASFQQAABIZBQABARIZBAgAEhUECAASGQMGEgwEAAASDAQIABIMCCAEEhgI
Dg4ODwACAhURHQERIRURHQERIQogAhURHQERIQ4OBAABDg4CBggDBhEUBAAAAAAEAQAAAAMgAAgE
IAEBCAggABURHQERIQkgAQEVER0BESEDIAANBCABAQ0DIAAOBCABAQ4DIAACBCABAQIhIBMCCBUR
HQERIRURHQERIQ0NDQ4ODg0NDQ4CAg4CDhIlBwYVER0BESECBg0CBg4CBgIDKAAICCgAFREdAREh
AygADQMoAA4DKAACBgABEl0RYQQgABJlBiACAQ4SZQQHARIVBSABARFtCAEAAgAAAAAAAwAAAQsA
BAIcEnkSfRGAgQQGEoCFBSAAEoCJBSAAEoCNBiABEoCRHAMgABwGIAISJQ4cBiABHQ4dAwwQAQEe
ABUSgK0BHgADCgEOBSACARwYBgABARKAhQYAAQERgLUGAAIODh0cBSACDg4OBAAAESEFAAICDg4F
IAESJQ4GAAESgLkOCDG/OFatNk41BAABDhwEIAEBCgUgABKAxQUAABKAyQkgAgESgMUSgMkFIAAS
gNUGIAEBEoDFBQACDg4cBSAAEoDlCiAGAQgODg4IEAIIIAUCCA4ODghFBycSJQIICBURHQERIRUR
HQERIQ0NDQ4ODg0NDQ4CAgIODg4ODg4ODhIYCBKAvQ4SgM0SgNUSgMUSgNkSgOESgOEdAx0cBhAB
AR4ADgQKARIYFgcJDhKAvRKA1RKAxRKA2Q4SGBIYHRwGFREdAREhBCAAEwAHAAICESERIQYHAhEh
ESEEAAECDgUAAREhDgUgABGA7QYAARKA8Q4HIAERgPURIQcgAREhEYD1DCAHAQgICAgICBGA7QUg
AQETABoHCBwOESESgPERgPURIRURHQERIRURHQERIQYAAQ4SgPkEBhKA/QQgAQMICAADDg4OEoD9
BCAAESEGAAMODhwcKQcKAhURHQERIRURHQERIREhFREdAREhESEVER0BESERIRURHQERIREhSQEA
Gi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC41AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVU
IEZyYW1ld29yayA0LjUoAQAjU1RfNTVmNzFjOWNjYTkyNDAxMjlkMTRjM2I0NTAxNzg2MTMAAAUB
AAAAABYBABFDb3B5cmlnaHQgQCAgMjAxOAAACAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0
aW9uVGhyb3dzAQAcYgAAAAAAAAAAAAA+YgAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMGIAAAAA
AAAAAAAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAAgAAAAAAAAAAAAAAA
AAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFiAAACwAwAAAAAAAAAAAACwAzQA
AABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAAAAEATVfgGwAAAQBN
V+AbPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBsAGUASQBuAGYA
bwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAEEAMAAAEAUwB0AHIAaQBu
AGcARgBpAGwAZQBJAG4AZgBvAAAA7AIAAAEAMAAwADAAMAAwADQAYgAwAAAAcAAkAAEARgBpAGwA
ZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABfADUANQBmADcAMQBjADkAYwBjAGEAOQAy
ADQAMAAxADIAOQBkADEANABjADMAYgA0ADUAMAAxADcAOAA2ADEAMwAAAEAADwABAEYAaQBsAGUA
VgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA3ADEAMwA2AC4AMgAyADMANAA5AAAAAABwACgAAQBJ
AG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAVABfADkAMgAwADQAMwAzADYAMgA5AGUAMgA0ADQA
OQA3AGIAOAA3ADkANAA3ADIANQBlAGMANAA5ADMAYgBlADEAZQAuAGQAbABsAAAASAASAAEATABl
AGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAAIAAyADAA
MQA4AAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAVABfADkAMgAw
ADQAMwAzADYAMgA5AGUAMgA0ADQAOQA3AGIAOAA3ADkANAA3ADIANQBlAGMANAA5ADMAYgBlADEA
ZQAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwA1ADUAZgA3
ADEAYwA5AGMAYwBhADkAMgA0ADAAMQAyADkAZAAxADQAYwAzAGIANAA1ADAAMQA3ADgANgAxADMA
AABEAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADcAMQAzADYALgAy
ADIAMwA0ADkAAAAAAEgADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4A
MAAuADcAMQAzADYALgAyADIAMwA0ADkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAABgAAAMAAAAUDIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
                </ScriptProject>
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:ForEachVariableMappings>
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{7D13981D-A8A9-402A-92EF-26500FE60ACE}"
              DTS:ObjectName="{7D13981D-A8A9-402A-92EF-26500FE60ACE}"
              DTS:ValueIndex="0"
              DTS:VariableName="User::intWellTrippingSpeedId" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{8B446809-2915-47BA-A0CD-C1425C0CB840}"
              DTS:ObjectName="{8B446809-2915-47BA-A0CD-C1425C0CB840}"
              DTS:ValueIndex="1"
              DTS:VariableName="User::intWellIdForTrippingSpeed" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{97FD5F2B-A614-403C-8F0C-E51AB6B9A2E3}"
              DTS:ObjectName="{97FD5F2B-A614-403C-8F0C-E51AB6B9A2E3}"
              DTS:ValueIndex="2"
              DTS:VariableName="User::objFromDateTimeForTrippingSpeed" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{2EBD817A-B222-44B1-BD4E-9707CA5AF884}"
              DTS:ObjectName="{2EBD817A-B222-44B1-BD4E-9707CA5AF884}"
              DTS:ValueIndex="3"
              DTS:VariableName="User::objToDateTimeForTrippingSpeed" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{C42ECC01-DDEA-4251-B108-CD04F95462A3}"
              DTS:ObjectName="{C42ECC01-DDEA-4251-B108-CD04F95462A3}"
              DTS:ValueIndex="4"
              DTS:VariableName="User::dblActiveTime" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{1D5B388B-A941-46F6-8090-C08730262660}"
              DTS:ObjectName="{1D5B388B-A941-46F6-8090-C08730262660}"
              DTS:ValueIndex="5"
              DTS:VariableName="User::dblFromBitDepth" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{CC39E466-CAD0-497C-B1B5-25CF512EC472}"
              DTS:ObjectName="{CC39E466-CAD0-497C-B1B5-25CF512EC472}"
              DTS:ValueIndex="6"
              DTS:VariableName="User::dblToBitDepth" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{6F20B441-AACB-4985-AB9D-B6399E0D44CC}"
              DTS:ObjectName="{6F20B441-AACB-4985-AB9D-B6399E0D44CC}"
              DTS:ValueIndex="7"
              DTS:VariableName="User::strActivityDescriptionForTrippingSpeed" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{490E383C-9523-4360-8C43-1FBF0FD47437}"
              DTS:ObjectName="{490E383C-9523-4360-8C43-1FBF0FD47437}"
              DTS:ValueIndex="8"
              DTS:VariableName="User::strDrillerNamesForTrippingSpeed" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{34AC39C6-88A1-4E05-A280-0151296AADCB}"
              DTS:ObjectName="{34AC39C6-88A1-4E05-A280-0151296AADCB}"
              DTS:ValueIndex="9"
              DTS:VariableName="User::strSinglesOrStandsForTrippingSpeed" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{C18C5773-FE16-4281-A9BD-EBD7E82C7D2B}"
              DTS:ObjectName="{C18C5773-FE16-4281-A9BD-EBD7E82C7D2B}"
              DTS:ValueIndex="10"
              DTS:VariableName="User::dblActiveDeltaBlockHeight" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{3329CE6F-2923-4516-B74E-7C111845CEA9}"
              DTS:ObjectName="{3329CE6F-2923-4516-B74E-7C111845CEA9}"
              DTS:ValueIndex="11"
              DTS:VariableName="User::dblActiveDeltaBitDepth" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{70D1D602-C455-4452-B76F-ECA3B50D0621}"
              DTS:ObjectName="{70D1D602-C455-4452-B76F-ECA3B50D0621}"
              DTS:ValueIndex="12"
              DTS:VariableName="User::dblActiveDistanceTravelled" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{D0AA0580-68C7-4379-95EC-5FEA1F6C1BEE}"
              DTS:ObjectName="{D0AA0580-68C7-4379-95EC-5FEA1F6C1BEE}"
              DTS:ValueIndex="13"
              DTS:VariableName="User::strRemarkForTrippingSpeed" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{96BD5C9F-B193-4164-BFB8-B8778AC6CC55}"
              DTS:ObjectName="{96BD5C9F-B193-4164-BFB8-B8778AC6CC55}"
              DTS:ValueIndex="14"
              DTS:VariableName="User::boolIsBitInCasing" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{2924B028-3BEF-4EBC-993C-1BB64506EFD4}"
              DTS:ObjectName="{2924B028-3BEF-4EBC-993C-1BB64506EFD4}"
              DTS:ValueIndex="15"
              DTS:VariableName="User::boolIsCrewHandlingBHA" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{9C767555-F4D6-4CF0-BB5F-A42A95922324}"
              DTS:ObjectName="{9C767555-F4D6-4CF0-BB5F-A42A95922324}"
              DTS:ValueIndex="16"
              DTS:VariableName="User::boolActiveIndForTrippingSpeed" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{BFD332FB-6843-430B-BFEC-CD599B3A4BC6}"
              DTS:ObjectName="{BFD332FB-6843-430B-BFEC-CD599B3A4BC6}"
              DTS:ValueIndex="17"
              DTS:VariableName="User::strRemarkTypeForTrippingSpeed" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{DFDB3B1D-1732-4393-BA7B-24043E274133}"
              DTS:ObjectName="{DFDB3B1D-1732-4393-BA7B-24043E274133}"
              DTS:ValueIndex="18"
              DTS:VariableName="User::strBlockHeightUom" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{21545A0A-069E-4E8F-AD99-7185A911D3AD}"
              DTS:ObjectName="{21545A0A-069E-4E8F-AD99-7185A911D3AD}"
              DTS:ValueIndex="19"
              DTS:VariableName="User::strBitDepthUom" />
          </DTS:ForEachVariableMappings>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Well Loop\Tripping Speeds Min Max Loop"
          DTS:CreationName="STOCK:FOREACHLOOP"
          DTS:Description="Foreach Loop Container"
          DTS:DTSID="{c2c8b2a2-b0fd-426d-91c8-6e6eaad1d59a}"
          DTS:ExecutableType="STOCK:FOREACHLOOP"
          DTS:LocaleID="-1"
          DTS:MaxErrorCount="6"
          DTS:ObjectName="Tripping Speeds Min Max Loop">
          <DTS:ForEachEnumerator
            DTS:CreationName="Microsoft.SqlServer.Dts.Runtime.Enumerators.ADO.ForEachADOEnumerator, Microsoft.SqlServer.ForEachADOEnumerator, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
            DTS:DTSID="{a412f433-c47d-4b5b-ad76-fb8ac15c66e3}"
            DTS:ObjectName="{4F357A1D-CA44-434A-8085-25C4D1BB103C}">
            <DTS:ObjectData>
              <FEEADO
                EnumType="EnumerateRowsInFirstTable"
                VarName="User::objMinMaxTrippingSpeedResultSet" />
            </DTS:ObjectData>
          </DTS:ForEachEnumerator>
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Well Loop\Tripping Speeds Min Max Loop\C# Script to Delete Old Tripping Speed Records"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Script Task"
              DTS:DTSID="{C7293916-DB6E-49A5-88C0-9FE0F04B333E}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="C# Script to Delete Old Tripping Speed Records"
              DTS:ThreadHint="2">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:ObjectData>
                <ScriptProject
                  Name="ST_7c5a56e9d13149b6a693e56badc1402e"
                  VSTAMajorVersion="3"
                  VSTAMinorVersion="0"
                  Language="CSharp"
                  ReadOnlyVariables="User::intMaxTrippingSpeedId,User::intMinTrippingSpeedId,User::intWellId,User::strAccessKey,User::strApiKey,User::strServerName,System::UserName">
                  <ProjectItem
                    Name="Properties\AssemblyInfo.cs"
                    Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_7c5a56e9d13149b6a693e56badc1402e")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_7c5a56e9d13149b6a693e56badc1402e")]
[assembly: AssemblyCopyright("Copyright @  2019")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Resources.resx"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
                  <ProjectItem
                    Name="ST_7c5a56e9d13149b6a693e56badc1402e.csproj"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{8A936A8E-14AE-4A38-950B-7C23AD5874E4}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_7c5a56e9d13149b6a693e56badc1402e</RootNamespace>
    <AssemblyName>ST_7c5a56e9d13149b6a693e56badc1402e</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Web.Helpers, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
      <DesignTime>True</DesignTime>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\10.0\InstallDir#\devenv.exe" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
                  <ProjectItem
                    Name="ScriptMain.cs"
                    Encoding="UTF8"><![CDATA[using System.Net;
using System.IO;
using System.Text;
using System.Web;
using System.Web.Helpers;
using System.Linq;

#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion

namespace ST_7c5a56e9d13149b6a693e56badc1402e
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            StringBuilder logMessage = new StringBuilder();
            int minTrippingSpeedId = (int)Dts.Variables["User::intMinTrippingSpeedId"].Value;
            int maxTrippingSpeedId = (int)Dts.Variables["User::intMaxTrippingSpeedId"].Value;
            int wellId = (int)Dts.Variables["User::intWellId"].Value;
            logMessage.AppendFormat("Checking if tripping speed deletes required for well {0} - range in database is {1} to {2}.", wellId, minTrippingSpeedId, maxTrippingSpeedId);

            string serverName = (String)Dts.Variables["User::strServerName"].Value;
            string apiKey = (String)Dts.Variables["User::strApiKey"].Value;
            string accessKey = (String)Dts.Variables["User::strAccessKey"].Value;
            string currentUserId = (String)Dts.Variables["System::UserName"].Value;

            if (currentUserId != null)
            {
                currentUserId = currentUserId.Split('\\').Last();
            }

            ServicePointManager.ServerCertificateValidationCallback = delegate { return true; };
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls | SecurityProtocolType.Ssl3;

            try
            {
                string url = string.Format("https://{0}/api/trippingSpeed?wellId={1}&apikey={2}&accesskey={3}", serverName, wellId, apiKey, accessKey);
                url = url.Replace(" ", "%20");
                url = url.Replace("$", "%24");

                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                WebResponse webResponse = request.GetResponse();
                Stream webStream = webResponse.GetResponseStream();
                StreamReader responseReader = new StreamReader(webStream);
                string response = responseReader.ReadToEnd();
                responseReader.Close();
                TrippingSpeed[] trippingSpeeds = Json.Decode<TrippingSpeed[]>(response);

                int gumboMinTrippingSpeedId = 0; 
                int gumboMaxTrippingSpeedId = 0;

                if (trippingSpeeds.Any()) 
                {
                    gumboMinTrippingSpeedId = trippingSpeeds.Min(ts => ts.trippingSpeedId);
                    gumboMaxTrippingSpeedId = trippingSpeeds.Max(ts => ts.trippingSpeedId);
                }

                bool deleteExisting = gumboMinTrippingSpeedId != 0 &&
                    gumboMaxTrippingSpeedId != 0 &&
                    gumboMinTrippingSpeedId < minTrippingSpeedId;

                if (deleteExisting)
                {
                    string listOfIdsToDelete = string.Join(",", trippingSpeeds.Select(ts => ts.trippingSpeedId.ToString()));
                    logMessage.AppendFormat(" Attempting delete of tripping speeds with ids {0}.", listOfIdsToDelete);
                    foreach (TrippingSpeed trippingSpeed in trippingSpeeds)
                    {
                        logMessage.AppendFormat(" ID: {0}.", trippingSpeed.trippingSpeedId);
                        url = string.Format("https://{0}/api/trippingSpeed/{1}?apikey={2}&accesskey={3}", serverName, trippingSpeed.trippingSpeedId, apiKey, accessKey);

                        int retries = 2;
                        while (retries > 0)
                        {
                            try
                            {
                                request = (HttpWebRequest)WebRequest.Create(url);
                                string gumboPayload = Json.Encode(trippingSpeed);

                                request.Method = "DELETE";
                                request.ContentType = "application/json";
                                request.ContentLength = gumboPayload.Length;
                                StreamWriter requestWriter = new StreamWriter(request.GetRequestStream(), System.Text.Encoding.ASCII);
                                requestWriter.Write(gumboPayload);
                                requestWriter.Close();

                                webResponse = request.GetResponse();
                                webStream = webResponse.GetResponseStream();
                                responseReader = new StreamReader(webStream);
                                response = responseReader.ReadToEnd();
                                responseReader.Close();
                                retries = 0; // indicate success
                            }
                            catch (Exception e)
                            {
                                retries--;
                                if (retries > 0)
                                {
                                    logMessage.Append(string.Format(" HTTP delete failed with exception {0}. Will retry.", e.Message));
                                }
                                else
                                {
                                    throw e;
                                }
                            }
                        }
                    }
                    logMessage.Append(" Records deleted");
                }
                else
                {
                    logMessage.Append("  No records to delete.");
                }
                
                Dts.TaskResult = (int)ScriptResults.Success;
                logMessage.Append("  Returning Success.");
                bool fireAgain = false;
                Dts.Events.FireInformation(0, "Gumbo SSIS", logMessage.ToString(), string.Empty, 0, ref fireAgain);

            }
            catch (Exception e)
            {
                logMessage.AppendFormat("  Encountered error: {0}.", e.Message);
                Dts.Events.FireError(0, "Gumbo SSIS", logMessage.ToString(), string.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }


        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        #region data class
        class TrippingSpeed
        {
            public int trippingSpeedId { get; set; }
            public int wellId { get; set; }
            public DateTime? startDateTime { get; set; }
            public DateTime? endDateTime { get; set; }
            public double activeTime { get; set; }
            public double fromDepth { get; set; }
            public double toDepth { get; set; }
            public string activityDescription { get; set; }
            public string drillerNames { get; set; }
            public string singleOrStands { get; set; }
            public double activeDeltaBlockHeight { get; set; }
            public double activeDeltaBitDepth { get; set; }
            public double activeDistanceTravelled { get; set; }
            public string remark { get; set; }
            public bool bitInCasingInd { get; set; }
            public bool crewHandlingBHAInd { get; set; }
            public string remarkType { get; set; }
            public bool activeInd { get; set; }
            public string rowCreatedBy { get; set; }
            public string rowChangedBy { get; set; }
            public DateTime? rowCreatedDate { get; set; }
            public DateTime? rowChangedDate { get; set; }

        }
        #endregion

    }
}]]></ProjectItem>
                  <ProjectItem
                    Name="Project"
                    Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_7c5a56e9d13149b6a693e56badc1402e</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_7c5a56e9d13149b6a693e56badc1402e</msb:DisplayName>
		<msb:ProjectId>{EBA154F8-3857-4236-8FCF-7CD7262154CF}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_7c5a56e9d13149b6a693e56badc1402e.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_7c5a56e9d13149b6a693e56badc1402e.Properties.Settings.get_Default():ST_7c5a56e9d13149b6a693e56badc1402e.Properties.Sett" +
    "ings")]

namespace ST_7c5a56e9d13149b6a693e56badc1402e.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.settings"
                    Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Resources.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_7c5a56e9d13149b6a693e56badc1402e.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_7c5a56e9d13149b6a693e56badc1402e.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_7c5a56e9d13149b6a693e56badc1402e.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_7c5a56e9d13149b6a693e56badc1402e.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_7c5a56e9d13149b6a693e56badc1402e.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
                  <BinaryItem
                    Name="ST_7c5a56e9d13149b6a693e56badc1402e.dll">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
cAZvQgAACn5DAAAKFhIYb0QAAAreRhMZBnIJBQBwERlvPQAACm8yAAAKJgIoGAAACm9BAAAKFnLz
BABwBm9CAAAKfkMAAAoWb0UAAAomAigYAAAKF29AAAAK3gAqAAAAQTQAAAAAAAANAwAAkQAAAJ4D
AAAsAAAANwAAAQAAAABWAQAA6AIAAD4EAABGAAAANwAAAR4CKEYAAAoqHgJ7CwAABCoiAgN9CwAA
BCoeAnsMAAAEKiICA30MAAAEKh4Cew0AAAQqIgIDfQ0AAAQqHgJ7DgAABCoiAgN9DgAABCoeAnsP
AAAEKiICA30PAAAEKh4CexAAAAQqIgIDfRAAAAQqHgJ7EQAABCoiAgN9EQAABCoeAnsSAAAEKiIC
A30SAAAEKh4CexMAAAQqIgIDfRMAAAQqHgJ7FAAABCoiAgN9FAAABCoeAnsVAAAEKiICA30VAAAE
Kh4CexYAAAQqIgIDfRYAAAQqHgJ7FwAABCoiAgN9FwAABCoeAnsYAAAEKiICA30YAAAEKh4CexkA
AAQqIgIDfRkAAAQqHgJ7GgAABCoiAgN9GgAABCoeAnsbAAAEKiICA30bAAAEKh4CexwAAAQqIgID
fRwAAAQqHgJ7HQAABCoiAgN9HQAABCoeAnseAAAEKiICA30eAAAEKh4Cex8AAAQqIgIDfR8AAAQq
HgJ7IAAABCoiAgN9IAAABCoeAigOAAAKKgAAAAAAALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJl
c291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVy
ZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJj
ZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAABCU0pCAQABAAAAAAAM
AAAAdjQuMC4zMDMxOQAAAAAFAGwAAAAADQAAI34AAGwNAAD4EAAAI1N0cmluZ3MAAAAAZB4AAEAF
AAAjVVMApCMAABAAAAAjR1VJRAAAALQjAABAAwAAI0Jsb2IAAAAAAAAAAgAAAVcdogkJCwAAAPol
MwAWAAABAAAAOAAAAAYAAAAgAAAAOgAAAB4AAABGAAAAAgAAAFkAAAADAAAAAwAAABkAAAAwAAAA
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
WQGrDlcBWQHoDl4BOQH9DmUBOQEED2wBaQEXD3IBaQE5D3kBeQFWD38BiQHKAYUBkQGAD30AkQGK
DxsAmQGoD5UBSQGvD6IBDADKAVEBSQGzD7wBSQG3D7wBFADKAVEBSQG7D9kBOQHCD/oBGQEcDgUC
mQHHDw0CaQHOD4EAaQHZD4EAOQHpD1gAaQH0DxICaQEGEH8BoQEgEBcCqQHKAR0CsQFCEIEAsQGK
DxsAuQFSEH0AOQH9DicCGQFeEC0CIQFlEFwAIQGIEDQCCQBsDX0AOQGTEJoAwQGZEDoCwQGpEEUC
GQDKARsACAAkAE4ACAAoAFMAKQCTANcALgBbABgDLgBjACEDLgALAIgCLgATANICLgAbAPsCLgAj
APsCLgArAPsCLgAzANICLgA7AAEDLgBDAPsCQwBrAFMASQCTANcAYQCbAFMAgQCbAFMAgwCrAFMA
oQCbAFMAwQCbAFMA4QCbAFMAQAGbAFMAYAGbAFMAYQGbAFMAgAGbAFMAgQGbAFMAoAGbAFMAoQGb
AFMAwAGbAFMAwQGbAFMA4AGbAFMA4QGbAFMAAAKbAFMAAQKbAFMAIAKbAFMAIQKbAFMAQAKbAFMA
QQKbAFMAYAKbAFMAYQKbAFMAgAKbAFMAgQKbAFMAoAKbAFMAoQKbAFMAwAKbAFMAwQKbAFMA4AKb
AFMA4QKbAFMAAAObAFMAAQObAFMAIAObAFMAIQObAFMAQAObAFMAQQObAFMAYAObAFMAYQObAFMA
gAObAFMAgQObAFMAoAObAFMAoQObAFMAwAObAFMAwQObAFMA4AObAFMA4QObAFMAAASbAFMAAQSb
AFMAIASbAFMAQASbAFMAYASbAFMAgASbAFMAoASbAFMAwASbAFMA4ASbAFMAAAWbAFMAIAWbAFMA
QAWbAFMAYAWbAFMAgAWbAFMAoAWbAFMAwAWbAFMA4AWbAFMAAAabAFMAIAabAFMAQAabAFMAYAab
AFMAgAabAFMAoAabAFMAwAabAFMA4AabAFMAAAebAFMAIAebAFMAzAAUAU4CAgABAAMAAwAGAAQA
AAB9AS8AAAD8ATQAAAAgAkIAAAAkCKAAAAA0CKAAAAA7CKQAAABJCKQAAABVCK0AAABgCK0AAABq
CK0AAAByCLEAAACGCLEAAACTCLEAAACiCK0AAAC5CK0AAADNCK0AAADlCLEAAADsCLUAAAD7CLUA
AAAOCbEAAAAZCbUAAAAjCbEAAAAwCbEAAAA9CaQAAABMCaQAAgACAAMAAgADAAUAAQAEAAUAAgAF
AAcAAgAOAAkAAQAPAAkAAQARAAsAAgAQAAsAAgASAA0AAQATAA0AAgAUAA8AAQAVAA8AAQAXABEA
AgAWABEAAgAYABMAAQAZABMAAgAaABUAAQAbABUAAQAdABcAAgAcABcAAgAeABkAAQAfABkAAQAh
ABsAAgAgABsAAQAjAB0AAgAiAB0AAgAkAB8AAQAlAB8AAgAmACEAAQAnACEAAQApACMAAgAoACMA
AgAqACUAAQArACUAAQAtACcAAgAsACcAAQAvACkAAgAuACkAAgAwACsAAQAxACsAAQAzAC0AAgAy
AC0AAgA0AC8AAQA1AC8AAgA2ADEAAQA3ADEAAgA4ADMAAQA5ADMAswHQAQSAAAABAAAA4Bu8VwAA
AAAAAH8AAAAEAAAAAAAAAAAAAAABAL8AAAAAAAQAAAAAAAAAAAAAAAEAyAAAAAAACwAAAAAAAAAA
AAAACgADAQAAAAALAAAAAAAAAAAAAAAKAKkNAAAAAAQAAAAAAAAAAAAAAAEAOw4AAAAAAQAAAAAA
AAAAAAAAjAGQDwAAAAAAAAAAAQAAALMQAAAFAAQABgAEAD0ATQFVAJwBVwCuAVsArgFdAK4BYQD0
AQAAADxNb2R1bGU+AFNUXzdjNWE1NmU5ZDEzMTQ5YjZhNjkzZTU2YmFkYzE0MDJlLmRsbABSZXNv
dXJjZXMAU1RfN2M1YTU2ZTlkMTMxNDliNmE2OTNlNTZiYWRjMTQwMmUuUHJvcGVydGllcwBTZXR0
aW5ncwBTY3JpcHRNYWluAFNUXzdjNWE1NmU5ZDEzMTQ5YjZhNjkzZTU2YmFkYzE0MDJlAFNjcmlw
dFJlc3VsdHMAVHJpcHBpbmdTcGVlZABtc2NvcmxpYgBTeXN0ZW0AT2JqZWN0AFN5c3RlbS5Db25m
aWd1cmF0aW9uAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuU2Ny
aXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAFZTVEFSVFNj
cmlwdE9iamVjdE1vZGVsQmFzZQBFbnVtAFN5c3RlbS5SZXNvdXJjZXMAUmVzb3VyY2VNYW5hZ2Vy
AHJlc291cmNlTWFuAFN5c3RlbS5HbG9iYWxpemF0aW9uAEN1bHR1cmVJbmZvAHJlc291cmNlQ3Vs
dHVyZQAuY3RvcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAEN1
bHR1cmUAZGVmYXVsdEluc3RhbmNlAGdldF9EZWZhdWx0AERlZmF1bHQATWFpbgB2YWx1ZV9fAFN1
Y2Nlc3MARmFpbHVyZQBnZXRfdHJpcHBpbmdTcGVlZElkAHNldF90cmlwcGluZ1NwZWVkSWQAZ2V0
X3dlbGxJZABzZXRfd2VsbElkAE51bGxhYmxlYDEARGF0ZVRpbWUAZ2V0X3N0YXJ0RGF0ZVRpbWUA
c2V0X3N0YXJ0RGF0ZVRpbWUAZ2V0X2VuZERhdGVUaW1lAHNldF9lbmREYXRlVGltZQBnZXRfYWN0
aXZlVGltZQBzZXRfYWN0aXZlVGltZQBnZXRfZnJvbURlcHRoAHNldF9mcm9tRGVwdGgAZ2V0X3Rv
RGVwdGgAc2V0X3RvRGVwdGgAZ2V0X2FjdGl2aXR5RGVzY3JpcHRpb24Ac2V0X2FjdGl2aXR5RGVz
Y3JpcHRpb24AZ2V0X2RyaWxsZXJOYW1lcwBzZXRfZHJpbGxlck5hbWVzAGdldF9zaW5nbGVPclN0
YW5kcwBzZXRfc2luZ2xlT3JTdGFuZHMAZ2V0X2FjdGl2ZURlbHRhQmxvY2tIZWlnaHQAc2V0X2Fj
dGl2ZURlbHRhQmxvY2tIZWlnaHQAZ2V0X2FjdGl2ZURlbHRhQml0RGVwdGgAc2V0X2FjdGl2ZURl
bHRhQml0RGVwdGgAZ2V0X2FjdGl2ZURpc3RhbmNlVHJhdmVsbGVkAHNldF9hY3RpdmVEaXN0YW5j
ZVRyYXZlbGxlZABnZXRfcmVtYXJrAHNldF9yZW1hcmsAZ2V0X2JpdEluQ2FzaW5nSW5kAHNldF9i
aXRJbkNhc2luZ0luZABnZXRfY3Jld0hhbmRsaW5nQkhBSW5kAHNldF9jcmV3SGFuZGxpbmdCSEFJ
bmQAZ2V0X3JlbWFya1R5cGUAc2V0X3JlbWFya1R5cGUAZ2V0X2FjdGl2ZUluZABzZXRfYWN0aXZl
SW5kAGdldF9yb3dDcmVhdGVkQnkAc2V0X3Jvd0NyZWF0ZWRCeQBnZXRfcm93Q2hhbmdlZEJ5AHNl
dF9yb3dDaGFuZ2VkQnkAZ2V0X3Jvd0NyZWF0ZWREYXRlAHNldF9yb3dDcmVhdGVkRGF0ZQBnZXRf
cm93Q2hhbmdlZERhdGUAc2V0X3Jvd0NoYW5nZWREYXRlADx0cmlwcGluZ1NwZWVkSWQ+a19fQmFj
a2luZ0ZpZWxkADx3ZWxsSWQ+a19fQmFja2luZ0ZpZWxkADxzdGFydERhdGVUaW1lPmtfX0JhY2tp
bmdGaWVsZAA8ZW5kRGF0ZVRpbWU+a19fQmFja2luZ0ZpZWxkADxhY3RpdmVUaW1lPmtfX0JhY2tp
bmdGaWVsZAA8ZnJvbURlcHRoPmtfX0JhY2tpbmdGaWVsZAA8dG9EZXB0aD5rX19CYWNraW5nRmll
bGQAPGFjdGl2aXR5RGVzY3JpcHRpb24+a19fQmFja2luZ0ZpZWxkADxkcmlsbGVyTmFtZXM+a19f
QmFja2luZ0ZpZWxkADxzaW5nbGVPclN0YW5kcz5rX19CYWNraW5nRmllbGQAPGFjdGl2ZURlbHRh
QmxvY2tIZWlnaHQ+a19fQmFja2luZ0ZpZWxkADxhY3RpdmVEZWx0YUJpdERlcHRoPmtfX0JhY2tp
bmdGaWVsZAA8YWN0aXZlRGlzdGFuY2VUcmF2ZWxsZWQ+a19fQmFja2luZ0ZpZWxkADxyZW1hcms+
a19fQmFja2luZ0ZpZWxkADxiaXRJbkNhc2luZ0luZD5rX19CYWNraW5nRmllbGQAPGNyZXdIYW5k
bGluZ0JIQUluZD5rX19CYWNraW5nRmllbGQAPHJlbWFya1R5cGU+a19fQmFja2luZ0ZpZWxkADxh
Y3RpdmVJbmQ+a19fQmFja2luZ0ZpZWxkADxyb3dDcmVhdGVkQnk+a19fQmFja2luZ0ZpZWxkADxy
b3dDaGFuZ2VkQnk+a19fQmFja2luZ0ZpZWxkADxyb3dDcmVhdGVkRGF0ZT5rX19CYWNraW5nRmll
bGQAPHJvd0NoYW5nZWREYXRlPmtfX0JhY2tpbmdGaWVsZAB0cmlwcGluZ1NwZWVkSWQAd2VsbElk
AHN0YXJ0RGF0ZVRpbWUAZW5kRGF0ZVRpbWUAYWN0aXZlVGltZQBmcm9tRGVwdGgAdG9EZXB0aABh
Y3Rpdml0eURlc2NyaXB0aW9uAGRyaWxsZXJOYW1lcwBzaW5nbGVPclN0YW5kcwBhY3RpdmVEZWx0
YUJsb2NrSGVpZ2h0AGFjdGl2ZURlbHRhQml0RGVwdGgAYWN0aXZlRGlzdGFuY2VUcmF2ZWxsZWQA
cmVtYXJrAGJpdEluQ2FzaW5nSW5kAGNyZXdIYW5kbGluZ0JIQUluZAByZW1hcmtUeXBlAGFjdGl2
ZUluZAByb3dDcmVhdGVkQnkAcm93Q2hhbmdlZEJ5AHJvd0NyZWF0ZWREYXRlAHJvd0NoYW5nZWRE
YXRlAHZhbHVlAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAVGFyZ2V0RnJhbWV3b3JrQXR0cmli
dXRlAFN5c3RlbS5SZWZsZWN0aW9uAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlEZXNj
cmlwdGlvbkF0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlD
b21wYW55QXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdo
dEF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBBc3NlbWJseUN1bHR1cmVBdHRy
aWJ1dGUAQXNzZW1ibHlWZXJzaW9uQXR0cmlidXRlAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2Vy
dmljZXMAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0
eUF0dHJpYnV0ZQBTeXN0ZW0uRGlhZ25vc3RpY3MARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0
ZQBUeXBlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAEFzc2VtYmx5AGdldF9B
c3NlbWJseQBTeXN0ZW0uQ29tcG9uZW50TW9kZWwARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEVk
aXRvckJyb3dzYWJsZVN0YXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAC5jY3RvcgBTU0lT
U2NyaXB0VGFza0VudHJ5UG9pbnRBdHRyaWJ1dGUAU3lzdGVtLlNlY3VyaXR5LkNyeXB0b2dyYXBo
eS5YNTA5Q2VydGlmaWNhdGVzAFg1MDlDZXJ0aWZpY2F0ZQBYNTA5Q2hhaW4AU3lzdGVtLk5ldC5T
ZWN1cml0eQBTc2xQb2xpY3lFcnJvcnMAPE1haW4+Yl9fMABwYXJhbTAAcGFyYW0xAHBhcmFtMgBw
YXJhbTMAUmVtb3RlQ2VydGlmaWNhdGVWYWxpZGF0aW9uQ2FsbGJhY2sAQ1MkPD45X19DYWNoZWRB
bm9ueW1vdXNNZXRob2REZWxlZ2F0ZTQAPE1haW4+Yl9fMQB0cwBGdW5jYDIAQ1MkPD45X19DYWNo
ZWRBbm9ueW1vdXNNZXRob2REZWxlZ2F0ZTUAPE1haW4+Yl9fMgBDUyQ8PjlfX0NhY2hlZEFub255
bW91c01ldGhvZERlbGVnYXRlNgA8TWFpbj5iX18zAENTJDw+OV9fQ2FjaGVkQW5vbnltb3VzTWV0
aG9kRGVsZWdhdGU3AEludDMyAFRvU3RyaW5nAFN5c3RlbS5UZXh0AFN0cmluZ0J1aWxkZXIAU2Ny
aXB0T2JqZWN0TW9kZWwAZ2V0X0R0cwBNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFnZWREVFMATWlj
cm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBWYXJpYWJsZXMAZ2V0X1ZhcmlhYmxlcwBWYXJp
YWJsZQBnZXRfSXRlbQBnZXRfVmFsdWUAQXBwZW5kRm9ybWF0AFN0cmluZwBDaGFyAFNwbGl0AFN5
c3RlbS5Db3JlAFN5c3RlbS5MaW5xAEVudW1lcmFibGUAU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVy
aWMASUVudW1lcmFibGVgMQBMYXN0AFN5c3RlbS5OZXQAU2VydmljZVBvaW50TWFuYWdlcgBzZXRf
U2VydmVyQ2VydGlmaWNhdGVWYWxpZGF0aW9uQ2FsbGJhY2sAU2VjdXJpdHlQcm90b2NvbFR5cGUA
c2V0X1NlY3VyaXR5UHJvdG9jb2wARm9ybWF0AFJlcGxhY2UAV2ViUmVxdWVzdABDcmVhdGUASHR0
cFdlYlJlcXVlc3QAV2ViUmVzcG9uc2UAR2V0UmVzcG9uc2UAU3lzdGVtLklPAFN0cmVhbQBHZXRS
ZXNwb25zZVN0cmVhbQBTdHJlYW1SZWFkZXIAVGV4dFJlYWRlcgBSZWFkVG9FbmQAQ2xvc2UAU3lz
dGVtLldlYi5IZWxwZXJzAEpzb24ARGVjb2RlAEFueQBNaW4ATWF4AFNlbGVjdABKb2luAEVuY29k
ZQBzZXRfTWV0aG9kAHNldF9Db250ZW50VHlwZQBnZXRfTGVuZ3RoAHNldF9Db250ZW50TGVuZ3Ro
AEdldFJlcXVlc3RTdHJlYW0ARW5jb2RpbmcAZ2V0X0FTQ0lJAFN0cmVhbVdyaXRlcgBUZXh0V3Jp
dGVyAFdyaXRlAEV4Y2VwdGlvbgBnZXRfTWVzc2FnZQBBcHBlbmQAc2V0X1Rhc2tSZXN1bHQARXZl
bnRzT2JqZWN0V3JhcHBlcgBnZXRfRXZlbnRzAEVtcHR5AEZpcmVJbmZvcm1hdGlvbgBGaXJlRXJy
b3IAU1RfN2M1YTU2ZTlkMTMxNDliNmE2OTNlNTZiYWRjMTQwMmUuUHJvcGVydGllcy5SZXNvdXJj
ZXMucmVzb3VyY2VzAAAAAHFTAFQAXwA3AGMANQBhADUANgBlADkAZAAxADMAMQA0ADkAYgA2AGEA
NgA5ADMAZQA1ADYAYgBhAGQAYwAxADQAMAAyAGUALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBl
AHMAbwB1AHIAYwBlAHMAADdVAHMAZQByADoAOgBpAG4AdABNAGkAbgBUAHIAaQBwAHAAaQBuAGcA
UwBwAGUAZQBkAEkAZAAAN1UAcwBlAHIAOgA6AGkAbgB0AE0AYQB4AFQAcgBpAHAAcABpAG4AZwBT
AHAAZQBlAGQASQBkAAAfVQBzAGUAcgA6ADoAaQBuAHQAVwBlAGwAbABJAGQAAIC3QwBoAGUAYwBr
AGkAbgBnACAAaQBmACAAdAByAGkAcABwAGkAbgBnACAAcwBwAGUAZQBkACAAZABlAGwAZQB0AGUA
cwAgAHIAZQBxAHUAaQByAGUAZAAgAGYAbwByACAAdwBlAGwAbAAgAHsAMAB9ACAALQAgAHIAYQBu
AGcAZQAgAGkAbgAgAGQAYQB0AGEAYgBhAHMAZQAgAGkAcwAgAHsAMQB9ACAAdABvACAAewAyAH0A
LgABJ1UAcwBlAHIAOgA6AHMAdAByAFMAZQByAHYAZQByAE4AYQBtAGUAAB9VAHMAZQByADoAOgBz
AHQAcgBBAHAAaQBLAGUAeQAAJVUAcwBlAHIAOgA6AHMAdAByAEEAYwBjAGUAcwBzAEsAZQB5AAAh
UwB5AHMAdABlAG0AOgA6AFUAcwBlAHIATgBhAG0AZQAAgINoAHQAdABwAHMAOgAvAC8AewAwAH0A
LwBhAHAAaQAvAHQAcgBpAHAAcABpAG4AZwBTAHAAZQBlAGQAPwB3AGUAbABsAEkAZAA9AHsAMQB9
ACYAYQBwAGkAawBlAHkAPQB7ADIAfQAmAGEAYwBjAGUAcwBzAGsAZQB5AD0AewAzAH0AAAMgAAAH
JQAyADAAAAMkAAAHJQAyADQAAAMsAABnIABBAHQAdABlAG0AcAB0AGkAbgBnACAAZABlAGwAZQB0
AGUAIABvAGYAIAB0AHIAaQBwAHAAaQBuAGcAIABzAHAAZQBlAGQAcwAgAHcAaQB0AGgAIABpAGQA
cwAgAHsAMAB9AC4AABMgAEkARAA6ACAAewAwAH0ALgAAdWgAdAB0AHAAcwA6AC8ALwB7ADAAfQAv
AGEAcABpAC8AdAByAGkAcABwAGkAbgBnAFMAcABlAGUAZAAvAHsAMQB9AD8AYQBwAGkAawBlAHkA
PQB7ADIAfQAmAGEAYwBjAGUAcwBzAGsAZQB5AD0AewAzAH0AAA1EAEUATABFAFQARQAAIWEAcABw
AGwAaQBjAGEAdABpAG8AbgAvAGoAcwBvAG4AAGcgAEgAVABUAFAAIABkAGUAbABlAHQAZQAgAGYA
YQBpAGwAZQBkACAAdwBpAHQAaAAgAGUAeABjAGUAcAB0AGkAbwBuACAAewAwAH0ALgAgAFcAaQBs
AGwAIAByAGUAdAByAHkALgAAISAAUgBlAGMAbwByAGQAcwAgAGQAZQBsAGUAdABlAGQAAC8gACAA
TgBvACAAcgBlAGMAbwByAGQAcwAgAHQAbwAgAGQAZQBsAGUAdABlAC4AACkgACAAUgBlAHQAdQBy
AG4AaQBuAGcAIABTAHUAYwBjAGUAcwBzAC4AABVHAHUAbQBiAG8AIABTAFMASQBTAAAzIAAgAEUA
bgBjAG8AdQBuAHQAZQByAGUAZAAgAGUAcgByAG8AcgA6ACAAewAwAH0ALgAAAAAA1OagRW0bgkCr
CgKzvYzRdgAIt3pcVhk04IkIiYRdzYCAzJEDBhIVAwYSGQMgAAEEAAASFQQAABIZBQABARIZBAgA
EhUECAASGQMGEgwEAAASDAQIABIMAgYIAwYRFAQAAAAABAEAAAADIAAIBCABAQgIIAAVER0BESEJ
IAEBFREdAREhAyAADQQgAQENAyAADgQgAQEOAyAAAgQgAQECBwYVER0BESECBg0CBg4CBgIDKAAI
CCgAFREdAREhAygADQMoAA4DKAACBgABElkRXQQgABJhBiACAQ4SYQQHARIVBSABARFpCAEAAgAA
AAAAAwAAAQoABAIcEnUSeRF9BAYSgIEFAAEIEhgJBhUSgIUCEhgIBQABDhIYCQYVEoCFAhIYDgMH
AQgFIAASgJEFIAASgJUGIAESgJkcAyAAHAkgBBKAjQ4cHBwGIAEdDh0DDBABAR4AFRKAqQEeAAMK
AQ4FIAIBHBgGAAEBEoCBBgABARGAsQYAAg4OHRwFIAIODg4GAAESgLUOBSAAEoC9BSAAEoDBBiAB
ARKAwQgxvzhWrTZONQYQAQEeAA4FCgEdEhgLEAEBAhUSgKkBHgAECgESGAgVEoCFAhIYCBMQAQII
FRKAqQEeABUSgIUCHgAICBUSgIUCEhgOGhACAhUSgKkBHgEVEoCpAR4AFRKAhQIeAB4BBQoCEhgO
CgACDg4VEoCpAQ4HIAISgI0OHAQAAQ4cBCABAQoFAAASgNEJIAIBEoDBEoDRBQACDg4cBiABEoCN
DgUgABKA4QogBgEIDg4OCBACCCAFAggODg4IOQcfEoCNCAgIDg4ODg4SgLkSgL0SgMESgMUOHRIY
CAgCDhIYCA4SgNUSgN0CEoDdHQMdHB0SGAgdHEkBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQu
NQEAVA4URnJhbWV3b3JrRGlzcGxheU5hbWUSLk5FVCBGcmFtZXdvcmsgNC41KAEAI1NUXzdjNWE1
NmU5ZDEzMTQ5YjZhNjkzZTU2YmFkYzE0MDJlAAAFAQAAAAAWAQARQ29weXJpZ2h0IEAgIDIwMTkA
AAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEUTwAAAAAAAAAAAAAuTwAA
ACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIE8AAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVl
LmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAAABgAAIAA
AAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYYAAAsAMAAAAA
AAAAAAAAsAM0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4AAAEAAAAB
ALxX4BsAAAEAvFfgGz8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEAcgBGAGkA
bABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACwBBADAAAB
AFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAOwCAAABADAAMAAwADAAMAA0AGIAMAAAAHAA
JAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQAXwA3AGMANQBhADUANgBl
ADkAZAAxADMAMQA0ADkAYgA2AGEANgA5ADMAZQA1ADYAYgBhAGQAYwAxADQAMAAyAGUAAABAAA8A
AQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANwAxADMANgAuADIAMgA0ADYAMAAA
AAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwA3AGMANQBhADUANgBlADkA
ZAAxADMAMQA0ADkAYgA2AGEANgA5ADMAZQA1ADYAYgBhAGQAYwAxADQAMAAyAGUALgBkAGwAbAAA
AEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcAaAB0ACAA
QAAgACAAMgAwADEAOQAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABT
AFQAXwA3AGMANQBhADUANgBlADkAZAAxADMAMQA0ADkAYgA2AGEANgA5ADMAZQA1ADYAYgBhAGQA
YwAxADQAMAAyAGUALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBU
AF8ANwBjADUAYQA1ADYAZQA5AGQAMQAzADEANAA5AGIANgBhADYAOQAzAGUANQA2AGIAYQBkAGMA
MQA0ADAAMgBlAAAARAAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA3
ADEAMwA2AC4AMgAyADQANgAwAAAAAABIAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkA
bwBuAAAAMQAuADAALgA3ADEAMwA2AC4AMgAyADQANgAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAADAAAAEA/AAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
                </ScriptProject>
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:ForEachVariableMappings>
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{467C6A34-A92A-4A93-8F12-2A590EF50B08}"
              DTS:ObjectName="{467C6A34-A92A-4A93-8F12-2A590EF50B08}"
              DTS:ValueIndex="0"
              DTS:VariableName="User::intMinTrippingSpeedId" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{98A9C34A-C87F-420E-8AC8-FC23860029E2}"
              DTS:ObjectName="{98A9C34A-C87F-420E-8AC8-FC23860029E2}"
              DTS:ValueIndex="1"
              DTS:VariableName="User::intMaxTrippingSpeedId" />
          </DTS:ForEachVariableMappings>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Well Loop\Well Activity Period Loop"
          DTS:CreationName="STOCK:FOREACHLOOP"
          DTS:Description="Foreach Loop Container"
          DTS:DTSID="{D6EACCF3-4F97-41CB-8A6A-CB210501C76A}"
          DTS:ExecutableType="STOCK:FOREACHLOOP"
          DTS:LocaleID="-1"
          DTS:ObjectName="Well Activity Period Loop">
          <DTS:ForEachEnumerator
            DTS:CreationName="Microsoft.SqlServer.Dts.Runtime.Enumerators.ADO.ForEachADOEnumerator, Microsoft.SqlServer.ForEachADOEnumerator, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
            DTS:DTSID="{EBBE6D99-7A64-4E16-A95F-9B4FB65DC292}"
            DTS:ObjectName="{EBBE6D99-7A64-4E16-A95F-9B4FB65DC292}">
            <DTS:ObjectData>
              <FEEADO
                EnumType="EnumerateRowsInFirstTable"
                VarName="User::objWellActivityPeriodList" />
            </DTS:ObjectData>
          </DTS:ForEachEnumerator>
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Well Loop\Well Activity Period Loop\Append to WAP ID List"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExpressionTask.ExpressionTask, Microsoft.SqlServer.ExpressionTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Expression Task"
              DTS:DTSID="{88bc04e9-f59d-496e-956d-012c22eb2b20}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExpressionTask.ExpressionTask, Microsoft.SqlServer.ExpressionTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Append to WAP ID List"
              DTS:TaskContact="Expression Task;Microsoft Corporation; SQL Server 2012; � 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="3">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:ObjectData>
                <ExpressionTask
                  Expression="@[User::strListOfValidWapIds] =  @[User::strListOfValidWapIds] +&#xA;( @[User::intWellIdForWellActivityPeriod]  == @[User::intWellId] &#xA;? (@[User::strListOfValidWapIds] == &quot;&quot; ? &quot;&quot; : &quot;,&quot;) +  (DT_STR, 10,1252) @[User::intWellActivityPeriodId]&#xA;: &quot;&quot; )" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Well Loop\Well Activity Period Loop\C# Script to Call Data Gumbo Well Activity Period API"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Script Task"
              DTS:DTSID="{4C7B4A57-B02C-413F-81EC-AE8259706E9A}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="C# Script to Call Data Gumbo Well Activity Period API"
              DTS:ThreadHint="3">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:ObjectData>
                <ScriptProject
                  Name="ST_7fed0a6b76cc426d92dd3555f031b904"
                  VSTAMajorVersion="3"
                  VSTAMinorVersion="0"
                  Language="CSharp"
                  ReadOnlyVariables="User::intRigIdForWellActivityPeriod,User::intWellActivityPeriodId,User::intWellIdForWellActivityPeriod,User::objEndDateTimeForWellActivityPeriod,User::objStartDateTimeForWellActivityPeriod,User::intWellId,User::objRigReleaseDate,User::strAccessKey,User::strApiKey,User::strConvertedTimeZone,User::strServerName,System::UserName">
                  <ProjectItem
                    Name="Properties\AssemblyInfo.cs"
                    Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_7fed0a6b76cc426d92dd3555f031b904")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_7fed0a6b76cc426d92dd3555f031b904")]
[assembly: AssemblyCopyright("Copyright @  2019")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Resources.resx"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_7fed0a6b76cc426d92dd3555f031b904.Properties.Settings.get_Default():ST_7fed0a6b76cc426d92dd3555f031b904.Properties.Sett" +
    "ings")]

namespace ST_7fed0a6b76cc426d92dd3555f031b904.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
                  <ProjectItem
                    Name="ScriptMain.cs"
                    Encoding="UTF8"><![CDATA[using System.Net;
using System.IO;
using System.Text;
using System.Web;
using System.Web.Helpers;
using System.Linq;
using System.Text.RegularExpressions;

#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion

namespace ST_7fed0a6b76cc426d92dd3555f031b904
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            StringBuilder logMessage = new StringBuilder();
            bool fireAgain = false;
            int wellActivityPeriodId = (int)Dts.Variables["User::intWellActivityPeriodId"].Value;
            logMessage.AppendFormat("Processing well activity period with id {0}.", wellActivityPeriodId);
            int wellId = (int)Dts.Variables["User::intWellIdForWellActivityPeriod"].Value;
            int rigId = (int)Dts.Variables["User::intRigIdForWellActivityPeriod"].Value;

            DateTime? startDateTime = GetDateTime("User::objStartDateTimeForWellActivityPeriod", "User::strConvertedTimeZone");
            DateTime? endDateTime = GetDateTime("User::objEndDateTimeForWellActivityPeriod", "User::strConvertedTimeZone");

            DateTime? rigReleaseDate = GetDateTime("User::objRigReleaseDate", "User::strConvertedTimeZone");
            int wellIdCurrentlyBeingProcessed = (int)Dts.Variables["User::intWellId"].Value;

            // for well activity periods, we process the periods for the well before
            // and after the well currently being processed.  We will only insert for the well 
            // currently being processed - we don't insert for the prev or next well
            bool wapIsForCurrentWell = wellId == wellIdCurrentlyBeingProcessed;

            string serverName = (String)Dts.Variables["User::strServerName"].Value;
            string apiKey = (String)Dts.Variables["User::strApiKey"].Value;
            string accessKey = (String)Dts.Variables["User::strAccessKey"].Value;
            string currentUserId = (String)Dts.Variables["System::UserName"].Value;

            if (currentUserId != null)
            {
                currentUserId = currentUserId.Split('\\').Last();
            }

            ServicePointManager.ServerCertificateValidationCallback = delegate { return true; };
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls | SecurityProtocolType.Ssl3;

            try
            {
                string url = string.Format("https://{0}/api/wellActivityPeriod/{1}?apikey={2}&accesskey={3}", serverName, wellActivityPeriodId, apiKey, accessKey);
                url = url.Replace(" ", "%20");
                url = url.Replace("$", "%24");

                DateTime now = DateTime.Now;
                WellActivityPeriod existingWellActivityPeriod = GetExistingWellActivityPeriod(wellActivityPeriodId, serverName, apiKey, accessKey);

                if (existingWellActivityPeriod == null)
                {
                    if (wapIsForCurrentWell)
                    {
                        logMessage.Append(" Not found - will insert.");
                        existingWellActivityPeriod = new WellActivityPeriod();
                        existingWellActivityPeriod.wellActivityPeriodId = wellActivityPeriodId;
                    }
                    else
                    {
                        logMessage.Append(" Not found but this is a wap for a different well - will exit.");
                        return;
                    }
                }
                else
                {
                    logMessage.Append(" Entity found - will check if update is required.");
                }

                if (existingWellActivityPeriod.Apply(wellId, rigId, startDateTime, endDateTime, currentUserId, logMessage))
                {
                    int retries = 2;
                    while (retries > 0)
                    {
                        try
                        {
                            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                            logMessage.Append(" Attempting write to DataGumbo API.");
                            string gumboPayload = Json.Encode(existingWellActivityPeriod);

                            request.Method = "PUT";
                            request.ContentType = "application/json";

                            gumboPayload = EncodeNonAsciiCharacters(gumboPayload);

                            request.ContentLength = gumboPayload.Length;
                            StreamWriter requestWriter = new StreamWriter(request.GetRequestStream(), System.Text.Encoding.ASCII);
                            requestWriter.Write(gumboPayload);
                            requestWriter.Close();

                            WebResponse webResponse = request.GetResponse();
                            Stream webStream = webResponse.GetResponseStream();
                            StreamReader responseReader = new StreamReader(webStream);
                            string response = responseReader.ReadToEnd();
                            responseReader.Close();
                            retries = 0; // indicate success
                        }
                        catch (Exception e)
                        {
                            retries--;
                            if (retries > 0)
                            {
                                logMessage.Append(string.Format(" HTTP put failed with exception {0}. Will retry.", e.Message));
                            }
                            else
                            {
                                throw e;
                            }
                        }
                    }
                }
                else
                {
                    logMessage.Append(" No update required.");
                }

                if (wapIsForCurrentWell && !(existingWellActivityPeriod.endDateTime.HasValue) && rigReleaseDate.HasValue)
                {
                    ClearOutRigReleaseDateForWell(wellId, serverName, apiKey, accessKey, currentUserId, logMessage);
                }

                Dts.TaskResult = (int)ScriptResults.Success;
                logMessage.Append("  Returning Success.");
                Dts.Events.FireInformation(0, "Gumbo SSIS", logMessage.ToString(), string.Empty, 0, ref fireAgain);

            }
            catch (Exception e)
            {
                logMessage.AppendFormat("  Encountered error: {0}.", e.Message);
                Dts.Events.FireError(0, "Gumbo SSIS", logMessage.ToString(), string.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        private void ClearOutRigReleaseDateForWell(int wellId, string serverName, string apiKey, string accessKey, string currentUserId, StringBuilder logMessage)
        {
            Well w = GetExistingWell(wellId, serverName, apiKey, accessKey);

            w.rigReleaseDate = null;
            w.rowChangedDate = DateTime.Now;
            w.rowChangedBy = currentUserId;

            string url = string.Format("https://{0}/api/well/{1}?apikey={2}&accesskey={3}", serverName, wellId, apiKey, accessKey);
            url = url.Replace(" ", "%20");
            url = url.Replace("$", "%24");

            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
            logMessage.Append(" Attempting write well to DataGumbo API.");
            string gumboPayload = Json.Encode(w);

            request.Method = "PUT";
            request.ContentType = "application/json";
            request.ContentLength = gumboPayload.Length;
            StreamWriter requestWriter = new StreamWriter(request.GetRequestStream(), System.Text.Encoding.ASCII);
            requestWriter.Write(gumboPayload);
            requestWriter.Close();

            WebResponse webResponse = request.GetResponse();
            Stream webStream = webResponse.GetResponseStream();
            StreamReader responseReader = new StreamReader(webStream);
            string response = responseReader.ReadToEnd();
            responseReader.Close();

        }

        private WellActivityPeriod GetExistingWellActivityPeriod(int wellActivityPeriodId, string serverName, string apiKey, string accessKey)
        {
            try
            {
                string url = string.Format("https://{0}/api/wellActivityPeriod/{1}?apikey={2}&accesskey={3}", serverName, wellActivityPeriodId, apiKey, accessKey);
                url = url.Replace(" ", "%20");
                url = url.Replace("$", "%24");
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                WebResponse webResponse = request.GetResponse();
                Stream webStream = webResponse.GetResponseStream();
                StreamReader responseReader = new StreamReader(webStream);
                string response = responseReader.ReadToEnd();
                responseReader.Close();
                WellActivityPeriod tourSheetFormation = Json.Decode<WellActivityPeriod>(response);
                return tourSheetFormation;
            }
            catch (Exception e)
            {
                return null;
            }
        }

        private Well GetExistingWell(int wellId, string serverName, string apiKey, string accessKey)
        {
            try
            {
                string url = string.Format("https://{0}/api/well/{1}?apikey={2}&accesskey={3}", serverName, wellId, apiKey, accessKey);
                url = url.Replace(" ", "%20");
                url = url.Replace("$", "%24");
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                WebResponse webResponse = request.GetResponse();
                Stream webStream = webResponse.GetResponseStream();
                StreamReader responseReader = new StreamReader(webStream);
                string response = responseReader.ReadToEnd();
                responseReader.Close();
                Well well = Json.Decode<Well>(response);
                return well;
            }
            catch (Exception e)
            {
                return null;
            }
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        #region data class
        class WellActivityPeriod
        {
            public int wellActivityPeriodId { get; set; }
            public int wellId { get; set; }
            public int rigId { get; set; }
            public DateTime? startDateTime { get; set; }
            public DateTime? endDateTime { get; set; }
            public string rowCreatedBy { get; set; }
            public string rowChangedBy { get; set; }
            public DateTime? rowCreatedDate { get; set; }
            public DateTime? rowChangedDate { get; set; }

            public bool Apply(int _wellId, int _rigId, DateTime? _startDateTime, DateTime? _endDateTime,
                string currentUserId, StringBuilder logMessage)
            {
                bool ret = false;
                if (rowCreatedBy == null)
                {
                    rowCreatedBy = currentUserId;
                    ret = true;
                }
                if (rowCreatedDate == null)
                {
                    rowCreatedDate = DateTime.Now;
                    ret = true;
                }
                if (wellId != _wellId)
                {
                    logMessage.Append(" wellId has changed");
                    wellId = _wellId;
                    ret = true;
                }
                if (rigId != _rigId)
                {
                    logMessage.Append(" rigId has changed");
                    rigId = _rigId;
                    ret = true;
                }
                if (!DateCompare(startDateTime, _startDateTime))
                {
                    logMessage.Append(" startDateTime has changed");
                    startDateTime = _startDateTime.HasValue ? _startDateTime.Value.ToUniversalTime() : (DateTime?)null;
                    ret = true;
                }
                if (!DateCompare(endDateTime, _endDateTime))
                {
                    logMessage.Append(" endDateTime has changed");
                    endDateTime = _endDateTime.HasValue ? _endDateTime.Value.ToUniversalTime() : (DateTime?)null;
                    ret = true;
                }
                if (ret)
                {
                    startDateTime = _startDateTime.HasValue ? _startDateTime.Value.ToUniversalTime() : (DateTime?)null;
                    endDateTime = _endDateTime.HasValue ? _endDateTime.Value.ToUniversalTime() : (DateTime?)null;
                    rowChangedBy = currentUserId;
                    rowChangedDate = DateTime.Now;
                }
                return ret;
            }
        }

        class Well
        {
            public int wellId { get; set; }
            public string wellName { get; set; }
            public string uwi { get; set; }
            public int customerId { get; set; }
            public string jobNum { get; set; }
            public string wellNum { get; set; }
            public DateTime? spudDate { get; set; }
            public DateTime? rigReleaseDate { get; set; }
            public string provinceState { get; set; }
            public string country { get; set; }
            public double latitude { get; set; }
            public double longitude { get; set; }
            public int? currentRigId { get; set; }
            public string timeZone { get; set; }
            public bool activeInd { get; set; }
            public string rowCreatedBy { get; set; }
            public string rowChangedBy { get; set; }
            public DateTime? rowCreatedDate { get; set; }
            public DateTime? rowChangedDate { get; set; }
        }
        #endregion

        #region DateTimeConversion
        private static bool DateCompare(DateTime? dtm1, DateTime? dtm2)
        {
            if (dtm1.HasValue)
            {
                if (dtm2.HasValue)
                {
                    DateTime d1 = dtm1.Value;
                    DateTime d2 = dtm2.Value;
                    return d1 == d2;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                return !dtm2.HasValue;
            }
        }

        public DateTime? GetDateTime(string dateTimeVariableName, string timezoneVariableName)
        {
            Object dtmOValue = Dts.Variables[dateTimeVariableName].Value;
            if (dtmOValue == null)
            {
                return null;
            }
            String dtmSValue = dtmOValue.ToString();

            if (string.IsNullOrEmpty(dtmSValue))
            {
                return null;
            }

            DateTime convertedValue = Convert.ToDateTime(dtmSValue);

            if (convertedValue.Kind == DateTimeKind.Unspecified)
            {
                TimeZoneInfo tzInfo = TimeZoneInfo.FindSystemTimeZoneById((String)Dts.Variables[timezoneVariableName].Value);
                TimeSpan offset = tzInfo.GetUtcOffset(convertedValue);
                DateTime afterAdjustment = convertedValue.Subtract(offset);
                return new DateTime(afterAdjustment.Year, afterAdjustment.Month, afterAdjustment.Day, afterAdjustment.Hour, afterAdjustment.Minute, afterAdjustment.Second, DateTimeKind.Utc);
            }
            else
            {
                return convertedValue;
            }
        }

        #endregion

        public static string EncodeNonAsciiCharacters(string value)
        {
            return Regex.Replace(value, @"[^\x00-\x7F]", c => string.Format(@"\u{0:x4}", (int)c.Value[0]));
        }
    }
}]]></ProjectItem>
                  <ProjectItem
                    Name="Project"
                    Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_7fed0a6b76cc426d92dd3555f031b904</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_7fed0a6b76cc426d92dd3555f031b904</msb:DisplayName>
		<msb:ProjectId>{D6D16966-C03E-4AD9-9DCA-206E4E8EC4DF}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_7fed0a6b76cc426d92dd3555f031b904.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
                  <ProjectItem
                    Name="ST_7fed0a6b76cc426d92dd3555f031b904.csproj"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{CF3D4FEC-1E99-40BA-8986-FB7A953216CA}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_7fed0a6b76cc426d92dd3555f031b904</RootNamespace>
    <AssemblyName>ST_7fed0a6b76cc426d92dd3555f031b904</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Web.Helpers, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
      <DesignTime>True</DesignTime>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\10.0\InstallDir#\devenv.exe" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.settings"
                    Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Resources.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_7fed0a6b76cc426d92dd3555f031b904.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_7fed0a6b76cc426d92dd3555f031b904.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_7fed0a6b76cc426d92dd3555f031b904.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_7fed0a6b76cc426d92dd3555f031b904.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_7fed0a6b76cc426d92dd3555f031b904.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
                  <BinaryItem
                    Name="ST_7fed0a6b76cc426d92dd3555f031b904.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAOVy3FwAAAAAAAAAAOAAAiELAQsAAD4AAAAIAAAAAAAAjlwA
AAAgAAAAYAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACgAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAADRcAABXAAAAAGAAAAgEAAAAAAAAAAAAAAAAAAAA
AAAAAIAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAlDwAAAAgAAAAPgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAAgEAAAAYAAAAAYAAABAAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAIAAAAACAAAARgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAABw
XAAAAAAAAEgAAAACAAUASC0AAOwuAAABAAAAAAAAAJAsAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKA4AAAoqEzACAC0AAAABAAARfgEAAAQtIHIBAABw0AIA
AAIoDwAACm8QAAAKcxEAAAoKBoABAAAEfgEAAAQqGn4CAAAEKh4CgAIAAAQqGn4DAAAEKi5zBgAA
BoADAAAEKh4CKBQAAAoqChcqAAAbMAcAEwQAAAIAABFzFgAACgoWCwIoFwAACm8YAAAKcnMAAHBv
GQAACm8aAAAKpSUAAAEMBnKvAABwCIwlAAABbxsAAAomAigXAAAKbxgAAApyCQEAcG8ZAAAKbxoA
AAqlJQAAAQ0CKBcAAApvGAAACnJTAQBwbxkAAApvGgAACqUlAAABEwQCcpsBAHBy8wEAcCgNAAAG
EwUCcikCAHBy8wEAcCgNAAAGEwYCcn0CAHBy8wEAcCgNAAAGEwcCKBcAAApvGAAACnKtAgBwbxkA
AApvGgAACqUlAAABEwgJEQj+ARMJAigXAAAKbxgAAApyzQIAcG8ZAAAKbxoAAAp0JgAAARMKAigX
AAAKbxgAAApy9QIAcG8ZAAAKbxoAAAp0JgAAARMLAigXAAAKbxgAAApyFQMAcG8ZAAAKbxoAAAp0
JgAAARMMAigXAAAKbxgAAApyOwMAcG8ZAAAKbxoAAAp0JgAAARMNEQ0sHhENF40nAAABExkRGRYf
XJ0RGW8cAAAKKAEAACsTDX4EAAAELREU/gYQAAAGcx4AAAqABAAABH4EAAAEKB8AAAog8AwAACgg
AAAKcl0DAHAajQEAAAETGhEaFhEKohEaFwiMJQAAAaIRGhgRC6IRGhkRDKIRGighAAAKEw4RDnLd
AwBwcuEDAHBvIgAAChMOEQ5y6QMAcHLtAwBwbyIAAAoTDigjAAAKJgIIEQoRCxEMKAoAAAYTDxEP
LTIRCSwdBnL1AwBwbyQAAAomcyUAAAYTDxEPCG8TAAAGKx0GcikEAHBvJAAACibdxAEAAAZypwQA
cG8kAAAKJhEPCREEEQURBhENBm8kAAAGOeMAAAAYExA40QAAABEOKCUAAAp0LQAAARMRBnILBQBw
byQAAAomEQ8oJgAAChMSERFyUwUAcG8nAAAKERFyWwUAcG8oAAAKERIoDgAABhMSEREREm8pAAAK
am8qAAAKERFvKwAACigsAAAKcy0AAAoTExETERJvLgAAChETby8AAAoREW8wAAAKExQRFG8xAAAK
ExURFXMyAAAKExYRFm8zAAAKJhEWbzQAAAoWExDeLBMXERAXWRMQERAWMRoGcn0FAHARF281AAAK
KDYAAApvJAAACiYrAxEXet4AERAWPSf///8rDAZy3wUAcG8kAAAKJhEJLCsRD28aAAAGExsSGyg3
AAAKLRkSByg3AAAKLBACCREKEQsRDBENBigJAAAGAigXAAAKFm84AAAKBnIJBgBwbyQAAAomAigX
AAAKbzkAAAoWcjMGAHAGbzoAAAp+OwAAChYSAW88AAAK3kYTGAZySQYAcBEYbzUAAApvGwAACiYC
KBcAAApvOQAAChZyMwYAcAZvOgAACn47AAAKFm89AAAKJgIoFwAAChdvOAAACt4AKgBBNAAAAAAA
AHgCAAClAAAAHQMAACwAAAA2AAABAAAAAKsBAAAhAgAAzAMAAEYAAAA2AAABEzAFABMBAAADAAAR
AgMEBQ4EKAsAAAYKBhII/hUBAAAbEQhvNQAABgYoIwAACnM+AAAKb0sAAAYGDgVvRwAABnJ9BgBw
Go0BAAABEwkRCRYEohEJFwOMJQAAAaIRCRgFohEJGQ4EohEJKCEAAAoLB3LdAwBwcuEDAHBvIgAA
CgsHcukDAHBy7QMAcG8iAAAKCwcoJQAACnQtAAABDA4GcuEGAHBvJAAACiYGKCYAAAoNCHJTBQBw
bycAAAoIclsFAHBvKAAACggJbykAAApqbyoAAAoIbysAAAooLAAACnMtAAAKEwQRBAlvLgAAChEE
by8AAAoIbzAAAAoTBREFbzEAAAoTBhEGczIAAAoTBxEHbzMAAAomEQdvNAAACioAGzAEAJsAAAAE
AAARcl0DAHAajQEAAAETCBEIFgSiEQgXA4wlAAABohEIGAWiEQgZDgSiEQgoIQAACgoGct0DAHBy
4QMAcG8iAAAKCgZy6QMAcHLtAwBwbyIAAAoKBiglAAAKdC0AAAELB28wAAAKDAhvMQAACg0JczIA
AAoTBBEEbzMAAAoTBREEbzQAAAoRBSgCAAArEwYRBhMH3gYmFBMH3gARByoAARAAAAAAAACSkgAG
NgAAARswBACbAAAABQAAEXJ9BgBwGo0BAAABEwgRCBYEohEIFwOMJQAAAaIRCBgFohEIGQ4EohEI
KCEAAAoKBnLdAwBwcuEDAHBvIgAACgoGcukDAHBy7QMAcG8iAAAKCgYoJQAACnQtAAABCwdvMAAA
CgwIbzEAAAoNCXMyAAAKEwQRBG8zAAAKEwURBG80AAAKEQUoAwAAKxMGEQYTB94GJhQTB94AEQcq
AAEQAAAAAAAAkpIABjYAAAETMAIANwAAAAYAABEPACg3AAAKLCMPASg3AAAKLBgPAChAAAAKCg8B
KEAAAAoLBgcoQQAACioWKg8BKDcAAAoW/gEqABMwBwDBAAAABwAAEQIoFwAACm8YAAAKA28ZAAAK
bxoAAAoKBi0LEgb+FQEAABsRBioGbzoAAAoLByhCAAAKLAsSB/4VAQAAGxEHKgcoQwAACgwSAihE
AAAKLWsCKBcAAApvGAAACgRvGQAACm8aAAAKdCYAAAEoRQAACg0JCG9GAAAKEwQSAhEEKEcAAAoT
BRIFKEgAAAoSBShJAAAKEgUoSgAAChIFKEsAAAoSBShMAAAKEgUoTQAAChdzTgAACnM+AAAKKghz
PgAACipycjMHAHACb08AAAoWb1AAAAqMJQAAASg2AAAKKqYCckUHAHB+BQAABC0RFP4GEQAABnNR
AAAKgAUAAAR+BQAABChSAAAKKh4CKFMAAAoqHgJ7CQAABCoiAgN9CQAABCoeAnsKAAAEKiICA30K
AAAEKh4CewsAAAQqIgIDfQsAAAQqHgJ7DAAABCoiAgN9DAAABCoeAnsNAAAEKiICA30NAAAEKh4C
ew4AAAQqIgIDfQ4AAAQqHgJ7DwAABCoiAgN9DwAABCoeAnsQAAAEKiICA30QAAAEKh4CexEAAAQq
IgIDfREAAAQqAAAAEzACAIoBAAAIAAARFgoCKBwAAAYtCgIOBSgdAAAGFwoCKCAAAAYLEgEoNwAA
Ci0SAigjAAAKcz4AAAooIQAABhcKAigUAAAGAy4WDgZyXwcAcG8kAAAKJgIDKBUAAAYXCgIoFgAA
BgQuFg4GcocHAHBvJAAACiYCBCgXAAAGFwoCKBgAAAYFKAwAAAYtPQ4Gcq0HAHBvJAAACiYCDwMo
NwAACi0LEgL+FQEAABsIKxQPAyhAAAAKDRIDKFQAAApzPgAACigZAAAGFwoCKBoAAAYOBCgMAAAG
LT8OBnLjBwBwbyQAAAomAg8EKDcAAAotDBIE/hUBAAAbEQQrFQ8EKEAAAAoTBRIFKFQAAApzPgAA
CigbAAAGFwoGLHgCDwMoNwAACi0MEgb+FQEAABsRBisVDwMoQAAAChMHEgcoVAAACnM+AAAKKBkA
AAYCDwQoNwAACi0MEgj+FQEAABsRCCsVDwQoQAAAChMJEgkoVAAACnM+AAAKKBsAAAYCDgUoHwAA
BgIoIwAACnM+AAAKKCMAAAYGKh4CKA4AAAoqHgJ7EgAABCoiAgN9EgAABCoeAnsTAAAEKiICA30T
AAAEKh4CexQAAAQqIgIDfRQAAAQqHgJ7FQAABCoiAgN9FQAABCoeAnsWAAAEKiICA30WAAAEKh4C
excAAAQqIgIDfRcAAAQqHgJ7GAAABCoiAgN9GAAABCoeAnsZAAAEKiICA30ZAAAEKh4CexoAAAQq
IgIDfRoAAAQqHgJ7GwAABCoiAgN9GwAABCoeAnscAAAEKiICA30cAAAEKh4Cex0AAAQqIgIDfR0A
AAQqHgJ7HgAABCoiAgN9HgAABCoeAnsfAAAEKiICA30fAAAEKh4CeyAAAAQqIgIDfSAAAAQqHgJ7
IQAABCoiAgN9IQAABCoeAnsiAAAEKiICA30iAAAEKh4CeyMAAAQqIgIDfSMAAAQqHgJ7JAAABCoi
AgN9JAAABCoeAigOAAAKKgAAAAAAAAC0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMu
UmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJh
bCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRp
bWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAQlNKQgEAAQAAAAAADAAAAHY0LjAu
MzAzMTkAAAAABQBsAAAAFBAAACN+AACAEAAACBIAACNTdHJpbmdzAAAAAIgiAAAYCAAAI1VTAKAq
AAAQAAAAI0dVSUQAAACwKgAAPAQAACNCbG9iAAAAAAAAAAIAAAFXHaIJCQsAAAD6JTMAFgAAAQAA
AD8AAAAHAAAAJAAAAEwAAAA7AAAAVAAAAAIAAABnAAAACAAAAAQAAAAfAAAAPAAAAAEAAAABAAAA
BgAAAAEAAAADAAAAAwAAAAAACgABAAAAAAAGANkA0gAKAPUA4AAOAFUBLAEGAHEB0gAGAIcBdgEG
ALgBowEGAEMCNwIGAJ0C0gAGAKgC0gAGAOMJyQkGAA4K/AkGACUK/AkGAEIK/AkGAGEK/AkGAHoK
/AkGAJMK/AkGAK4K/AkGAMkK/AkGAOIK/AkGABsL+woGADsL+woGAGwLWQsGAIkL0gAGAI4L0gAG
ALIL/AkKAN4LyAsKAPcLyAsGAAwM+woOAC4MLAEGAH4MUAwKAI4MUAwKAKwMmAwKAOMMmAwOAC4N
LAESAIcNZw0SAJ8NZw0GALsN0gAGAM4N0gAGANUN0gAWAPgN7A0GAB4OAw4KADwOMQ4KAHgOMQ4K
AMAOMQ4KANIOMQ4aAPQO4Q4GAEIPOA8GAFoPNwIGAG0POA8GAHoPOA8KAJEPMQ4GALsPOA8GAMgP
OA8GAN0P0gAOAA8QLAEGAHgQ0gAGAIsQ0gAGAKEQ0gAGAMUQ0gAKAD0RHhEKAGQRHhEKAJoRHhEK
AKwRHhEAAAAAAQAAAAAAAQABAAAAEAAyADwABQABAAEAAAEQAGsAPAAJAAMABQABABAAdAB/AA0A
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
GQGoDXMBIQGxDXoBOQDBDX4BMQHaDYUBQQEsDowBCQHUAZ0BUQFQDqMBUQGNDqoBMQGiDrEBMQGp
DrgBSQCxDr4BOQC5DsMBYQHLDskBcQH5DtkBYQEAD7UAYQELD7UAMQEbD5UAYQEmD94BYQFJD+MB
gQFjD+kBiQHUAe8BkQGFD7UAkQGLDxsAYQGdD/kBmQGpD+MBoQHUAf8BqQHTD7EAqQGLDxsAsQHn
D7EAMQGiDgYCDADzDwUBEQEAEJkAEQEjEBMCCQAuELEAMQE3ENcAuQE9EBkCuQFNECQCDADUAXIC
cQFXEJYCDACxDdUCSQBeENoCMQFqEOkCwQGAEO4CSQCYEPQC0QGuEPoC0QHOEAEDSQDbEAkDSQDk
EJUASQDtEJUASQD3EJUASQD/EJUASQAIEZUASQATEZUASQDUARED8QGxDbEAMQGiEUUD6QHUAZ0B
+QGpDkoDGQDUARsASQCyEVMDCAAcAIsACAAgAJAAKQCTAEkBLgArAPUDLgA7APsDLgAjAPUDLgAz
AMwDLgAbAPUDLgBbABIELgBjABsELgBDAPUDLgALAIIDLgATAMwDQwBrAJAASQCTAEkBYQCbAJAA
gQCbAJAAgwCrAJAAoQCbAJAAIQGbAJAAQQGbAJAAYQGbAJAAgQGbAJAAoQGbAJAAwQGbAJAA4QGb
AJAAAAKbAJAAAQKbAJAAIAKbAJAAIQKbAJAAQAKbAJAAQQKbAJAAYAKbAJAAYQKbAJAAgAKbAJAA
gQKbAJAAoAKbAJAAoQKbAJAAwAKbAJAAwQKbAJAA4AKbAJAA4QKbAJAAAAObAJAAAQObAJAAIAOb
AJAAIQObAJAAQAObAJAAQQObAJAAYAObAJAAYQObAJAAgAObAJAAgQObAJAAoAObAJAAoQObAJAA
wAObAJAAwQObAJAA4AObAJAA4QObAJAAAASbAJAAAQSbAJAAIASbAJAAIQSbAJAAQASbAJAAQQSb
AJAAYASbAJAAYQSbAJAAgQSbAJAAwASbAJAA4ASbAJAAAAWbAJAAIAWbAJAAQAWbAJAAYAWbAJAA
gAWbAJAAoAWbAJAAwAWbAJAA4AWbAJAAAAabAJAAIAabAJAAQAabAJAAYAabAJAAgAabAJAAoAab
AJAAwAabAJAA4AabAJAAAAebAJAAIAebAJAAQAebAJAAYAebAJAAgAebAJAAoAebAJAAwAebAJAA
4AebAJAAAAibAJAAIAibAJAAQAibAJAAYAibAJAAgAibAJAAoAibAJAAwAibAJAA4AibAJAAAAmb
AJAAIAmbAJAAQAmbAJAAYAmbAJAAPgEtAngCogK+AuICHgNYAwIAAQADAAMABgAEAAcADQAAAIcB
LwAAAAYCNAAAACoCQgAAAD0F2gAAAFIF2gAAAFkF2gAAAF8F3gAAAG0F3gAAAHkF5wAAAIYF5wAA
AJMF3gAAAKIF3gAAAFIF2gAAAKcI5wAAALAI5wAAALQI2gAAAL8I5wAAAMYI5wAAAM4I3gAAANcI
3gAAAOYI5wAAAPQI5wAAAPwIGwEAAAUJGwEAAA8JHwEAABwJ5wAAACUJJwEAAHkF5wAAAIYF5wAA
AJMF3gAAAKIF3gACAAIAAwACAAMABQABAAQABQACAAUABwABABMACQACABIACQACABQACwABABUA
CwACABYADQABABcADQACABgADwABABkADwABABsAEQACABoAEQACABwAEwABAB0AEwACAB4AFQAB
AB8AFQACACAAFwABACEAFwACACIAGQABACMAGQACACYAGwABACcAGwACACgAHQABACkAHQACACoA
HwABACsAHwABAC0AIQACACwAIQACAC4AIwABAC8AIwACADAAJQABADEAJQACADIAJwABADMAJwAC
ADQAKQABADUAKQACADYAKwABADcAKwACADgALQABADkALQACADoALwABADsALwACADwAMQABAD0A
MQACAD4AMwABAD8AMwACAEAANQABAEEANQACAEIANwABAEMANwACAEQAOQABAEUAOQACAEYAOwAB
AEcAOwACAEgAPQABAEkAPQACAEoAPwABAEsAPwAMAgSAAAABAAAAohv6XAAAAAAAAH8AAAAEAAAA
AAAAAAAAAAABAMkAAAAAAAQAAAAAAAAAAAAAAAEA0gAAAAAACwAAAAAAAAAAAAAACgANAQAAAAAL
AAAAAAAAAAAAAAAKAEgNAAAAAAQAAAAAAAAAAAAAAAEA4A0AAAAAAQAAAAAAAAAAAAAA0AHhDgAA
AAAAAAAAAQAAAMIRAAAFAAQABgAEAAcABAA7AJkBfwCdAn8AuQIAAAAAADxNb2R1bGU+AFNUXzdm
ZWQwYTZiNzZjYzQyNmQ5MmRkMzU1NWYwMzFiOTA0LmRsbABSZXNvdXJjZXMAU1RfN2ZlZDBhNmI3
NmNjNDI2ZDkyZGQzNTU1ZjAzMWI5MDQuUHJvcGVydGllcwBTZXR0aW5ncwBTY3JpcHRNYWluAFNU
XzdmZWQwYTZiNzZjYzQyNmQ5MmRkMzU1NWYwMzFiOTA0AFNjcmlwdFJlc3VsdHMAV2VsbEFjdGl2
aXR5UGVyaW9kAFdlbGwAbXNjb3JsaWIAU3lzdGVtAE9iamVjdABTeXN0ZW0uQ29uZmlndXJhdGlv
bgBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sA
TWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBWU1RBUlRTY3JpcHRPYmpl
Y3RNb2RlbEJhc2UARW51bQBTeXN0ZW0uUmVzb3VyY2VzAFJlc291cmNlTWFuYWdlcgByZXNvdXJj
ZU1hbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBDdWx0dXJlSW5mbwByZXNvdXJjZUN1bHR1cmUALmN0
b3IAZ2V0X1Jlc291cmNlTWFuYWdlcgBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQBDdWx0dXJlAGRl
ZmF1bHRJbnN0YW5jZQBnZXRfRGVmYXVsdABEZWZhdWx0AE1haW4AU3lzdGVtLlRleHQAU3RyaW5n
QnVpbGRlcgBDbGVhck91dFJpZ1JlbGVhc2VEYXRlRm9yV2VsbABHZXRFeGlzdGluZ1dlbGxBY3Rp
dml0eVBlcmlvZABHZXRFeGlzdGluZ1dlbGwATnVsbGFibGVgMQBEYXRlVGltZQBEYXRlQ29tcGFy
ZQBHZXREYXRlVGltZQBFbmNvZGVOb25Bc2NpaUNoYXJhY3RlcnMAdmFsdWVfXwBTdWNjZXNzAEZh
aWx1cmUAZ2V0X3dlbGxBY3Rpdml0eVBlcmlvZElkAHNldF93ZWxsQWN0aXZpdHlQZXJpb2RJZABn
ZXRfd2VsbElkAHNldF93ZWxsSWQAZ2V0X3JpZ0lkAHNldF9yaWdJZABnZXRfc3RhcnREYXRlVGlt
ZQBzZXRfc3RhcnREYXRlVGltZQBnZXRfZW5kRGF0ZVRpbWUAc2V0X2VuZERhdGVUaW1lAGdldF9y
b3dDcmVhdGVkQnkAc2V0X3Jvd0NyZWF0ZWRCeQBnZXRfcm93Q2hhbmdlZEJ5AHNldF9yb3dDaGFu
Z2VkQnkAZ2V0X3Jvd0NyZWF0ZWREYXRlAHNldF9yb3dDcmVhdGVkRGF0ZQBnZXRfcm93Q2hhbmdl
ZERhdGUAc2V0X3Jvd0NoYW5nZWREYXRlAEFwcGx5ADx3ZWxsQWN0aXZpdHlQZXJpb2RJZD5rX19C
YWNraW5nRmllbGQAPHdlbGxJZD5rX19CYWNraW5nRmllbGQAPHJpZ0lkPmtfX0JhY2tpbmdGaWVs
ZAA8c3RhcnREYXRlVGltZT5rX19CYWNraW5nRmllbGQAPGVuZERhdGVUaW1lPmtfX0JhY2tpbmdG
aWVsZAA8cm93Q3JlYXRlZEJ5PmtfX0JhY2tpbmdGaWVsZAA8cm93Q2hhbmdlZEJ5PmtfX0JhY2tp
bmdGaWVsZAA8cm93Q3JlYXRlZERhdGU+a19fQmFja2luZ0ZpZWxkADxyb3dDaGFuZ2VkRGF0ZT5r
X19CYWNraW5nRmllbGQAd2VsbEFjdGl2aXR5UGVyaW9kSWQAd2VsbElkAHJpZ0lkAHN0YXJ0RGF0
ZVRpbWUAZW5kRGF0ZVRpbWUAcm93Q3JlYXRlZEJ5AHJvd0NoYW5nZWRCeQByb3dDcmVhdGVkRGF0
ZQByb3dDaGFuZ2VkRGF0ZQBnZXRfd2VsbE5hbWUAc2V0X3dlbGxOYW1lAGdldF91d2kAc2V0X3V3
aQBnZXRfY3VzdG9tZXJJZABzZXRfY3VzdG9tZXJJZABnZXRfam9iTnVtAHNldF9qb2JOdW0AZ2V0
X3dlbGxOdW0Ac2V0X3dlbGxOdW0AZ2V0X3NwdWREYXRlAHNldF9zcHVkRGF0ZQBnZXRfcmlnUmVs
ZWFzZURhdGUAc2V0X3JpZ1JlbGVhc2VEYXRlAGdldF9wcm92aW5jZVN0YXRlAHNldF9wcm92aW5j
ZVN0YXRlAGdldF9jb3VudHJ5AHNldF9jb3VudHJ5AGdldF9sYXRpdHVkZQBzZXRfbGF0aXR1ZGUA
Z2V0X2xvbmdpdHVkZQBzZXRfbG9uZ2l0dWRlAGdldF9jdXJyZW50UmlnSWQAc2V0X2N1cnJlbnRS
aWdJZABnZXRfdGltZVpvbmUAc2V0X3RpbWVab25lAGdldF9hY3RpdmVJbmQAc2V0X2FjdGl2ZUlu
ZAA8d2VsbE5hbWU+a19fQmFja2luZ0ZpZWxkADx1d2k+a19fQmFja2luZ0ZpZWxkADxjdXN0b21l
cklkPmtfX0JhY2tpbmdGaWVsZAA8am9iTnVtPmtfX0JhY2tpbmdGaWVsZAA8d2VsbE51bT5rX19C
YWNraW5nRmllbGQAPHNwdWREYXRlPmtfX0JhY2tpbmdGaWVsZAA8cmlnUmVsZWFzZURhdGU+a19f
QmFja2luZ0ZpZWxkADxwcm92aW5jZVN0YXRlPmtfX0JhY2tpbmdGaWVsZAA8Y291bnRyeT5rX19C
YWNraW5nRmllbGQAPGxhdGl0dWRlPmtfX0JhY2tpbmdGaWVsZAA8bG9uZ2l0dWRlPmtfX0JhY2tp
bmdGaWVsZAA8Y3VycmVudFJpZ0lkPmtfX0JhY2tpbmdGaWVsZAA8dGltZVpvbmU+a19fQmFja2lu
Z0ZpZWxkADxhY3RpdmVJbmQ+a19fQmFja2luZ0ZpZWxkAHdlbGxOYW1lAHV3aQBjdXN0b21lcklk
AGpvYk51bQB3ZWxsTnVtAHNwdWREYXRlAHJpZ1JlbGVhc2VEYXRlAHByb3ZpbmNlU3RhdGUAY291
bnRyeQBsYXRpdHVkZQBsb25naXR1ZGUAY3VycmVudFJpZ0lkAHRpbWVab25lAGFjdGl2ZUluZAB2
YWx1ZQBzZXJ2ZXJOYW1lAGFwaUtleQBhY2Nlc3NLZXkAY3VycmVudFVzZXJJZABsb2dNZXNzYWdl
AGR0bTEAZHRtMgBkYXRlVGltZVZhcmlhYmxlTmFtZQB0aW1lem9uZVZhcmlhYmxlTmFtZQBfd2Vs
bElkAF9yaWdJZABfc3RhcnREYXRlVGltZQBfZW5kRGF0ZVRpbWUAU3lzdGVtLlJ1bnRpbWUuVmVy
c2lvbmluZwBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1dGUAU3lzdGVtLlJlZmxlY3Rpb24AQXNzZW1i
bHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAEFzc2VtYmx5Q29u
ZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAQXNzZW1ibHlQcm9k
dWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJr
QXR0cmlidXRlAEFzc2VtYmx5Q3VsdHVyZUF0dHJpYnV0ZQBBc3NlbWJseVZlcnNpb25BdHRyaWJ1
dGUAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBDb21waWxhdGlvblJlbGF4YXRpb25z
QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAFN5c3RlbS5EaWFnbm9zdGlj
cwBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAFR5cGUAUnVudGltZVR5cGVIYW5kbGUAR2V0
VHlwZUZyb21IYW5kbGUAQXNzZW1ibHkAZ2V0X0Fzc2VtYmx5AFN5c3RlbS5Db21wb25lbnRNb2Rl
bABFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlU3RhdGUAQ29tcGlsZXJH
ZW5lcmF0ZWRBdHRyaWJ1dGUALmNjdG9yAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0
ZQBTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5Llg1MDlDZXJ0aWZpY2F0ZXMAWDUwOUNlcnRp
ZmljYXRlAFg1MDlDaGFpbgBTeXN0ZW0uTmV0LlNlY3VyaXR5AFNzbFBvbGljeUVycm9ycwA8TWFp
bj5iX18wAHBhcmFtMABwYXJhbTEAcGFyYW0yAHBhcmFtMwBSZW1vdGVDZXJ0aWZpY2F0ZVZhbGlk
YXRpb25DYWxsYmFjawBDUyQ8PjlfX0NhY2hlZEFub255bW91c01ldGhvZERlbGVnYXRlMQBTY3Jp
cHRPYmplY3RNb2RlbABnZXRfRHRzAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwBNaWNy
b3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lAFZhcmlhYmxlcwBnZXRfVmFyaWFibGVzAFZhcmlh
YmxlAGdldF9JdGVtAGdldF9WYWx1ZQBJbnQzMgBBcHBlbmRGb3JtYXQAU3RyaW5nAENoYXIAU3Bs
aXQAU3lzdGVtLkNvcmUAU3lzdGVtLkxpbnEARW51bWVyYWJsZQBTeXN0ZW0uQ29sbGVjdGlvbnMu
R2VuZXJpYwBJRW51bWVyYWJsZWAxAExhc3QAU3lzdGVtLk5ldABTZXJ2aWNlUG9pbnRNYW5hZ2Vy
AHNldF9TZXJ2ZXJDZXJ0aWZpY2F0ZVZhbGlkYXRpb25DYWxsYmFjawBTZWN1cml0eVByb3RvY29s
VHlwZQBzZXRfU2VjdXJpdHlQcm90b2NvbABGb3JtYXQAUmVwbGFjZQBnZXRfTm93AEFwcGVuZABX
ZWJSZXF1ZXN0AENyZWF0ZQBIdHRwV2ViUmVxdWVzdABTeXN0ZW0uV2ViLkhlbHBlcnMASnNvbgBF
bmNvZGUAc2V0X01ldGhvZABzZXRfQ29udGVudFR5cGUAZ2V0X0xlbmd0aABzZXRfQ29udGVudExl
bmd0aABTeXN0ZW0uSU8AU3RyZWFtAEdldFJlcXVlc3RTdHJlYW0ARW5jb2RpbmcAZ2V0X0FTQ0lJ
AFN0cmVhbVdyaXRlcgBUZXh0V3JpdGVyAFdyaXRlAENsb3NlAFdlYlJlc3BvbnNlAEdldFJlc3Bv
bnNlAEdldFJlc3BvbnNlU3RyZWFtAFN0cmVhbVJlYWRlcgBUZXh0UmVhZGVyAFJlYWRUb0VuZABF
eGNlcHRpb24AZ2V0X01lc3NhZ2UAZ2V0X0hhc1ZhbHVlAHNldF9UYXNrUmVzdWx0AEV2ZW50c09i
amVjdFdyYXBwZXIAZ2V0X0V2ZW50cwBUb1N0cmluZwBFbXB0eQBGaXJlSW5mb3JtYXRpb24ARmly
ZUVycm9yAERlY29kZQBvcF9FcXVhbGl0eQBJc051bGxPckVtcHR5AENvbnZlcnQAVG9EYXRlVGlt
ZQBEYXRlVGltZUtpbmQAZ2V0X0tpbmQAVGltZVpvbmVJbmZvAEZpbmRTeXN0ZW1UaW1lWm9uZUJ5
SWQAVGltZVNwYW4AR2V0VXRjT2Zmc2V0AFN1YnRyYWN0AGdldF9ZZWFyAGdldF9Nb250aABnZXRf
RGF5AGdldF9Ib3VyAGdldF9NaW51dGUAZ2V0X1NlY29uZABTeXN0ZW0uVGV4dC5SZWd1bGFyRXhw
cmVzc2lvbnMATWF0Y2gAPEVuY29kZU5vbkFzY2lpQ2hhcmFjdGVycz5iX18yAGMATWF0Y2hFdmFs
dWF0b3IAQ1MkPD45X19DYWNoZWRBbm9ueW1vdXNNZXRob2REZWxlZ2F0ZTMAQ2FwdHVyZQBnZXRf
Q2hhcnMAUmVnZXgAVG9Vbml2ZXJzYWxUaW1lAFNUXzdmZWQwYTZiNzZjYzQyNmQ5MmRkMzU1NWYw
MzFiOTA0LlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwAAAAAAcVMAVABfADcAZgBlAGQA
MABhADYAYgA3ADYAYwBjADQAMgA2AGQAOQAyAGQAZAAzADUANQA1AGYAMAAzADEAYgA5ADAANAAu
AFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAO1UAcwBlAHIAOgA6AGkA
bgB0AFcAZQBsAGwAQQBjAHQAaQB2AGkAdAB5AFAAZQByAGkAbwBkAEkAZAAAWVAAcgBvAGMAZQBz
AHMAaQBuAGcAIAB3AGUAbABsACAAYQBjAHQAaQB2AGkAdAB5ACAAcABlAHIAaQBvAGQAIAB3AGkA
dABoACAAaQBkACAAewAwAH0ALgAASVUAcwBlAHIAOgA6AGkAbgB0AFcAZQBsAGwASQBkAEYAbwBy
AFcAZQBsAGwAQQBjAHQAaQB2AGkAdAB5AFAAZQByAGkAbwBkAABHVQBzAGUAcgA6ADoAaQBuAHQA
UgBpAGcASQBkAEYAbwByAFcAZQBsAGwAQQBjAHQAaQB2AGkAdAB5AFAAZQByAGkAbwBkAABXVQBz
AGUAcgA6ADoAbwBiAGoAUwB0AGEAcgB0AEQAYQB0AGUAVABpAG0AZQBGAG8AcgBXAGUAbABsAEEA
YwB0AGkAdgBpAHQAeQBQAGUAcgBpAG8AZAAANVUAcwBlAHIAOgA6AHMAdAByAEMAbwBuAHYAZQBy
AHQAZQBkAFQAaQBtAGUAWgBvAG4AZQAAU1UAcwBlAHIAOgA6AG8AYgBqAEUAbgBkAEQAYQB0AGUA
VABpAG0AZQBGAG8AcgBXAGUAbABsAEEAYwB0AGkAdgBpAHQAeQBQAGUAcgBpAG8AZAAAL1UAcwBl
AHIAOgA6AG8AYgBqAFIAaQBnAFIAZQBsAGUAYQBzAGUARABhAHQAZQAAH1UAcwBlAHIAOgA6AGkA
bgB0AFcAZQBsAGwASQBkAAAnVQBzAGUAcgA6ADoAcwB0AHIAUwBlAHIAdgBlAHIATgBhAG0AZQAA
H1UAcwBlAHIAOgA6AHMAdAByAEEAcABpAEsAZQB5AAAlVQBzAGUAcgA6ADoAcwB0AHIAQQBjAGMA
ZQBzAHMASwBlAHkAACFTAHkAcwB0AGUAbQA6ADoAVQBzAGUAcgBOAGEAbQBlAAB/aAB0AHQAcABz
ADoALwAvAHsAMAB9AC8AYQBwAGkALwB3AGUAbABsAEEAYwB0AGkAdgBpAHQAeQBQAGUAcgBpAG8A
ZAAvAHsAMQB9AD8AYQBwAGkAawBlAHkAPQB7ADIAfQAmAGEAYwBjAGUAcwBzAGsAZQB5AD0AewAz
AH0AAAMgAAAHJQAyADAAAAMkAAAHJQAyADQAADMgAE4AbwB0ACAAZgBvAHUAbgBkACAALQAgAHcA
aQBsAGwAIABpAG4AcwBlAHIAdAAuAAF9IABOAG8AdAAgAGYAbwB1AG4AZAAgAGIAdQB0ACAAdABo
AGkAcwAgAGkAcwAgAGEAIAB3AGEAcAAgAGYAbwByACAAYQAgAGQAaQBmAGYAZQByAGUAbgB0ACAA
dwBlAGwAbAAgAC0AIAB3AGkAbABsACAAZQB4AGkAdAAuAAFjIABFAG4AdABpAHQAeQAgAGYAbwB1
AG4AZAAgAC0AIAB3AGkAbABsACAAYwBoAGUAYwBrACAAaQBmACAAdQBwAGQAYQB0AGUAIABpAHMA
IAByAGUAcQB1AGkAcgBlAGQALgABRyAAQQB0AHQAZQBtAHAAdABpAG4AZwAgAHcAcgBpAHQAZQAg
AHQAbwAgAEQAYQB0AGEARwB1AG0AYgBvACAAQQBQAEkALgAAB1AAVQBUAAAhYQBwAHAAbABpAGMA
YQB0AGkAbwBuAC8AagBzAG8AbgAAYSAASABUAFQAUAAgAHAAdQB0ACAAZgBhAGkAbABlAGQAIAB3
AGkAdABoACAAZQB4AGMAZQBwAHQAaQBvAG4AIAB7ADAAfQAuACAAVwBpAGwAbAAgAHIAZQB0AHIA
eQAuAAApIABOAG8AIAB1AHAAZABhAHQAZQAgAHIAZQBxAHUAaQByAGUAZAAuAAApIAAgAFIAZQB0
AHUAcgBuAGkAbgBnACAAUwB1AGMAYwBlAHMAcwAuAAAVRwB1AG0AYgBvACAAUwBTAEkAUwAAMyAA
IABFAG4AYwBvAHUAbgB0AGUAcgBlAGQAIABlAHIAcgBvAHIAOgAgAHsAMAB9AC4AAGNoAHQAdABw
AHMAOgAvAC8AewAwAH0ALwBhAHAAaQAvAHcAZQBsAGwALwB7ADEAfQA/AGEAcABpAGsAZQB5AD0A
ewAyAH0AJgBhAGMAYwBlAHMAcwBrAGUAeQA9AHsAMwB9AABRIABBAHQAdABlAG0AcAB0AGkAbgBn
ACAAdwByAGkAdABlACAAdwBlAGwAbAAgAHQAbwAgAEQAYQB0AGEARwB1AG0AYgBvACAAQQBQAEkA
LgAAEVwAdQB7ADAAOgB4ADQAfQAAGVsAXgBcAHgAMAAwAC0AXAB4ADcARgBdAAEnIAB3AGUAbABs
AEkAZAAgAGgAYQBzACAAYwBoAGEAbgBnAGUAZAAAJSAAcgBpAGcASQBkACAAaABhAHMAIABjAGgA
YQBuAGcAZQBkAAA1IABzAHQAYQByAHQARABhAHQAZQBUAGkAbQBlACAAaABhAHMAIABjAGgAYQBu
AGcAZQBkAAAxIABlAG4AZABEAGEAdABlAFQAaQBtAGUAIABoAGEAcwAgAGMAaABhAG4AZwBlAGQA
AAAAACll2JXaA7tBhs4vG29+8Z0ACLd6XFYZNOCJCImEXc2AgMyRAwYSFQMGEhkDIAABBAAAEhUE
AAASGQUAAQESGQQIABIVBAgAEhkDBhIMBAAAEgwECAASDAogBgEIDg4ODhIdCCAEEhgIDg4OCCAE
EhwIDg4ODwACAhURIQERJRURIQERJQogAhURIQERJQ4OBAABDg4CBggDBhEUBAAAAAAEAQAAAAMg
AAgEIAEBCAggABURIQERJQkgAQEVESEBESUDIAAOBCABAQ4UIAYCCAgVESEBESUVESEBESUOEh0H
BhURIQERJQIGDgMoAAgIKAAVESEBESUDKAAOAyAADQQgAQENByAAFREhAQgIIAEBFREhAQgDIAAC
BCABAQICBg0GBhURIQEIAgYCAygADQcoABURIQEIAygAAgYAARJdEWEEIAASZQYgAgEOEmUEBwES
FQUgAQERbQgBAAIAAAAAAAMAAAELAAQCHBJ5En0RgIEEBhKAhQUgABKAiQUgABKAjQYgARKAkRwD
IAAcBiACEh0OHAYgAR0OHQMMEAEBHgAVEoClAR4AAwoBDgUgAgEcGAYAAQESgIUGAAEBEYCtBgAC
Dg4dHAUgAg4ODgQAABElBSABEh0OBgABEoCxDggxvzhWrTZONQQAAQ4cBCABAQoFIAASgL0FAAAS
gMEJIAIBEoC9EoDBBSAAEoDNBiABARKAvQUAAg4OHAYVESEBESUFIAASgN0KIAYBCA4ODggQAggg
BQIIDg4OCEQHHBIdAggICBURIQERJRURIQERJRURIQERJQgCDg4ODg4SGAgSgLUOEoDFEoDNEoC9
EoDREoDZEoDZHQMdHBURIQERJQUgAQETAB0HChIcDhKAtQ4SgMUSgM0SgL0SgNEVESEBESUdHAYQ
AQEeAA4ECgESGBYHCQ4SgLUSgM0SgL0SgNEOEhgSGB0cBAoBEhwWBwkOEoC1EoDNEoC9EoDRDhIc
EhwdHAQgABMABwACAhElESUGBwIRJRElBAABAg4FAAERJQ4FIAARgOUGAAESgOkOByABEYDtESUH
IAERJRGA7QwgBwEICAgICAgRgOUaBwgcDhElEoDpEYDtESUVESEBESUVESEBESUGAAEOEoDxBAYS
gPUEIAEDCAgAAw4ODhKA9QQgABElKQcKAhURIQERJRURIQERJRElFREhARElESUVESEBESURJRUR
IQERJRElSQEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC41AQBUDhRGcmFtZXdvcmtEaXNwbGF5
TmFtZRIuTkVUIEZyYW1ld29yayA0LjUoAQAjU1RfN2ZlZDBhNmI3NmNjNDI2ZDkyZGQzNTU1ZjAz
MWI5MDQAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAxOQAACAEACAAAAAAAHgEAAQBUAhZXcmFw
Tm9uRXhjZXB0aW9uVGhyb3dzAQAAXFwAAAAAAAAAAAAAflwAAAAgAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAHBcAAAAAAAAAAAAAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUA
IAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAAgAAAAAAAAAAA
AAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhgAACwAwAAAAAAAAAAAACw
AzQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAAAAEA+lyiGwAA
AQD6XKIbPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBsAGUASQBu
AGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAEEAMAAAEAUwB0AHIA
aQBuAGcARgBpAGwAZQBJAG4AZgBvAAAA7AIAAAEAMAAwADAAMAAwADQAYgAwAAAAcAAkAAEARgBp
AGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABfADcAZgBlAGQAMABhADYAYgA3ADYA
YwBjADQAMgA2AGQAOQAyAGQAZAAzADUANQA1AGYAMAAzADEAYgA5ADAANAAAAEAADwABAEYAaQBs
AGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA3ADAANwA0AC4AMgAzADgAMAAyAAAAAABwACgA
AQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAVABfADcAZgBlAGQAMABhADYAYgA3ADYAYwBj
ADQAMgA2AGQAOQAyAGQAZAAzADUANQA1AGYAMAAzADEAYgA5ADAANAAuAGQAbABsAAAASAASAAEA
TABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAAIAAy
ADAAMQA5AAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAVABfADcA
ZgBlAGQAMABhADYAYgA3ADYAYwBjADQAMgA2AGQAOQAyAGQAZAAzADUANQA1AGYAMAAzADEAYgA5
ADAANAAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwA3AGYA
ZQBkADAAYQA2AGIANwA2AGMAYwA0ADIANgBkADkAMgBkAGQAMwA1ADUANQBmADAAMwAxAGIAOQAw
ADQAAABEAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADcAMAA3ADQA
LgAyADMAOAAwADIAAAAAAEgADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAx
AC4AMAAuADcAMAA3ADQALgAyADMAOAAwADIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAMAAAAkDwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
                </ScriptProject>
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Well Loop\Well Activity Period Loop.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:DTSID="{25301B3A-5185-4BF6-9BDD-22CD5194D163}"
              DTS:From="Package\Well Loop\Well Activity Period Loop\C# Script to Call Data Gumbo Well Activity Period API"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\Well Loop\Well Activity Period Loop\Append to WAP ID List" />
          </DTS:PrecedenceConstraints>
          <DTS:ForEachVariableMappings>
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{C721C25E-5AF9-4E45-8E5B-A73D20F9FE26}"
              DTS:ObjectName="{C721C25E-5AF9-4E45-8E5B-A73D20F9FE26}"
              DTS:ValueIndex="0"
              DTS:VariableName="User::intWellIdForWellActivityPeriod" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{81CF5D95-2EE4-4EBC-9839-BEFCC63F5961}"
              DTS:ObjectName="{81CF5D95-2EE4-4EBC-9839-BEFCC63F5961}"
              DTS:ValueIndex="1"
              DTS:VariableName="User::intRigIdForWellActivityPeriod" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{AC6865C8-E6F3-4E54-88DF-E1187EC89869}"
              DTS:ObjectName="{AC6865C8-E6F3-4E54-88DF-E1187EC89869}"
              DTS:ValueIndex="2"
              DTS:VariableName="User::intWellActivityPeriodId" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{B59AE37D-8B17-4D97-82C1-6B2A78B51EC6}"
              DTS:ObjectName="{B59AE37D-8B17-4D97-82C1-6B2A78B51EC6}"
              DTS:ValueIndex="3"
              DTS:VariableName="User::objStartDateTimeForWellActivityPeriod" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{80A4E706-19A9-4D76-9C0B-1E3B7BA1D719}"
              DTS:ObjectName="{80A4E706-19A9-4D76-9C0B-1E3B7BA1D719}"
              DTS:ValueIndex="4"
              DTS:VariableName="User::objEndDateTimeForWellActivityPeriod" />
          </DTS:ForEachVariableMappings>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Well Loop\Well Activity Period Query"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{7DA4FE8E-966B-4CE2-92F1-EE43E03F4BEB}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Well Activity Period Query"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="3">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{B09DFF4B-1666-40D6-850C-21EC437987D1}"
              SQLTask:SqlStatementSource="exec dbo.spGetWellActivityPeriods ?;&#xA;"
              SQLTask:ResultType="ResultSetType_Rowset" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ResultBinding
                SQLTask:ResultName="0"
                SQLTask:DtsVariableName="User::objWellActivityPeriodList" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="User::intWellId"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Well Loop\Well Predecessor Container"
          DTS:CreationName="STOCK:SEQUENCE"
          DTS:Description="Sequence Container"
          DTS:DTSID="{dfd5128c-a721-4609-ae17-304d40d0b238}"
          DTS:ExecutableType="STOCK:SEQUENCE"
          DTS:LocaleID="-1"
          DTS:ObjectName="Well Predecessor Container">
          <DTS:Variables>
            <DTS:Variable
              DTS:CreationName=""
              DTS:DTSID="{69D3BFFA-32E9-4790-A4E3-3B4AE4C06E5B}"
              DTS:IncludeInDebugDump="2345"
              DTS:Namespace="User"
              DTS:ObjectName="strParentCustomerName">
              <DTS:VariableValue
                DTS:DataType="8"
                xml:space="preserve"></DTS:VariableValue>
            </DTS:Variable>
          </DTS:Variables>
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\Well Loop\Well Predecessor Container\BlackGold Customer Query"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Get Customers"
              DTS:DTSID="{510c40fd-a0e8-475d-b072-5541300d8d18}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="BlackGold Customer Query"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="1">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{B09DFF4B-1666-40D6-850C-21EC437987D1}"
                  SQLTask:BypassPrepare="False"
                  SQLTask:SqlStatementSource="select CustomerId, CustomerName, ParentCustomerID, ba.BAName as ParentCustomerName from &#xA;(&#xA;select  &#xA;       ba.BusinessAssociateID as CustomerID&#xA;      ,ba.BAName as CustomerName&#xA;      ,isnull(baa.Alias_BusinessAssociateID, ba.BusinessAssociateId) as ParentCustomerID&#xA;   ,w.wellid&#xA;  from Well w&#xA;       inner join BusinessAssociate ba on w.Operator_BusinessAssociateID=ba.BusinessAssociateID&#xA;       left outer join BA_Alias baa on ba.BusinessAssociateID=baa.BusinessAssociate_BusinessAssociateID&#xA;where w.wellid = ?&#xA;union&#xA;select  &#xA;       ba.BusinessAssociateID as CustomerID&#xA;      ,ba.BAName as CustomerName&#xA;      ,isnull(baa.Alias_BusinessAssociateID, ba.BusinessAssociateID) as ParentCustomerID&#xA;   ,wdp.well_wellid&#xA;  from WellDrillPeriod wdp&#xA;       inner join BusinessAssociate ba on wdp.Operator_BusinessAssociateID=ba.BusinessAssociateID&#xA;       left outer join BA_Alias baa on ba.BusinessAssociateID=baa.BusinessAssociate_BusinessAssociateID&#xA;where wdp.well_wellid = ?&#xA;) qry&#xA;inner join BusinessAssociate ba on ParentCustomerID = ba.BusinessAssociateID&#xA;union&#xA;select -1, 'Ensign', -1, 'Ensign'"
                  SQLTask:ResultType="ResultSetType_Rowset" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="0"
                    SQLTask:DtsVariableName="User::objCustomerList" />
                  <SQLTask:ParameterBinding
                    SQLTask:ParameterName="0"
                    SQLTask:DtsVariableName="User::intWellId"
                    SQLTask:ParameterDirection="Input"
                    SQLTask:DataType="3"
                    SQLTask:ParameterSize="-1" />
                  <SQLTask:ParameterBinding
                    SQLTask:ParameterName="1"
                    SQLTask:DtsVariableName="User::intWellId"
                    SQLTask:ParameterDirection="Input"
                    SQLTask:DataType="3"
                    SQLTask:ParameterSize="-1" />
                </SQLTask:SqlTaskData>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Well Loop\Well Predecessor Container\BlackGold Rig Query"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Get Rigs"
              DTS:DTSID="{6951edb8-ff4e-4ee8-8100-bbd991a971f9}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="BlackGold Rig Query"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="2">
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{B09DFF4B-1666-40D6-850C-21EC437987D1}"
                  SQLTask:BypassPrepare="False"
                  SQLTask:SqlStatementSource="select distinct EquipmentId as RigId, cast(ReferenceNum as varchar(50)) as RigName  &#xA;from equipment e inner join rCatEquipGroup rceg on e.EquipmentGroup_rCatEquipGroupID = rceg.rCatEquipGroupID&#xA;where e.Source = 'Manual'&#xA;and rceg.ShortName = 'Rig'&#xA;and e.ActiveInd = 1&#xA;and e.EquipmentId = ?&#xA;"
                  SQLTask:ResultType="ResultSetType_Rowset" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="0"
                    SQLTask:DtsVariableName="User::objRigList" />
                  <SQLTask:ParameterBinding
                    SQLTask:ParameterName="0"
                    SQLTask:DtsVariableName="User::intRigIdForWell"
                    SQLTask:ParameterDirection="Input"
                    SQLTask:DataType="3"
                    SQLTask:ParameterSize="-1" />
                </SQLTask:SqlTaskData>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Well Loop\Well Predecessor Container\Customer Loop"
              DTS:CreationName="STOCK:FOREACHLOOP"
              DTS:Description="Foreach Loop Container"
              DTS:DTSID="{8b20473a-2c2a-4c85-9ef3-10d82e3125fa}"
              DTS:ExecutableType="STOCK:FOREACHLOOP"
              DTS:LocaleID="-1"
              DTS:ObjectName="Customer Loop">
              <DTS:ForEachEnumerator
                DTS:CreationName="Microsoft.SqlServer.Dts.Runtime.Enumerators.ADO.ForEachADOEnumerator, Microsoft.SqlServer.ForEachADOEnumerator, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
                DTS:DTSID="{cfe73956-d808-4002-93f7-04e1416ca7d7}"
                DTS:ObjectName="{7B6988C8-CC25-4F6B-B737-650B82BC4ACB}">
                <DTS:ObjectData>
                  <FEEADO
                    EnumType="EnumerateRowsInFirstTable"
                    VarName="User::objCustomerList" />
                </DTS:ObjectData>
              </DTS:ForEachEnumerator>
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:Executables>
                <DTS:Executable
                  DTS:refId="Package\Well Loop\Well Predecessor Container\Customer Loop\C# Script to Call Data Gumbo Customer API"
                  DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
                  DTS:Description="Script Task"
                  DTS:DTSID="{2563366b-0cf9-456d-9f46-0f7a1579cfff}"
                  DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
                  DTS:LocaleID="-1"
                  DTS:ObjectName="C# Script to Call Data Gumbo Customer API"
                  DTS:ThreadHint="1">
                  <DTS:Variables />
                  <DTS:LoggingOptions
                    DTS:FilterKind="0" />
                  <DTS:ObjectData>
                    <ScriptProject
                      Name="ST_a7204bf88ee44ec78282428c6cc2fc84"
                      VSTAMajorVersion="3"
                      VSTAMinorVersion="0"
                      Language="CSharp"
                      ReadOnlyVariables="User::strParentCustomerName,User::intCustomerID,User::intParentCustomerID,User::strAccessKey,User::strApiKey,User::strCustomerName,User::strEnv,User::strServerName,System::UserName">
                      <ProjectItem
                        Name="Properties\Resources.resx"
                        Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
                      <ProjectItem
                        Name="ST_a7204bf88ee44ec78282428c6cc2fc84.csproj"
                        Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?><Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"><PropertyGroup><ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids><Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration><Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform><ProductVersion>8.0.30703</ProductVersion><SchemaVersion>2.0</SchemaVersion><ProjectGuid>{1F456855-684C-494A-9DF5-92FCC350ECD7}</ProjectGuid><OutputType>Library</OutputType><AppDesignerFolder>Properties</AppDesignerFolder><RootNamespace>ST_14c04acc7f3f4db784693c50b94f4064</RootNamespace><AssemblyName>ST_a7204bf88ee44ec78282428c6cc2fc84</AssemblyName><TargetFrameworkVersion>v4.5</TargetFrameworkVersion><FileAlignment>512</FileAlignment><ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch><TargetFrameworkProfile /></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Debug' "><DebugSymbols>true</DebugSymbols><DebugType>full</DebugType><Optimize>false</Optimize><OutputPath>.\bin\Debug\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>DEBUG;TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel><Prefer32Bit>false</Prefer32Bit></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Release' "><DebugSymbols>false</DebugSymbols><Optimize>true</Optimize><OutputPath>.\bin\Release\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel><Prefer32Bit>false</Prefer32Bit></PropertyGroup><ItemGroup><Reference Include="System" /><Reference Include="System.Data" /><Reference Include="System.Web.Helpers, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL" /><Reference Include="System.Windows.Forms" /><Reference Include="System.Xml" /><Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /><Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /></ItemGroup><ItemGroup><AppDesigner Include="Properties\" /><Compile Include="Properties\AssemblyInfo.cs"><SubType>Code</SubType></Compile><EmbeddedResource Include="Properties\Resources.resx"><Generator>ResXFileCodeGenerator</Generator><LastGenOutput>Resources.Designer.cs</LastGenOutput></EmbeddedResource><Compile Include="Properties\Resources.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Resources.resx</DependentUpon><DesignTime>True</DesignTime></Compile><None Include="packages.config" /><None Include="Properties\Settings.settings"><Generator>SettingsSingleFileGenerator</Generator><LastGenOutput>Settings.Designer.cs</LastGenOutput></None><Compile Include="Properties\Settings.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Settings.settings</DependentUpon><DesignTimeSharedInput>True</DesignTimeSharedInput></Compile><Compile Include="ScriptMain.cs"><SubType>Code</SubType></Compile></ItemGroup><!-- Include the build rules for a C# project.--><Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /><ProjectExtensions><VisualStudio><FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}"><ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\10.0\InstallDir#\devenv.exe" /><Host Name="ScriptTask" /><ProjectClient><HostIdentifier>SSIS_ST110</HostIdentifier></ProjectClient></FlavorProperties></VisualStudio></ProjectExtensions></Project>]]></ProjectItem>
                      <ProjectItem
                        Name="Properties\Settings.Designer.cs"
                        Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_14c04acc7f3f4db784693c50b94f4064.Properties.Settings.get_Default():ST_14c04acc7f3f4db784693c50b94f4064.Properties.Sett" +
    "ings")]

namespace ST_14c04acc7f3f4db784693c50b94f4064.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
                      <ProjectItem
                        Name="ScriptMain.cs"
                        Encoding="UTF8"><![CDATA[using System.Net;
using System.IO;
using System.Text;
using System.Web;
using System.Web.Helpers;
using System.Linq;
using System.Text.RegularExpressions;

#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion

namespace ST_14c04acc7f3f4db784693c50b94f4064
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        public static readonly string pbiChevronUserId = "chevron.api@esiAzure.com";
        public static readonly string pbiChevronPassword = "J&oWMVh92LIb";
        public static readonly string pbiShellUserId = "shell.api@esiAzure.com";
        public static readonly string pbiShellPassword = "Quq83501";
        public static readonly string pbiXtoEnergyUserId = "xto.api@esiAzure.com";
        public static readonly string pbiXtoEnergyPassword = "Yun11122";
        public static readonly string pbiMurphyOilUserId = "murphy.api@esiAzure.com";
        public static readonly string pbiMurphyOilPassword = "Quv81846";

        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            StringBuilder logMessage = new StringBuilder();
            bool fireAgain = false;
            int customerId = (int)Dts.Variables["User::intCustomerID"].Value;
            logMessage.AppendFormat("Processing customer with id {0}.", customerId);
            string customerName = (String)Dts.Variables["User::strCustomerName"].Value;
            int parentCustomerId = (int)Dts.Variables["User::intParentCustomerID"].Value;
            string parentCustomerName = (String)Dts.Variables["User::strParentCustomerName"].Value;
            string serverName = (String)Dts.Variables["User::strServerName"].Value;
            string apiKey = (String)Dts.Variables["User::strApiKey"].Value;
            string accessKey = (String)Dts.Variables["User::strAccessKey"].Value;
            string strEnv = (String)Dts.Variables["User::strEnv"].Value;
            string currentUserId = (String)Dts.Variables["System::UserName"].Value;

            bool isUat = (strEnv != null) && (strEnv == "UAT");

            //string pbiApplicationId = null;
            //string pbiWorkspaceId = null;
            //string pbiUser = null;
            //string pbiPassword = null;

            //if (customerName != null && customerName.ToUpper() == "SHELL")
            //{
            //    pbiApplicationId = "95081d8b-bc10-4045-b302-49d0db2b99d3";
            //    pbiWorkspaceId = "c78e8ea1-acdc-411b-959d-a0d2fd0ba84d";
            //    pbiUser = pbiShellUserId;
            //    pbiPassword = pbiShellPassword;
            //}
            //else if (customerName != null && ((customerName.ToUpper() == "CHEVRON")))
            //{
            //    pbiApplicationId = "95081d8b-bc10-4045-b302-49d0db2b99d3";
            //    pbiWorkspaceId = "fd4880d0-5311-4c85-9453-749624631e37";
            //    pbiUser = pbiChevronUserId;
            //    pbiPassword = pbiChevronPassword;
            //}
            //else if (customerName != null && (customerName.ToUpper().Contains("XTO")))
            //{
            //    pbiApplicationId = "95081d8b-bc10-4045-b302-49d0db2b99d3";
            //    pbiWorkspaceId = "fd4880d0-5311-4c85-9453-749624631e37";
            //    pbiUser = pbiXtoEnergyUserId;
            //    pbiPassword = pbiXtoEnergyPassword;
            //}
            //else if (customerName != null && (customerName.ToUpper().Contains("MURPHY")))
            //{
            //    pbiApplicationId = "95081d8b-bc10-4045-b302-49d0db2b99d3";
            //    pbiWorkspaceId = "fd4880d0-5311-4c85-9453-749624631e37";
            //    pbiUser = pbiMurphyOilUserId;
            //    pbiPassword = pbiMurphyOilPassword;
            //}
            //else if (customerId == -1)
            //{
            //    pbiApplicationId = "95081d8b-bc10-4045-b302-49d0db2b99d3";
            //    pbiWorkspaceId = "fd4880d0-5311-4c85-9453-749624631e37";
            //    pbiUser = pbiChevronUserId;
            //    pbiPassword = pbiChevronPassword;
            //}

            if (currentUserId != null)
            {
                currentUserId = currentUserId.Split('\\').Last();
            }

            ServicePointManager.ServerCertificateValidationCallback = delegate { return true; };
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls | SecurityProtocolType.Ssl3;

            try
            {
                if (parentCustomerId != customerId)
                {
                    Customer parentCustomer = GetExistingCustomer(parentCustomerId, serverName, apiKey, accessKey);
                    if (parentCustomer == null)
                    {
                        int retries = 2;
                        while (retries > 0)
                        {
                            try
                            {
                                string url = string.Format("https://{0}/api/customer/{1}?apikey={2}&accesskey={3}", serverName, parentCustomerId, apiKey, accessKey);
                                url = url.Replace(" ", "%20");
                                url = url.Replace("$", "%24");

                                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                                logMessage.Append(" Attempting write to DataGumbo API.");
                                parentCustomer = new Customer();
                                parentCustomer.customerId = parentCustomerId;

                                //if (parentCustomer.customerName != null && parentCustomer.customerName.ToUpper() == "SHELL")
                                //{
                                //    pbiApplicationId = "95081d8b-bc10-4045-b302-49d0db2b99d3";
                                //    pbiWorkspaceId = "c78e8ea1-acdc-411b-959d-a0d2fd0ba84d";
                                //    pbiUser = pbiShellUserId;
                                //    pbiPassword = pbiShellPassword;
                                //}
                                //else if (parentCustomer.customerName != null && parentCustomer.customerName.ToUpper() == "CHEVRON")
                                //{
                                //    pbiApplicationId = "95081d8b-bc10-4045-b302-49d0db2b99d3";
                                //    pbiWorkspaceId = "fd4880d0-5311-4c85-9453-749624631e37";
                                //    pbiUser = pbiChevronUserId;
                                //    pbiPassword = pbiChevronPassword;
                                //}
                                //else if (parentCustomer.customerName != null && parentCustomer.customerName.ToUpper().Contains("XTO"))
                                //{
                                //    pbiApplicationId = "95081d8b-bc10-4045-b302-49d0db2b99d3";
                                //    pbiWorkspaceId = "fd4880d0-5311-4c85-9453-749624631e37";
                                //    pbiUser = pbiXtoEnergyUserId;
                                //    pbiPassword = pbiXtoEnergyPassword;
                                //}
                                //else if (parentCustomer.customerName != null && parentCustomer.customerName.ToUpper().Contains("MURPHY"))
                                //{
                                //    pbiApplicationId = "95081d8b-bc10-4045-b302-49d0db2b99d3";
                                //    pbiWorkspaceId = "fd4880d0-5311-4c85-9453-749624631e37";
                                //    pbiUser = pbiMurphyOilUserId;
                                //    pbiPassword = pbiMurphyOilPassword;
                                //}
                                //else if (customerId == -1)
                                //{
                                //    pbiApplicationId = "95081d8b-bc10-4045-b302-49d0db2b99d3";
                                //    pbiWorkspaceId = "fd4880d0-5311-4c85-9453-749624631e37";
                                //    pbiUser = pbiChevronUserId;
                                //    pbiPassword = pbiChevronPassword;
                                //}

                                parentCustomer.Apply(parentCustomerName, true, parentCustomerId, currentUserId);
                                string gumboPayload = Json.Encode(parentCustomer);

                                request.Method = "PUT";
                                request.ContentType = "application/json";

                                gumboPayload = EncodeNonAsciiCharacters(gumboPayload);

                                request.ContentLength = gumboPayload.Length;
                                StreamWriter requestWriter = new StreamWriter(request.GetRequestStream(), System.Text.Encoding.ASCII);
                                requestWriter.Write(gumboPayload);
                                requestWriter.Close();

                                WebResponse webResponse = request.GetResponse();
                                Stream webStream = webResponse.GetResponseStream();
                                StreamReader responseReader = new StreamReader(webStream);
                                string response = responseReader.ReadToEnd();
                                responseReader.Close();
                                retries = 0; // indicate success
                            }
                            catch (Exception e)
                            {
                                retries--;
                                if (retries > 0)
                                {
                                    logMessage.Append(string.Format(" HTTP put failed with exception {0}. Will retry.", e.Message));
                                }
                                else
                                {
                                    throw e;
                                }
                            }
                        }
                    }
                }

                DateTime now = DateTime.Now;
                Customer existingCustomer = GetExistingCustomer(customerId, serverName, apiKey, accessKey);

                if (existingCustomer == null)
                {
                    logMessage.Append(" Not found - will insert.");
                    existingCustomer = new Customer();
                    existingCustomer.customerId = customerId;
                }
                else
                {
                    logMessage.Append(" Entity found - will check if update is required.");
                }

                if (existingCustomer.Apply(customerName, true, parentCustomerId, currentUserId))
                {
                    int retries = 2;
                    while (retries > 0)
                    {
                        try
                        {
                            string url = string.Format("https://{0}/api/customer/{1}?apikey={2}&accesskey={3}", serverName, customerId, apiKey, accessKey);
                            url = url.Replace(" ", "%20");
                            url = url.Replace("$", "%24");

                            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                            logMessage.Append(" Attempting write to DataGumbo API.");
                            string gumboPayload = Json.Encode(existingCustomer);

                            request.Method = "PUT";
                            request.ContentType = "application/json";

                            gumboPayload = EncodeNonAsciiCharacters(gumboPayload);

                            request.ContentLength = gumboPayload.Length;
                            StreamWriter requestWriter = new StreamWriter(request.GetRequestStream(), System.Text.Encoding.ASCII);
                            requestWriter.Write(gumboPayload);
                            requestWriter.Close();

                            WebResponse webResponse = request.GetResponse();
                            Stream webStream = webResponse.GetResponseStream();
                            StreamReader responseReader = new StreamReader(webStream);
                            string response = responseReader.ReadToEnd();
                            responseReader.Close();
                            retries = 0; // indicate success
                        }
                        catch (Exception e)
                        {
                            retries--;
                            if (retries > 0)
                            {
                                logMessage.Append(string.Format(" HTTP put failed with exception {0}. Will retry.", e.Message));
                            }
                            else
                            {
                                throw e;
                            }
                        }
                    }
                }
                else
                {
                    logMessage.Append(" No update required.");
                }
                Dts.TaskResult = (int)ScriptResults.Success;
                logMessage.Append("  Returning Success.");
                Dts.Events.FireInformation(0, "Gumbo SSIS", logMessage.ToString(), string.Empty, 0, ref fireAgain);
            }
            catch (Exception e)
            {
                logMessage.AppendFormat("  Encountered error: {0}.", e.Message);
                Dts.Events.FireError(0, "Gumbo SSIS", logMessage.ToString(), string.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
		}

        private Customer GetExistingCustomer(int customerId, string serverName, string apiKey, string accessKey)
        {
            try
            {
                string url = string.Format("https://{0}/api/customer/{1}?apikey={2}&accesskey={3}", serverName, customerId, apiKey, accessKey);
                url = url.Replace(" ", "%20");
                url = url.Replace("$", "%24");
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                WebResponse webResponse = request.GetResponse();
                Stream webStream = webResponse.GetResponseStream();
                StreamReader responseReader = new StreamReader(webStream);
                string response = responseReader.ReadToEnd();
                responseReader.Close();
                Customer customer = Json.Decode<Customer>(response);
                return customer;
            }
            catch (Exception e)
            {
                return null;
            }
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        #region data class
        class Customer
        {
            public int customerId { get; set; }
            public string customerName { get; set; }
            public bool activeInd { get; set; }
            public int? parentCustomerId { get; set; }

            public string pbiApplicationId { get; set; }
            public string pbiWorkspaceId { get; set; }
            public string pbiUser { get; set; }
            public string pbiPassword { get; set; }
            
            public string rowCreatedBy { get; set; }
            public string rowChangedBy { get; set; }
            public DateTime? rowCreatedDate { get; set; }
            public DateTime? rowChangedDate { get; set; }

            public bool Apply(string _customerName, bool _activeInd, int? _parentCustomerId, string currentUserId)
            {
                bool ret = false;
                if (rowCreatedBy == null)
                {
                    rowCreatedBy = currentUserId;
                    ret = true;
                }
                if (rowCreatedDate == null)
                {
                    rowCreatedDate = DateTime.Now;
                    ret = true;
                }
                if (customerName != _customerName)
                {
                    customerName = _customerName;
                    ret = true;
                }
                if (parentCustomerId != _parentCustomerId)
                {
                    if (_parentCustomerId == customerId)
                    {
                        if (parentCustomerId != null)
                        {
                            parentCustomerId = null;
                            ret = true;
                        }
                    }
                    else
                    {
                        parentCustomerId = _parentCustomerId;
                        ret = true;
                    }
                }
                //if (pbiApplicationId != _pbiApplicationId)
                //{
                //    pbiApplicationId = _pbiApplicationId;
                //    ret = true;
                //}
                //if (pbiWorkspaceId != _pbiWorkspaceId)
                //{
                //    pbiWorkspaceId = _pbiWorkspaceId;
                //    ret = true;
                //}
                //if (pbiUser != _pbiUser)
                //{
                //    pbiUser = _pbiUser;
                //    ret = true;
                //}
                //if (pbiPassword != _pbiPassword)
                //{
                //    pbiPassword = _pbiPassword;
                //    ret = true;
                //}
                if (activeInd != _activeInd)
                {
                    activeInd = _activeInd;
                    ret = true;
                }
                if (ret)
                {
                    rowChangedBy = currentUserId;
                    rowChangedDate = DateTime.Now;
                }
                return ret;
            }
        }
        #endregion

        public static string EncodeNonAsciiCharacters(string value)
        {
            return Regex.Replace(value, @"[^\x00-\x7F]", c => string.Format(@"\u{0:x4}", (int)c.Value[0]));
        }
    }
}]]></ProjectItem>
                      <ProjectItem
                        Name="Project"
                        Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_14c04acc7f3f4db784693c50b94f4064</msb:CodeName>
		<msb:DisplayName>ST_14c04acc7f3f4db784693c50b94f4064</msb:DisplayName>
		<msb:ProjectId>{238F97C4-2298-407D-955E-BBEEC4A3DF2E}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_a7204bf88ee44ec78282428c6cc2fc84.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="packages.config"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
                      <ProjectItem
                        Name="packages.config"
                        Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<packages>
  <package id="AD.System.Web.Helpers.dll" version="2.0.0" targetFramework="net45" />
</packages>]]></ProjectItem>
                      <ProjectItem
                        Name="Properties\AssemblyInfo.cs"
                        Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_14c04acc7f3f4db784693c50b94f4064")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_14c04acc7f3f4db784693c50b94f4064")]
[assembly: AssemblyCopyright("Copyright @  2018")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
                      <ProjectItem
                        Name="Properties\Settings.settings"
                        Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
                      <ProjectItem
                        Name="Properties\Resources.Designer.cs"
                        Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_14c04acc7f3f4db784693c50b94f4064.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_14c04acc7f3f4db784693c50b94f4064.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_14c04acc7f3f4db784693c50b94f4064.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_14c04acc7f3f4db784693c50b94f4064.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_14c04acc7f3f4db784693c50b94f4064.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
                      <BinaryItem
                        Name="ST_a7204bf88ee44ec78282428c6cc2fc84.dll">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
AigjAAAGCxIBKEUAAAotEgIoOAAACnNGAAAKKCQAAAYXCgIoEQAABgMoRwAACiwJAgMoEgAABhcK
AigVAAAGDAUNEgIoSAAAChIDKEgAAAozFRICKEkAAAoSAyhJAAAK/gEW/gErARcsUAUTBAIoDwAA
BhMFEgQoSAAAChEFMwkSBChJAAAKKwEWLCUCKBUAAAYTBhIGKEkAAAosHQISB/4VAQAAGxEHKBYA
AAYXCisJAgUoFgAABhcKAigTAAAGBC4JAgQoFAAABhcKBiwYAg4EKCIAAAYCKDgAAApzRgAACigm
AAAGBioeAigOAAAKKgAAAAAAAAC0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVz
b3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwg
UHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVS
ZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAQlNKQgEAAQAAAAAADAAAAHY0LjAuMzAz
MTkAAAAABQBsAAAAcAoAACN+AADcCgAA9A4AACNTdHJpbmdzAAAAANAZAADsBQAAI1VTALwfAAAQ
AAAAI0dVSUQAAADMHwAAYAMAACNCbG9iAAAAAAAAAAIAAAFXHaIJCQsAAAD6JTMAFgAAAQAAADsA
AAAGAAAAHAAAACgAAAAbAAAASQAAAAIAAAA3AAAABAAAAAMAAAAPAAAAHAAAAAIAAAABAAAABgAA
AAEAAAACAAAAAgAAAAAACgABAAAAAAAGAMoAwwAKAOYA0QAOAEYBHQEGAGIBwwAGAHgBZwEGAKkB
lAEGAF0DwwAGAF4EwwAGADgHHgcGAGMHUQcGAHoHUQcGAJcHUQcGALYHUQcGAM8HUQcGAOgHUQcG
AAMIUQcGAB4IUQcGADcIUQcGAHAIUAgGAJAIUAgGAOUI0ggGAAIJwwAGAAcJwwAGACsJUQcKAFcJ
QQkKAHAJQQkGAIUJUAgOAKcJHQEGAPcJyQkKAAcKyQkKACUKEQoKAFwKEQoGALMKpwoOAMEKHQES
ABoL+goSADIL+goGAE4LwwAGAGELwwAGAHQLwwAWAJcLiwsGAL0LogsKANsL0AsKABcM0AsKAFAM
0AsKAGIM0AsaAIsMeAwGANkMzwwGAPEMpwoGAAQNzwwGABENzwwKACgN0AsGAFINzwwGAF8NzwwG
AHQNwwAOAKENHQEKAA8O8A0KADYO8A0KAGwO8A0KAH4O8A0AAAAAAQAAAAAAAQABAAAAEAAyADwA
BQABAAEAAAEQAGsAPAAJAAMABQABABAAdAB/AA0ABAAIAAMBAACjAAAAEQAOAA8AAwAQALEAAAAF
ABEADwARAIgBEwARALUBFwARAP8BOQA2ACMCRwA2ADQCRwA2AEcCRwA2AFYCRwA2AGcCRwA2AHoC
RwA2AI8CRwA2AKICRwARAIAKGQERAEUOYgIGBukCWABWgPECWwBWgPkCWwABALkEWAABANUERwAB
APMEtAABAA4FtwABADAFRwABAFIFRwABAHIFRwABAIsFRwABAKgFRwABAMYFRwABAOQFvgABAAQG
vgBQIAAAAACDGMUBGwABAFggAAAAAJMIywEfAAEAkSAAAAAAkwjfASQAAQCYIAAAAACTCOsBKQAB
AKAgAAAAAJYIDwI9AAIAsyAAAAAAhhjFARsAAgCnIAAAAACRGKAJCgECAMAgAAAAAIYAtwIbAAIA
XCYAAAAAgQC8AkoAAgAxJwAAAACWANACUwAGALknAAAAAIYYxQEbAAcAuyAAAAAAkQA1Cg4BBwAU
JwAAAACRABUOWwILAFwnAAAAAJEYoAkKAQwAwScAAAAAhggBA2kADADJJwAAAACGCBADbQAMANIn
AAAAAIYIHwNyAA0A2icAAAAAhggwA3YADQDjJwAAAACGCEEDewAOAOsnAAAAAIYITwN/AA4A9CcA
AAAAhghoA4QADwD8JwAAAACGCH0DjAAPAAUoAAAAAIYIkgNyABAADSgAAAAAhginA3YAEAAWKAAA
AACGCLwDcgARAB4oAAAAAIYIzwN2ABEAJygAAAAAhgjiA3IAEgAvKAAAAACGCO4DdgASADgoAAAA
AIYI+gNyABMAQCgAAAAAhggKBHYAEwBJKAAAAACGCBoEcgAUAFEoAAAAAIYIKwR2ABQAWigAAAAA
hgg8BHIAFQBiKAAAAACGCE0EdgAVAGsoAAAAAIYIZwSVABYAcygAAAAAhgh6BJ4AFgB8KAAAAACG
CI0ElQAXAIQoAAAAAIYIoASeABcAkCgAAAAAhgCzBKgAGACZKQAAAACGGMUBGwAcAAAAAQDDBgAA
AQAkBgAAAgDJBgAAAwDUBgAABADbBgAAAQDDBgAAAQBACgAAAgBHCgAAAwBOCgAABABVCgAAAQA0
DgAAAQDDBgAAAQDDBgAAAQDDBgAAAQDDBgAAAQDDBgAAAQDDBgAAAQDDBgAAAQDDBgAAAQDDBgAA
AQDDBgAAAQDDBgAAAQDDBgAAAQDlBgAAAgDzBgAAAwD+BgAABAAQB0kAxQF2AFEAxQF2AFkAxQF2
AGEAxQF2AGkAxQF2AHEAxQF2AHkAxQF2AIEAxQF2AIkAxQF2AJEAxQF2AJkAxQFtAKEAxQEbAKkA
xQEbAAkAxQEbALEAGQnjALEANAnqACkAxQHvAMkAxQH7ANkAxQEbABEAxQEbAOEAxQEbAAkBxQEb
ABkA0woeAREBJAskARkBOwsqASEBRAsxAQkBVAs1ATEBaAs9ATEBeQtDAUEBywtKAQEBxQFbAVEB
7wthAVEBLAxoATEBQQxvATEBSAx2AWEBWwx8AQkBcQyDAQwAxQGQAXEBkAyfAWEBlwx2AGEBogx2
ADEBsgxpAGEBvQykAWEB4AypAYEB+gyvAYkBxQG1AZEBHA12AJEBIg0bAGEBNA2/AZkBQA2pAaEB
xQHFAakBag1yAKkBIg0bALEBfg1yADEBQQzMAUEAig3SAREBkg1tABEBtQ3XAQkAwA1yADEByQ1H
ALkBzw3dAbkB3w3oAXEB6Q04AtEBRAtyADEBdA5nAskBxQFbAdkBSAxsAhkAxQEbABQAhA57ABQA
xQGQATEBkQ49AQwAnw58AgwAhA57AAgAPABfAAgAQABkACkAkwABAS4AWwA1Ay4AQwAYAy4AYwA+
Ay4ACwClAi4AEwDvAi4AGwAYAy4AIwAYAy4AKwAYAy4AMwDvAi4AOwAeA0MAawBkAEkAkwABAWEA
mwBkAIMAqwBkAIABmwBkAIEBmwBkAKABmwBkAKEBmwBkAOABmwBkAAACmwBkACACmwBkACECmwBk
AEACmwBkAEECmwBkAGACmwBkAGECmwBkAIACmwBkAIECmwBkAKACmwBkAKECmwBkAMACmwBkAMEC
mwBkAOACmwBkAOECmwBkAAADmwBkAAEDmwBkACADmwBkACEDmwBkAEADmwBkAEEDmwBkAGADmwBk
AGEDmwBkAIADmwBkAIEDmwBkAKADmwBkAMADmwBkAOADmwBkAAAEmwBkACAEmwBkAEAEmwBkAGAE
mwBkAIAEmwBkAKAEmwBkAMAEmwBkAPYA8QFEAoECAgABAAMAAwAGAAQAAAB4AS8AAAD3ATQAAAAb
AkIAAAAkBsYAAAAvBsoAAAA8Bs4AAABGBtIAAABXBsoAAABoBsoAAAB3BsoAAAB/BsoAAACLBsoA
AACYBsoAAAClBtoAAAC0BtoAAgACAAMAAgADAAUAAQAEAAUAAgAFAAcAAQAQAAkAAgAPAAkAAgAR
AAsAAQASAAsAAgATAA0AAQAUAA0AAgAVAA8AAQAWAA8AAQAYABEAAgAXABEAAgAZABMAAQAaABMA
AgAbABUAAQAcABUAAgAdABcAAQAeABcAAgAfABkAAQAgABkAAgAhABsAAQAiABsAAgAjAB0AAQAk
AB0AAgAlAB8AAQAmAB8AigF1AgSAAAABAAAAdBxBWwAAAAAAAK4IAAAEAAAAAAAAAAAAAAABALoA
AAAAAAQAAAAAAAAAAAAAAAEAwwAAAAAACwAAAAAAAAAAAAAACgD+AAAAAAALAAAAAAAAAAAAAAAK
ANsKAAAAAAQAAAAAAAAAAAAAAAEAfwsAAAAAAQAAAAAAAAAAAAAAlgF4DAAAAAAAAAAAAQAAALEO
AAAFAAQABgAEAD0AVwF/AD8CAAAAPE1vZHVsZT4AU1RfYTcyMDRiZjg4ZWU0NGVjNzgyODI0Mjhj
NmNjMmZjODQuZGxsAFJlc291cmNlcwBTVF8xNGMwNGFjYzdmM2Y0ZGI3ODQ2OTNjNTBiOTRmNDA2
NC5Qcm9wZXJ0aWVzAFNldHRpbmdzAFNjcmlwdE1haW4AU1RfMTRjMDRhY2M3ZjNmNGRiNzg0Njkz
YzUwYjk0ZjQwNjQAU2NyaXB0UmVzdWx0cwBDdXN0b21lcgBtc2NvcmxpYgBTeXN0ZW0AT2JqZWN0
AFN5c3RlbS5Db25maWd1cmF0aW9uAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAE1pY3Jvc29mdC5T
cWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRU
YXNrAFZTVEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBFbnVtAFN5c3RlbS5SZXNvdXJjZXMAUmVz
b3VyY2VNYW5hZ2VyAHJlc291cmNlTWFuAFN5c3RlbS5HbG9iYWxpemF0aW9uAEN1bHR1cmVJbmZv
AHJlc291cmNlQ3VsdHVyZQAuY3RvcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAGdldF9DdWx0dXJlAHNl
dF9DdWx0dXJlAEN1bHR1cmUAZGVmYXVsdEluc3RhbmNlAGdldF9EZWZhdWx0AERlZmF1bHQAcGJp
Q2hldnJvblVzZXJJZABwYmlDaGV2cm9uUGFzc3dvcmQAcGJpU2hlbGxVc2VySWQAcGJpU2hlbGxQ
YXNzd29yZABwYmlYdG9FbmVyZ3lVc2VySWQAcGJpWHRvRW5lcmd5UGFzc3dvcmQAcGJpTXVycGh5
T2lsVXNlcklkAHBiaU11cnBoeU9pbFBhc3N3b3JkAE1haW4AR2V0RXhpc3RpbmdDdXN0b21lcgBF
bmNvZGVOb25Bc2NpaUNoYXJhY3RlcnMAdmFsdWVfXwBTdWNjZXNzAEZhaWx1cmUAZ2V0X2N1c3Rv
bWVySWQAc2V0X2N1c3RvbWVySWQAZ2V0X2N1c3RvbWVyTmFtZQBzZXRfY3VzdG9tZXJOYW1lAGdl
dF9hY3RpdmVJbmQAc2V0X2FjdGl2ZUluZABOdWxsYWJsZWAxAGdldF9wYXJlbnRDdXN0b21lcklk
AHNldF9wYXJlbnRDdXN0b21lcklkAGdldF9wYmlBcHBsaWNhdGlvbklkAHNldF9wYmlBcHBsaWNh
dGlvbklkAGdldF9wYmlXb3Jrc3BhY2VJZABzZXRfcGJpV29ya3NwYWNlSWQAZ2V0X3BiaVVzZXIA
c2V0X3BiaVVzZXIAZ2V0X3BiaVBhc3N3b3JkAHNldF9wYmlQYXNzd29yZABnZXRfcm93Q3JlYXRl
ZEJ5AHNldF9yb3dDcmVhdGVkQnkAZ2V0X3Jvd0NoYW5nZWRCeQBzZXRfcm93Q2hhbmdlZEJ5AERh
dGVUaW1lAGdldF9yb3dDcmVhdGVkRGF0ZQBzZXRfcm93Q3JlYXRlZERhdGUAZ2V0X3Jvd0NoYW5n
ZWREYXRlAHNldF9yb3dDaGFuZ2VkRGF0ZQBBcHBseQA8Y3VzdG9tZXJJZD5rX19CYWNraW5nRmll
bGQAPGN1c3RvbWVyTmFtZT5rX19CYWNraW5nRmllbGQAPGFjdGl2ZUluZD5rX19CYWNraW5nRmll
bGQAPHBhcmVudEN1c3RvbWVySWQ+a19fQmFja2luZ0ZpZWxkADxwYmlBcHBsaWNhdGlvbklkPmtf
X0JhY2tpbmdGaWVsZAA8cGJpV29ya3NwYWNlSWQ+a19fQmFja2luZ0ZpZWxkADxwYmlVc2VyPmtf
X0JhY2tpbmdGaWVsZAA8cGJpUGFzc3dvcmQ+a19fQmFja2luZ0ZpZWxkADxyb3dDcmVhdGVkQnk+
a19fQmFja2luZ0ZpZWxkADxyb3dDaGFuZ2VkQnk+a19fQmFja2luZ0ZpZWxkADxyb3dDcmVhdGVk
RGF0ZT5rX19CYWNraW5nRmllbGQAPHJvd0NoYW5nZWREYXRlPmtfX0JhY2tpbmdGaWVsZABjdXN0
b21lcklkAGN1c3RvbWVyTmFtZQBhY3RpdmVJbmQAcGFyZW50Q3VzdG9tZXJJZABwYmlBcHBsaWNh
dGlvbklkAHBiaVdvcmtzcGFjZUlkAHBiaVVzZXIAcGJpUGFzc3dvcmQAcm93Q3JlYXRlZEJ5AHJv
d0NoYW5nZWRCeQByb3dDcmVhdGVkRGF0ZQByb3dDaGFuZ2VkRGF0ZQB2YWx1ZQBzZXJ2ZXJOYW1l
AGFwaUtleQBhY2Nlc3NLZXkAX2N1c3RvbWVyTmFtZQBfYWN0aXZlSW5kAF9wYXJlbnRDdXN0b21l
cklkAGN1cnJlbnRVc2VySWQAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBUYXJnZXRGcmFtZXdv
cmtBdHRyaWJ1dGUAU3lzdGVtLlJlZmxlY3Rpb24AQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3Nl
bWJseURlc2NyaXB0aW9uQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBB
c3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5
Q29weXJpZ2h0QXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAEFzc2VtYmx5Q3Vs
dHVyZUF0dHJpYnV0ZQBBc3NlbWJseVZlcnNpb25BdHRyaWJ1dGUAU3lzdGVtLlJ1bnRpbWUuQ29t
cGlsZXJTZXJ2aWNlcwBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAFJ1bnRpbWVDb21w
YXRpYmlsaXR5QXR0cmlidXRlAFNUX2E3MjA0YmY4OGVlNDRlYzc4MjgyNDI4YzZjYzJmYzg0AFN5
c3RlbS5EaWFnbm9zdGljcwBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAFR5cGUAUnVudGlt
ZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUAQXNzZW1ibHkAZ2V0X0Fzc2VtYmx5AFN5c3Rl
bS5Db21wb25lbnRNb2RlbABFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxl
U3RhdGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUALmNjdG9yAFNTSVNTY3JpcHRUYXNrRW50
cnlQb2ludEF0dHJpYnV0ZQBTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5Llg1MDlDZXJ0aWZp
Y2F0ZXMAWDUwOUNlcnRpZmljYXRlAFg1MDlDaGFpbgBTeXN0ZW0uTmV0LlNlY3VyaXR5AFNzbFBv
bGljeUVycm9ycwA8TWFpbj5iX18wAHBhcmFtMABwYXJhbTEAcGFyYW0yAHBhcmFtMwBSZW1vdGVD
ZXJ0aWZpY2F0ZVZhbGlkYXRpb25DYWxsYmFjawBDUyQ8PjlfX0NhY2hlZEFub255bW91c01ldGhv
ZERlbGVnYXRlMQBTeXN0ZW0uVGV4dABTdHJpbmdCdWlsZGVyAFNjcmlwdE9iamVjdE1vZGVsAGdl
dF9EdHMATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAE1pY3Jvc29mdC5TcWxTZXJ2ZXIu
RHRzLlJ1bnRpbWUAVmFyaWFibGVzAGdldF9WYXJpYWJsZXMAVmFyaWFibGUAZ2V0X0l0ZW0AZ2V0
X1ZhbHVlAEludDMyAEFwcGVuZEZvcm1hdABTdHJpbmcAb3BfRXF1YWxpdHkAQ2hhcgBTcGxpdABT
eXN0ZW0uQ29yZQBTeXN0ZW0uTGlucQBFbnVtZXJhYmxlAFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5l
cmljAElFbnVtZXJhYmxlYDEATGFzdABTeXN0ZW0uTmV0AFNlcnZpY2VQb2ludE1hbmFnZXIAc2V0
X1NlcnZlckNlcnRpZmljYXRlVmFsaWRhdGlvbkNhbGxiYWNrAFNlY3VyaXR5UHJvdG9jb2xUeXBl
AHNldF9TZWN1cml0eVByb3RvY29sAEZvcm1hdABSZXBsYWNlAFdlYlJlcXVlc3QAQ3JlYXRlAEh0
dHBXZWJSZXF1ZXN0AEFwcGVuZABTeXN0ZW0uV2ViLkhlbHBlcnMASnNvbgBFbmNvZGUAc2V0X01l
dGhvZABzZXRfQ29udGVudFR5cGUAZ2V0X0xlbmd0aABzZXRfQ29udGVudExlbmd0aABTeXN0ZW0u
SU8AU3RyZWFtAEdldFJlcXVlc3RTdHJlYW0ARW5jb2RpbmcAZ2V0X0FTQ0lJAFN0cmVhbVdyaXRl
cgBUZXh0V3JpdGVyAFdyaXRlAENsb3NlAFdlYlJlc3BvbnNlAEdldFJlc3BvbnNlAEdldFJlc3Bv
bnNlU3RyZWFtAFN0cmVhbVJlYWRlcgBUZXh0UmVhZGVyAFJlYWRUb0VuZABFeGNlcHRpb24AZ2V0
X01lc3NhZ2UAZ2V0X05vdwBzZXRfVGFza1Jlc3VsdABFdmVudHNPYmplY3RXcmFwcGVyAGdldF9F
dmVudHMAVG9TdHJpbmcARW1wdHkARmlyZUluZm9ybWF0aW9uAEZpcmVFcnJvcgBEZWNvZGUAU3lz
dGVtLlRleHQuUmVndWxhckV4cHJlc3Npb25zAE1hdGNoADxFbmNvZGVOb25Bc2NpaUNoYXJhY3Rl
cnM+Yl9fMgBjAE1hdGNoRXZhbHVhdG9yAENTJDw+OV9fQ2FjaGVkQW5vbnltb3VzTWV0aG9kRGVs
ZWdhdGUzAENhcHR1cmUAZ2V0X0NoYXJzAFJlZ2V4AGdldF9IYXNWYWx1ZQBvcF9JbmVxdWFsaXR5
AEdldFZhbHVlT3JEZWZhdWx0AFNUXzE0YzA0YWNjN2YzZjRkYjc4NDY5M2M1MGI5NGY0MDY0LlBy
b3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwAAcVMAVABfADEANABjADAANABhAGMAYwA3AGYA
MwBmADQAZABiADcAOAA0ADYAOQAzAGMANQAwAGIAOQA0AGYANAAwADYANAAuAFAAcgBvAHAAZQBy
AHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAJ1UAcwBlAHIAOgA6AGkAbgB0AEMAdQBzAHQA
bwBtAGUAcgBJAEQAAEFQAHIAbwBjAGUAcwBzAGkAbgBnACAAYwB1AHMAdABvAG0AZQByACAAdwBp
AHQAaAAgAGkAZAAgAHsAMAB9AC4AACtVAHMAZQByADoAOgBzAHQAcgBDAHUAcwB0AG8AbQBlAHIA
TgBhAG0AZQAAM1UAcwBlAHIAOgA6AGkAbgB0AFAAYQByAGUAbgB0AEMAdQBzAHQAbwBtAGUAcgBJ
AEQAADdVAHMAZQByADoAOgBzAHQAcgBQAGEAcgBlAG4AdABDAHUAcwB0AG8AbQBlAHIATgBhAG0A
ZQAAJ1UAcwBlAHIAOgA6AHMAdAByAFMAZQByAHYAZQByAE4AYQBtAGUAAB9VAHMAZQByADoAOgBz
AHQAcgBBAHAAaQBLAGUAeQAAJVUAcwBlAHIAOgA6AHMAdAByAEEAYwBjAGUAcwBzAEsAZQB5AAAZ
VQBzAGUAcgA6ADoAcwB0AHIARQBuAHYAACFTAHkAcwB0AGUAbQA6ADoAVQBzAGUAcgBOAGEAbQBl
AAAHVQBBAFQAAGtoAHQAdABwAHMAOgAvAC8AewAwAH0ALwBhAHAAaQAvAGMAdQBzAHQAbwBtAGUA
cgAvAHsAMQB9AD8AYQBwAGkAawBlAHkAPQB7ADIAfQAmAGEAYwBjAGUAcwBzAGsAZQB5AD0AewAz
AH0AAAMgAAAHJQAyADAAAAMkAAAHJQAyADQAAEcgAEEAdAB0AGUAbQBwAHQAaQBuAGcAIAB3AHIA
aQB0AGUAIAB0AG8AIABEAGEAdABhAEcAdQBtAGIAbwAgAEEAUABJAC4AAAdQAFUAVAAAIWEAcABw
AGwAaQBjAGEAdABpAG8AbgAvAGoAcwBvAG4AAGEgAEgAVABUAFAAIABwAHUAdAAgAGYAYQBpAGwA
ZQBkACAAdwBpAHQAaAAgAGUAeABjAGUAcAB0AGkAbwBuACAAewAwAH0ALgAgAFcAaQBsAGwAIABy
AGUAdAByAHkALgAAMyAATgBvAHQAIABmAG8AdQBuAGQAIAAtACAAdwBpAGwAbAAgAGkAbgBzAGUA
cgB0AC4AAWMgAEUAbgB0AGkAdAB5ACAAZgBvAHUAbgBkACAALQAgAHcAaQBsAGwAIABjAGgAZQBj
AGsAIABpAGYAIAB1AHAAZABhAHQAZQAgAGkAcwAgAHIAZQBxAHUAaQByAGUAZAAuAAEpIABOAG8A
IAB1AHAAZABhAHQAZQAgAHIAZQBxAHUAaQByAGUAZAAuAAApIAAgAFIAZQB0AHUAcgBuAGkAbgBn
ACAAUwB1AGMAYwBlAHMAcwAuAAAVRwB1AG0AYgBvACAAUwBTAEkAUwAAMyAAIABFAG4AYwBvAHUA
bgB0AGUAcgBlAGQAIABlAHIAcgBvAHIAOgAgAHsAMAB9AC4AABFcAHUAewAwADoAeAA0AH0AABlb
AF4AXAB4ADAAMAAtAFwAeAA3AEYAXQABMWMAaABlAHYAcgBvAG4ALgBhAHAAaQBAAGUAcwBpAEEA
egB1AHIAZQAuAGMAbwBtAAAZSgAmAG8AVwBNAFYAaAA5ADIATABJAGIAAC1zAGgAZQBsAGwALgBh
AHAAaQBAAGUAcwBpAEEAegB1AHIAZQAuAGMAbwBtAAARUQB1AHEAOAAzADUAMAAxAAApeAB0AG8A
LgBhAHAAaQBAAGUAcwBpAEEAegB1AHIAZQAuAGMAbwBtAAARWQB1AG4AMQAxADEAMgAyAAAvbQB1
AHIAcABoAHkALgBhAHAAaQBAAGUAcwBpAEEAegB1AHIAZQAuAGMAbwBtAAARUQB1AHYAOAAxADgA
NAA2AAAAS5iNHMhneU6tH2NH+et8+wAIt3pcVhk04IkIiYRdzYCAzJEDBhIVAwYSGQMgAAEEAAAS
FQQAABIZBQABARIZBAgAEhUECAASGQMGEgwEAAASDAQIABIMAgYOCCAEEhgIDg4OBAABDg4CBggD
BhEUBAAAAAAEAQAAAAMgAAgEIAEBCAMgAA4EIAEBDgMgAAIEIAEBAgcgABURHQEICCABARURHQEI
CCAAFREdAREhCSABARURHQERIQsgBAIOAhURHQEIDgIGAgYGFREdAQgHBhURHQERIQMoAAgDKAAO
AygAAgcoABURHQEICCgAFREdAREhBgABElkRXQQgABJhBiACAQ4SYQQHARIVBSABARFpCAEAAgAA
AAAAAwAAAQoABAIcEnUSeRF9BAYSgIEFIAASgIkFIAASgI0GIAESgJEcAyAAHAcgAhKAhQ4cBQAC
Ag4OBiABHQ4dAwwQAQEeABUSgKUBHgADCgEOBSACARwYBgABARKAgQYAAQERgK0GAAIODh0cBSAC
Dg4OBgABEoCxDgYgARKAhQ4FFREdAQgFIAEBEwAIMb84Vq02TjUEAAEOHAQgAQEKBSAAEoC9BQAA
EoDBCSACARKAvRKAwQUgABKAzQYgAQESgL0FAAIODhwEAAARIQUgABKA3QogBgEIDg4OCBACCCAF
AggODg4IRgcjEoCFAggOCA4ODg4ODhIYCA4SgLUOEoDFEoDNEoC9EoDREoDZEhgIDhKAtQ4SgMUS
gM0SgL0SgNESgNkSgNkdAx0cHRwGEAEBHgAOBAoBEhgWBwkOEoC1EoDNEoC9EoDRDhIYEhgdHAYA
AQ4SgOEEBhKA5QQgAQMICAADDg4OEoDlBhURHQERIQQgABMAIwcIAhURHQERIRURHQEIFREdAQgV
ER0BCAgVER0BCBURHQEISQEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC41AQBUDhRGcmFtZXdv
cmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29yayA0LjUoAQAjU1RfMTRjMDRhY2M3ZjNmNGRiNzg0
NjkzYzUwYjk0ZjQwNjQAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAxOAAACAEACAAAAAAAHgEA
AQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQAAALRNAAAAAAAAAAAAAM5NAAAAIAAAAAAAAAAA
AAAAAAAAAAAAAAAAAADATQAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/
JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAAAAAYAACA
AAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWGAAALADAAAA
AAAAAAAAALADNAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAABAAAA
AQBBW3QcAAABAEFbdBw/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBhAHIARgBp
AGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAAsAQQAwAA
AQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAADsAgAAAQAwADAAMAAwADAANABiADAAAABw
ACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBUAF8AMQA0AGMAMAA0AGEA
YwBjADcAZgAzAGYANABkAGIANwA4ADQANgA5ADMAYwA1ADAAYgA5ADQAZgA0ADAANgA0AAAAQAAP
AAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADcAMgA4ADQALgAyADMAMwA2ADEA
AAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8AYQA3ADIAMAA0AGIAZgA4
ADgAZQBlADQANABlAGMANwA4ADIAOAAyADQAMgA4AGMANgBjAGMAMgBmAGMAOAA0AC4AZABsAGwA
AABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAg
AEAAIAAgADIAMAAxADgAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAA
UwBUAF8AYQA3ADIAMAA0AGIAZgA4ADgAZQBlADQANABlAGMANwA4ADIAOAAyADQAMgA4AGMANgBj
AGMAMgBmAGMAOAA0AC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMA
VABfADEANABjADAANABhAGMAYwA3AGYAMwBmADQAZABiADcAOAA0ADYAOQAzAGMANQAwAGIAOQA0
AGYANAAwADYANAAAAEQADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4A
NwAyADgANAAuADIAMwAzADYAMQAAAAAASAAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBp
AG8AbgAAADEALgAwAC4ANwAyADgANAAuADIAMwAzADYAMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAwAAADgPQAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
                    </ScriptProject>
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
              <DTS:ForEachVariableMappings>
                <DTS:ForEachVariableMapping
                  DTS:CreationName=""
                  DTS:DTSID="{8E6CDE61-946B-4C06-A70E-382D05B6F592}"
                  DTS:ObjectName="{8E6CDE61-946B-4C06-A70E-382D05B6F592}"
                  DTS:ValueIndex="0"
                  DTS:VariableName="User::intCustomerID" />
                <DTS:ForEachVariableMapping
                  DTS:CreationName=""
                  DTS:DTSID="{32697E07-1B99-4C69-9BC0-4C273917485E}"
                  DTS:ObjectName="{32697E07-1B99-4C69-9BC0-4C273917485E}"
                  DTS:ValueIndex="1"
                  DTS:VariableName="User::strCustomerName" />
                <DTS:ForEachVariableMapping
                  DTS:CreationName=""
                  DTS:DTSID="{29FD2C72-ECE0-4862-AB54-C94A58447713}"
                  DTS:ObjectName="{29FD2C72-ECE0-4862-AB54-C94A58447713}"
                  DTS:ValueIndex="2"
                  DTS:VariableName="User::intParentCustomerID" />
                <DTS:ForEachVariableMapping
                  DTS:CreationName=""
                  DTS:DTSID="{A8BC8E73-DE24-4C57-8F1A-423F77203B69}"
                  DTS:ObjectName="{A8BC8E73-DE24-4C57-8F1A-423F77203B69}"
                  DTS:ValueIndex="3"
                  DTS:VariableName="User::strParentCustomerName" />
              </DTS:ForEachVariableMappings>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\Well Loop\Well Predecessor Container\Rig Loop"
              DTS:CreationName="STOCK:FOREACHLOOP"
              DTS:Description="Foreach Loop Container"
              DTS:DTSID="{2ed17408-9d68-433d-b497-368822158c7d}"
              DTS:ExecutableType="STOCK:FOREACHLOOP"
              DTS:LocaleID="-1"
              DTS:ObjectName="Rig Loop">
              <DTS:ForEachEnumerator
                DTS:CreationName="Microsoft.SqlServer.Dts.Runtime.Enumerators.ADO.ForEachADOEnumerator, Microsoft.SqlServer.ForEachADOEnumerator, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
                DTS:DTSID="{6bdadb0e-ed69-4466-b848-a116e024208a}"
                DTS:ObjectName="{7B6988C8-CC25-4F6B-B737-650B82BC4ACB}">
                <DTS:ObjectData>
                  <FEEADO
                    EnumType="EnumerateRowsInFirstTable"
                    VarName="User::objRigList" />
                </DTS:ObjectData>
              </DTS:ForEachEnumerator>
              <DTS:Variables />
              <DTS:LoggingOptions
                DTS:FilterKind="0" />
              <DTS:Executables>
                <DTS:Executable
                  DTS:refId="Package\Well Loop\Well Predecessor Container\Rig Loop\C# Script to Call Data Gumbo Rig API"
                  DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
                  DTS:Description="Script Task"
                  DTS:DTSID="{d7947896-0b8f-4446-8fc3-67006dbae931}"
                  DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
                  DTS:LocaleID="-1"
                  DTS:ObjectName="C# Script to Call Data Gumbo Rig API"
                  DTS:ThreadHint="2">
                  <DTS:Variables />
                  <DTS:LoggingOptions
                    DTS:FilterKind="0" />
                  <DTS:ObjectData>
                    <ScriptProject
                      Name="ST_b823d9588bf041739683178a312d16e2"
                      VSTAMajorVersion="3"
                      VSTAMinorVersion="0"
                      Language="CSharp"
                      ReadOnlyVariables="User::intRigId,User::strAccessKey,User::strApiKey,User::strRigName,User::strServerName,System::UserName">
                      <ProjectItem
                        Name="Properties\AssemblyInfo.cs"
                        Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_0c0289ab788c433ea59e9da0940dca90")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_0c0289ab788c433ea59e9da0940dca90")]
[assembly: AssemblyCopyright("Copyright @  2019")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
                      <ProjectItem
                        Name="Properties\Resources.resx"
                        Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
                      <ProjectItem
                        Name="ScriptMain.cs"
                        Encoding="UTF8"><![CDATA[using System.Net;
using System.IO;
using System.Text;
using System.Web;
using System.Web.Helpers;
using System.Linq;
using System.Text.RegularExpressions;

#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
#endregion


namespace ST_0c0289ab788c433ea59e9da0940dca90
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            StringBuilder logMessage = new StringBuilder();
            try
            {
                bool fireAgain = false;
                int rigId = (int)Dts.Variables["User::intRigId"].Value;
                logMessage.AppendFormat("Processing rig with id {0}.", rigId);
                string rigName = (String)Dts.Variables["User::strRigName"].Value;
                string serverName = (String)Dts.Variables["User::strServerName"].Value;
                string apiKey = (String)Dts.Variables["User::strApiKey"].Value;
                string accessKey = (String)Dts.Variables["User::strAccessKey"].Value;
                string currentUserId = (String)Dts.Variables["System::UserName"].Value;

                if (currentUserId != null)
                {
                    currentUserId = currentUserId.Split('\\').Last();
                }

                ServicePointManager.ServerCertificateValidationCallback = delegate { return true; };
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls | SecurityProtocolType.Ssl3;

                string url = string.Format("https://{0}/api/rig/{1}?apikey={2}&accesskey={3}", serverName, rigId, apiKey, accessKey);
                url = url.Replace(" ", "%20");
                url = url.Replace("$", "%24");

                DateTime now = DateTime.Now;
                Rig existingRig = GetExistingRig(rigId, serverName, apiKey, accessKey);

                if (existingRig == null)
                {
                    logMessage.Append(" Not found - will insert.");
                    existingRig = new Rig();
                    existingRig.rigId = rigId;
                }
                else
                {
                    logMessage.Append(" Entity found - will check if update is required.");
                }

                if (existingRig.Apply(rigName, true, currentUserId))
                {
                    int retries = 2;
                    while (retries > 0)
                    {
                        try
                        {
                            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                            logMessage.Append(" Attempting write to DataGumbo API.");
                            string gumboPayload = Json.Encode(existingRig);

                            request.Method = "PUT";
                            request.ContentType = "application/json";

                            gumboPayload = EncodeNonAsciiCharacters(gumboPayload);

                            request.ContentLength = gumboPayload.Length;
                            StreamWriter requestWriter = new StreamWriter(request.GetRequestStream(), System.Text.Encoding.ASCII);
                            requestWriter.Write(gumboPayload);
                            requestWriter.Close();

                            WebResponse webResponse = request.GetResponse();
                            Stream webStream = webResponse.GetResponseStream();
                            StreamReader responseReader = new StreamReader(webStream);
                            string response = responseReader.ReadToEnd();
                            responseReader.Close();
                            retries = 0; // indicate success
                        }
                        catch (Exception e)
                        {
                            retries--;
                            if (retries > 0)
                            {
                                logMessage.Append(string.Format(" HTTP put failed with exception {0}. Will retry.", e.Message));
                            }
                            else
                            {
                                throw e;
                            }
                        }
                    }
                }
                else
                {
                    logMessage.Append(" No update required.");
                }
                Dts.TaskResult = (int)ScriptResults.Success;
                logMessage.Append("  Returning Success.");
                Dts.Events.FireInformation(0, "Gumbo SSIS", logMessage.ToString(), string.Empty, 0, ref fireAgain);
            }
            catch (Exception e)
            {
                logMessage.AppendFormat("  Encountered error: {0}.", e.Message);
                Dts.Events.FireError(0, "Gumbo SSIS", logMessage.ToString(), string.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        private Rig GetExistingRig(int rigId, string serverName, string apiKey, string accessKey)
        {
            try
            {
                string url = string.Format("https://{0}/api/rig/{1}?apikey={2}&accesskey={3}", serverName, rigId, apiKey, accessKey);
                url = url.Replace(" ", "%20");
                url = url.Replace("$", "%24");
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                WebResponse webResponse = request.GetResponse();
                Stream webStream = webResponse.GetResponseStream();
                StreamReader responseReader = new StreamReader(webStream);
                string response = responseReader.ReadToEnd();
                responseReader.Close();
                Rig rig = Json.Decode<Rig>(response);
                return rig;
            }
            catch (Exception e)
            {
                return null;
            }
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        #region data class
        class Rig
        {
            public int rigId { get; set; }
            public string rigName { get; set; }
            public bool activeInd { get; set; }
            public string rowCreatedBy { get; set; }
            public string rowChangedBy { get; set; }
            public DateTime? rowCreatedDate { get; set; }
            public DateTime? rowChangedDate { get; set; }

            public bool Apply(string _rigName, bool _activeInd, string currentUserId)
            {
                bool ret = false;
                if (rowCreatedBy == null)
                {
                    rowCreatedBy = currentUserId;
                    ret = true;
                }
                if (rowCreatedDate == null)
                {
                    rowCreatedDate = DateTime.Now;
                    ret = true;
                }
                if (rigName != _rigName)
                {
                    rigName = _rigName;
                    ret = true;
                }
                if (activeInd != _activeInd)
                {
                    activeInd = _activeInd;
                    ret = true;
                }
                if (ret)
                {
                    rowChangedBy = currentUserId;
                    rowChangedDate = DateTime.Now;
                }
                return ret;
            }
        }
        #endregion

        public static string EncodeNonAsciiCharacters(string value)
        {
            return Regex.Replace(value, @"[^\x00-\x7F]", c => string.Format(@"\u{0:x4}", (int)c.Value[0]));
        }

    }
}]]></ProjectItem>
                      <ProjectItem
                        Name="Project"
                        Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_0c0289ab788c433ea59e9da0940dca90</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_0c0289ab788c433ea59e9da0940dca90</msb:DisplayName>
		<msb:ProjectId>{8A8FF9C1-F8A9-4AF6-B003-F5106027C3A1}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_b823d9588bf041739683178a312d16e2.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
                      <ProjectItem
                        Name="ST_b823d9588bf041739683178a312d16e2.csproj"
                        Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{5A8C2254-ED57-4FD9-8575-E04BC96AA6EE}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_0c0289ab788c433ea59e9da0940dca90</RootNamespace>
    <AssemblyName>ST_b823d9588bf041739683178a312d16e2</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile />
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <Prefer32Bit>false</Prefer32Bit>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Web.Helpers, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
      <DesignTime>True</DesignTime>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="#HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\10.0\InstallDir#\devenv.exe" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
                      <ProjectItem
                        Name="Properties\Settings.Designer.cs"
                        Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_0c0289ab788c433ea59e9da0940dca90.Properties.Settings.get_Default():ST_0c0289ab788c433ea59e9da0940dca90.Properties.Sett" +
    "ings")]

namespace ST_0c0289ab788c433ea59e9da0940dca90.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
                      <ProjectItem
                        Name="Properties\Settings.settings"
                        Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
                      <ProjectItem
                        Name="Properties\Resources.Designer.cs"
                        Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_0c0289ab788c433ea59e9da0940dca90.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_0c0289ab788c433ea59e9da0940dca90.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_0c0289ab788c433ea59e9da0940dca90.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_0c0289ab788c433ea59e9da0940dca90.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_0c0289ab788c433ea59e9da0940dca90.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
                      <BinaryItem
                        Name="ST_b823d9588bf041739683178a312d16e2.dll">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
KqYCchEEAHB+BQAABC0RFP4GDQAABnNAAAAKgAUAAAR+BQAABChBAAAKKh4CKEIAAAoqHgJ7CQAA
BCoiAgN9CQAABCoeAnsKAAAEKiICA30KAAAEKh4CewsAAAQqIgIDfQsAAAQqHgJ7DAAABCoiAgN9
DAAABCoeAnsNAAAEKiICA30NAAAEKh4Cew4AAAQqIgIDfQ4AAAQqHgJ7DwAABCoiAgN9DwAABCoA
ABMwAgB6AAAABAAAERYKAigUAAAGLQkCBSgVAAAGFwoCKBgAAAYLEgEoQwAACi0SAigjAAAKc0QA
AAooGQAABhcKAigQAAAGAyhFAAAKLAkCAygRAAAGFwoCKBIAAAYELgkCBCgTAAAGFwoGLBcCBSgX
AAAGAigjAAAKc0QAAAooGwAABgYqHgIoDgAACioAAAAAAAC0AAAAzsrvvgEAAACRAAAAbFN5c3Rl
bS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1
bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVz
b3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAQlNKQgEAAQAA
AAAADAAAAHY0LjAuMzAzMTkAAAAABQBsAAAAmAgAACN+AAAECQAAaAwAACNTdHJpbmdzAAAAAGwV
AAAsBAAAI1VTAJgZAAAQAAAAI0dVSUQAAACoGQAA+AIAACNCbG9iAAAAAAAAAAIAAAFXHaIJCQsA
AAD6JTMAFgAAAQAAADsAAAAGAAAADwAAAB0AAAAVAAAARQAAAAIAAAAoAAAABAAAAAMAAAAKAAAA
EgAAAAEAAAABAAAABgAAAAEAAAACAAAAAgAAAAAACgABAAAAAAAGAMUAvgAKAOEAzAAOAEEBGAEG
AF0BvgAGAHMBYgEGAKQBjwEGAO8CvgAGAPoCvgAGAMoEsAQGAPUE4wQGAAwF4wQGACkF4wQGAEgF
4wQGAGEF4wQGAHoF4wQGAJUF4wQGALAF4wQGAMkF4wQGAAIG4gUGACIG4gUGAHcGZAYGAJQGvgAG
AJkGvgAGAL0G4wQKAOkG0wYKAAIH0wYGABcH4gUOADkHGAEGAIkHWwcKAJkHWwcKALcHowcKAO4H
owcGAEUIOQgOAFMIGAESAKwIjAgSAMQIjAgGAOAIvgAGAPMIvgAGAPoIvgAWAB0JEQkGAEMJKAkK
AGEJVgkKAJ0JVgkKAOUJVgkKAPcJVgkaABkKBgoGAGcKXQoGAH8KOQgGAJIKXQoGAJ8KXQoKALYK
VgkGAOAKXQoGAO0KXQoGAAILvgAOACcLGAEKAJULdgsKALwLdgsKAPILdgsKAAQMdgsAAAAAAQAA
AAAAAQABAAAAEAAyADwABQABAAEAAAEQAGsAPAAJAAMABQABABAAdAB/AA0ABAAIAAMBAACjAAAA
EQAGAA4AAwAQALEAAAAFAAkADgARAIMBEwARALABFwARAPoBOQARABII9AARAMsLDwIGBksCVQBW
gFMCWABWgFsCWAABAFUDVQABAGwDmwABAIUDngABAKADmwABAL4DmwABANwDoQABAPwDoQBQIAAA
AACDGMABGwABAFggAAAAAJMIxgEfAAEAkSAAAAAAkwjaASQAAQCYIAAAAACTCOYBKQABAKAgAAAA
AJYICgI9AAIAsyAAAAAAhhjAARsAAgCnIAAAAACRGDIH5QACAMAgAAAAAIYAHgIbAAIATCQAAAAA
gQAjAkcAAgAhJQAAAACWADICUAAGAEslAAAAAIYYwAEbAAcAuyAAAAAAkQDHB+kABwAEJQAAAACR
AJsLCAILAFMlAAAAAIYIYwJmAAwAWyUAAAAAhghtAmoADABkJQAAAACGCHcCbwANAGwlAAAAAIYI
gwJzAA0AdSUAAAAAhgiPAngADgB9JQAAAACGCJ0CfAAOAIYlAAAAAIYIqwJvAA8AjiUAAAAAhgi8
AnMADwCXJQAAAACGCM0CbwAQAJ8lAAAAAIYI3gJzABAAqCUAAAAAhggDA4EAEQCwJQAAAACGCBYD
igARALklAAAAAIYIKQOBABIAwSUAAAAAhgg8A4oAEgDMJQAAAACGAE8DlAATAFImAAAAAIYYwAEb
ABYAAAABAGwEAAABABwEAAACAHIEAAADAH0EAAAEAIQEAAABAGwEAAABANIHAAACANkHAAADAOAH
AAAEAOcHAAABALoLAAABAGwEAAABAGwEAAABAGwEAAABAGwEAAABAGwEAAABAGwEAAABAGwEAAAB
AI4EAAACAJcEAAADAKIESQDAAXMAUQDAAXMAWQDAAXMAYQDAAXMAaQDAAXMAcQDAAXMAeQDAAXMA
gQDAAXMAiQDAAXMAkQDAAXMAmQDAAWoAoQDAARsAqQDAARsACQDAARsAsQCrBr4AsQDGBsUAKQDA
AcoAyQDAAdYA2QDAARsAEQDAARsA4QDAARsACQHAARsAGQBlCPkAEQG2CP8AGQHNCAUBIQHWCAwB
CQHmCBABMQH/CBgBQQFRCR8BAQHAATABUQF1CTYBUQGyCT0BMQHHCUQBMQHOCUsBQQDWCVEBCQHe
CVYBYQHwCV0BcQEeCm0BYQElCnMAYQEwCnMAMQFACmYAYQFLCnIBYQFuCncBgQGICn0BiQHAAYMB
kQGqCnMAkQGwChsAYQHCCo0BmQHOCncBoQHAAZMBqQH4Cm8AqQGwChsAsQEMC28AMQHHCZoBEQEY
C2oAEQE7C6ABCQBGC28AMQFPC5sAuQFVC6YBuQFlC7EBcQFvC+UB0QHWCG8AMQH6CxQCyQHAATAB
2QHOCRkCGQDAARsADAAKDHgADADAASkCMQEXDC8CCAAcAFwACAAgAGEAKQCTANwALgBDALICLgBj
ANgCLgA7ALgCLgBbAM8CLgAbALICLgAzAIkCLgATAIkCLgALAD8CLgAjALICLgArALICQwBrAGEA
SQCTANwAYQCbAGEAgQCbAGEAgwCrAGEAoQCbAGEAIQGbAGEAQQGbAGEAYQGbAGEAgAGbAGEAgQGb
AGEAoAGbAGEAoQGbAGEAwAGbAGEAwQGbAGEA4AGbAGEA4QGbAGEAAAKbAGEAIAKbAGEAQAKbAGEA
YAKbAGEAgAKbAGEAoAKbAGEAwAKbAGEA4AKbAGEAAAObAGEAIAObAGEAQAObAGEAYAObAGEA0QC6
AfEBNQICAAEAAwADAAYABAAAAHMBLwAAAPIBNAAAABYCQgAAABwEqQAAACIErQAAACoEsQAAADQE
rQAAAEEErQAAAE4EtQAAAF0EtQACAAIAAwACAAMABQABAAQABQACAAUABwACAA4ACQABAA8ACQAC
ABAACwABABEACwACABIADQABABMADQACABQADwABABUADwABABcAEQACABYAEQABABkAEwACABgA
EwACABoAFQABABsAFQAiAgSAAAABAAAAvBtHXgAAAAAAAEAGAAAEAAAAAAAAAAAAAAABALUAAAAA
AAQAAAAAAAAAAAAAAAEAvgAAAAAACwAAAAAAAAAAAAAACgD5AAAAAAALAAAAAAAAAAAAAAAKAG0I
AAAAAAQAAAAAAAAAAAAAAAEABQkAAAAAAQAAAAAAAAAAAAAAZAEGCgAAAAAAAAAAAQAAACUMAAAF
AAQABgAEADsALAF7AOwBAAAAAAA8TW9kdWxlPgBTVF9iODIzZDk1ODhiZjA0MTczOTY4MzE3OGEz
MTJkMTZlMi5kbGwAUmVzb3VyY2VzAFNUXzBjMDI4OWFiNzg4YzQzM2VhNTllOWRhMDk0MGRjYTkw
LlByb3BlcnRpZXMAU2V0dGluZ3MAU2NyaXB0TWFpbgBTVF8wYzAyODlhYjc4OGM0MzNlYTU5ZTlk
YTA5NDBkY2E5MABTY3JpcHRSZXN1bHRzAFJpZwBtc2NvcmxpYgBTeXN0ZW0AT2JqZWN0AFN5c3Rl
bS5Db25maWd1cmF0aW9uAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAE1pY3Jvc29mdC5TcWxTZXJ2
ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAFZT
VEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBFbnVtAFN5c3RlbS5SZXNvdXJjZXMAUmVzb3VyY2VN
YW5hZ2VyAHJlc291cmNlTWFuAFN5c3RlbS5HbG9iYWxpemF0aW9uAEN1bHR1cmVJbmZvAHJlc291
cmNlQ3VsdHVyZQAuY3RvcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAGdldF9DdWx0dXJlAHNldF9DdWx0
dXJlAEN1bHR1cmUAZGVmYXVsdEluc3RhbmNlAGdldF9EZWZhdWx0AERlZmF1bHQATWFpbgBHZXRF
eGlzdGluZ1JpZwBFbmNvZGVOb25Bc2NpaUNoYXJhY3RlcnMAdmFsdWVfXwBTdWNjZXNzAEZhaWx1
cmUAZ2V0X3JpZ0lkAHNldF9yaWdJZABnZXRfcmlnTmFtZQBzZXRfcmlnTmFtZQBnZXRfYWN0aXZl
SW5kAHNldF9hY3RpdmVJbmQAZ2V0X3Jvd0NyZWF0ZWRCeQBzZXRfcm93Q3JlYXRlZEJ5AGdldF9y
b3dDaGFuZ2VkQnkAc2V0X3Jvd0NoYW5nZWRCeQBOdWxsYWJsZWAxAERhdGVUaW1lAGdldF9yb3dD
cmVhdGVkRGF0ZQBzZXRfcm93Q3JlYXRlZERhdGUAZ2V0X3Jvd0NoYW5nZWREYXRlAHNldF9yb3dD
aGFuZ2VkRGF0ZQBBcHBseQA8cmlnSWQ+a19fQmFja2luZ0ZpZWxkADxyaWdOYW1lPmtfX0JhY2tp
bmdGaWVsZAA8YWN0aXZlSW5kPmtfX0JhY2tpbmdGaWVsZAA8cm93Q3JlYXRlZEJ5PmtfX0JhY2tp
bmdGaWVsZAA8cm93Q2hhbmdlZEJ5PmtfX0JhY2tpbmdGaWVsZAA8cm93Q3JlYXRlZERhdGU+a19f
QmFja2luZ0ZpZWxkADxyb3dDaGFuZ2VkRGF0ZT5rX19CYWNraW5nRmllbGQAcmlnSWQAcmlnTmFt
ZQBhY3RpdmVJbmQAcm93Q3JlYXRlZEJ5AHJvd0NoYW5nZWRCeQByb3dDcmVhdGVkRGF0ZQByb3dD
aGFuZ2VkRGF0ZQB2YWx1ZQBzZXJ2ZXJOYW1lAGFwaUtleQBhY2Nlc3NLZXkAX3JpZ05hbWUAX2Fj
dGl2ZUluZABjdXJyZW50VXNlcklkAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAVGFyZ2V0RnJh
bWV3b3JrQXR0cmlidXRlAFN5c3RlbS5SZWZsZWN0aW9uAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUA
QXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1
dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3Nl
bWJseUNvcHlyaWdodEF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBBc3NlbWJs
eUN1bHR1cmVBdHRyaWJ1dGUAQXNzZW1ibHlWZXJzaW9uQXR0cmlidXRlAFN5c3RlbS5SdW50aW1l
LkNvbXBpbGVyU2VydmljZXMAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBSdW50aW1l
Q29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBTVF9iODIzZDk1ODhiZjA0MTczOTY4MzE3OGEzMTJkMTZl
MgBTeXN0ZW0uRGlhZ25vc3RpY3MARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBUeXBlAFJ1
bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAEFzc2VtYmx5AGdldF9Bc3NlbWJseQBT
eXN0ZW0uQ29tcG9uZW50TW9kZWwARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dz
YWJsZVN0YXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAC5jY3RvcgBTU0lTU2NyaXB0VGFz
a0VudHJ5UG9pbnRBdHRyaWJ1dGUAU3lzdGVtLlNlY3VyaXR5LkNyeXB0b2dyYXBoeS5YNTA5Q2Vy
dGlmaWNhdGVzAFg1MDlDZXJ0aWZpY2F0ZQBYNTA5Q2hhaW4AU3lzdGVtLk5ldC5TZWN1cml0eQBT
c2xQb2xpY3lFcnJvcnMAPE1haW4+Yl9fMABwYXJhbTAAcGFyYW0xAHBhcmFtMgBwYXJhbTMAUmVt
b3RlQ2VydGlmaWNhdGVWYWxpZGF0aW9uQ2FsbGJhY2sAQ1MkPD45X19DYWNoZWRBbm9ueW1vdXNN
ZXRob2REZWxlZ2F0ZTEAU3lzdGVtLlRleHQAU3RyaW5nQnVpbGRlcgBTY3JpcHRPYmplY3RNb2Rl
bABnZXRfRHRzAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwBNaWNyb3NvZnQuU3FsU2Vy
dmVyLkR0cy5SdW50aW1lAFZhcmlhYmxlcwBnZXRfVmFyaWFibGVzAFZhcmlhYmxlAGdldF9JdGVt
AGdldF9WYWx1ZQBJbnQzMgBBcHBlbmRGb3JtYXQAU3RyaW5nAENoYXIAU3BsaXQAU3lzdGVtLkNv
cmUAU3lzdGVtLkxpbnEARW51bWVyYWJsZQBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYwBJRW51
bWVyYWJsZWAxAExhc3QAU3lzdGVtLk5ldABTZXJ2aWNlUG9pbnRNYW5hZ2VyAHNldF9TZXJ2ZXJD
ZXJ0aWZpY2F0ZVZhbGlkYXRpb25DYWxsYmFjawBTZWN1cml0eVByb3RvY29sVHlwZQBzZXRfU2Vj
dXJpdHlQcm90b2NvbABGb3JtYXQAUmVwbGFjZQBnZXRfTm93AEFwcGVuZABXZWJSZXF1ZXN0AENy
ZWF0ZQBIdHRwV2ViUmVxdWVzdABTeXN0ZW0uV2ViLkhlbHBlcnMASnNvbgBFbmNvZGUAc2V0X01l
dGhvZABzZXRfQ29udGVudFR5cGUAZ2V0X0xlbmd0aABzZXRfQ29udGVudExlbmd0aABTeXN0ZW0u
SU8AU3RyZWFtAEdldFJlcXVlc3RTdHJlYW0ARW5jb2RpbmcAZ2V0X0FTQ0lJAFN0cmVhbVdyaXRl
cgBUZXh0V3JpdGVyAFdyaXRlAENsb3NlAFdlYlJlc3BvbnNlAEdldFJlc3BvbnNlAEdldFJlc3Bv
bnNlU3RyZWFtAFN0cmVhbVJlYWRlcgBUZXh0UmVhZGVyAFJlYWRUb0VuZABFeGNlcHRpb24AZ2V0
X01lc3NhZ2UAc2V0X1Rhc2tSZXN1bHQARXZlbnRzT2JqZWN0V3JhcHBlcgBnZXRfRXZlbnRzAFRv
U3RyaW5nAEVtcHR5AEZpcmVJbmZvcm1hdGlvbgBGaXJlRXJyb3IARGVjb2RlAFN5c3RlbS5UZXh0
LlJlZ3VsYXJFeHByZXNzaW9ucwBNYXRjaAA8RW5jb2RlTm9uQXNjaWlDaGFyYWN0ZXJzPmJfXzIA
YwBNYXRjaEV2YWx1YXRvcgBDUyQ8PjlfX0NhY2hlZEFub255bW91c01ldGhvZERlbGVnYXRlMwBD
YXB0dXJlAGdldF9DaGFycwBSZWdleABnZXRfSGFzVmFsdWUAb3BfSW5lcXVhbGl0eQBTVF8wYzAy
ODlhYjc4OGM0MzNlYTU5ZTlkYTA5NDBkY2E5MC5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJj
ZXMAAHFTAFQAXwAwAGMAMAAyADgAOQBhAGIANwA4ADgAYwA0ADMAMwBlAGEANQA5AGUAOQBkAGEA
MAA5ADQAMABkAGMAYQA5ADAALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBl
AHMAAB1VAHMAZQByADoAOgBpAG4AdABSAGkAZwBJAGQAADdQAHIAbwBjAGUAcwBzAGkAbgBnACAA
cgBpAGcAIAB3AGkAdABoACAAaQBkACAAewAwAH0ALgAAIVUAcwBlAHIAOgA6AHMAdAByAFIAaQBn
AE4AYQBtAGUAACdVAHMAZQByADoAOgBzAHQAcgBTAGUAcgB2AGUAcgBOAGEAbQBlAAAfVQBzAGUA
cgA6ADoAcwB0AHIAQQBwAGkASwBlAHkAACVVAHMAZQByADoAOgBzAHQAcgBBAGMAYwBlAHMAcwBL
AGUAeQAAIVMAeQBzAHQAZQBtADoAOgBVAHMAZQByAE4AYQBtAGUAAGFoAHQAdABwAHMAOgAvAC8A
ewAwAH0ALwBhAHAAaQAvAHIAaQBnAC8AewAxAH0APwBhAHAAaQBrAGUAeQA9AHsAMgB9ACYAYQBj
AGMAZQBzAHMAawBlAHkAPQB7ADMAfQAAAyAAAAclADIAMAAAAyQAAAclADIANAAAMyAATgBvAHQA
IABmAG8AdQBuAGQAIAAtACAAdwBpAGwAbAAgAGkAbgBzAGUAcgB0AC4AAWMgAEUAbgB0AGkAdAB5
ACAAZgBvAHUAbgBkACAALQAgAHcAaQBsAGwAIABjAGgAZQBjAGsAIABpAGYAIAB1AHAAZABhAHQA
ZQAgAGkAcwAgAHIAZQBxAHUAaQByAGUAZAAuAAFHIABBAHQAdABlAG0AcAB0AGkAbgBnACAAdwBy
AGkAdABlACAAdABvACAARABhAHQAYQBHAHUAbQBiAG8AIABBAFAASQAuAAAHUABVAFQAACFhAHAA
cABsAGkAYwBhAHQAaQBvAG4ALwBqAHMAbwBuAABhIABIAFQAVABQACAAcAB1AHQAIABmAGEAaQBs
AGUAZAAgAHcAaQB0AGgAIABlAHgAYwBlAHAAdABpAG8AbgAgAHsAMAB9AC4AIABXAGkAbABsACAA
cgBlAHQAcgB5AC4AACkgAE4AbwAgAHUAcABkAGEAdABlACAAcgBlAHEAdQBpAHIAZQBkAC4AACkg
ACAAUgBlAHQAdQByAG4AaQBuAGcAIABTAHUAYwBjAGUAcwBzAC4AABVHAHUAbQBiAG8AIABTAFMA
SQBTAAAzIAAgAEUAbgBjAG8AdQBuAHQAZQByAGUAZAAgAGUAcgByAG8AcgA6ACAAewAwAH0ALgAA
EVwAdQB7ADAAOgB4ADQAfQAAGVsAXgBcAHgAMAAwAC0AXAB4ADcARgBdAAEAX1iHx3CTSkegkm8w
XYdivQAIt3pcVhk04IkIiYRdzYCAzJEDBhIVAwYSGQMgAAEEAAASFQQAABIZBQABARIZBAgAEhUE
CAASGQMGEgwEAAASDAQIABIMCCAEEhgIDg4OBAABDg4CBggDBhEUBAAAAAAEAQAAAAMgAAgEIAEB
CAMgAA4EIAEBDgMgAAIEIAEBAgggABURHQERIQkgAQEVER0BESEGIAMCDgIOAgYOAgYCBwYVER0B
ESEDKAAIAygADgMoAAIIKAAVER0BESEGAAESWRFdBCAAEmEGIAIBDhJhBAcBEhUFIAEBEWkIAQAC
AAAAAAADAAABCgAEAhwSdRJ5EX0EBhKAgQUgABKAiQUgABKAjQYgARKAkRwDIAAcByACEoCFDhwG
IAEdDh0DDBABAR4AFRKApQEeAAMKAQ4FIAIBHBgGAAEBEoCBBgABARGArQYAAg4OHRwFIAIODg4E
AAARIQYgARKAhQ4GAAESgLEOCDG/OFatNk41BAABDhwEIAEBCgUgABKAvQUAABKAwQkgAgESgL0S
gMEFIAASgM0GIAEBEoC9BQACDg4cBSAAEoDdCiAGAQgODg4IEAIIIAUCCA4ODggqBxUSgIUCCA4O
Dg4ODhIYCBKAtQ4SgMUSgM0SgL0SgNESgNkSgNkdAx0cBhABAR4ADgQKARIYFgcJDhKAtRKAzRKA
vRKA0Q4SGBIYHRwGAAEOEoDhBAYSgOUEIAEDCAgAAw4ODhKA5QYVER0BESEFIAEBEwAFAAICDg4J
BwICFREdAREhSQEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC41AQBUDhRGcmFtZXdvcmtEaXNw
bGF5TmFtZRIuTkVUIEZyYW1ld29yayA0LjUoAQAjU1RfMGMwMjg5YWI3ODhjNDMzZWE1OWU5ZGEw
OTQwZGNhOTAAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAxOQAACAEACAAAAAAAHgEAAQBUAhZX
cmFwTm9uRXhjZXB0aW9uVGhyb3dzAQDgQwAAAAAAAAAAAAD+QwAAACAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAA8EMAAAAAAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAA
EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAA
GAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhgAACw
AwAAAAAAAAAAAACwAzQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAA
AQAAAAEAR168GwAAAQBHXrwbPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQBy
AEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAE
EAMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAA7AIAAAEAMAAwADAAMAAwADQAYgAw
AAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABfADAAYwAwADIA
OAA5AGEAYgA3ADgAOABjADQAMwAzAGUAYQA1ADkAZQA5AGQAYQAwADkANAAwAGQAYwBhADkAMAAA
AEAADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA3ADEAMAAwAC4AMgA0ADEA
MwA1AAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAVABfAGIAOAAyADMAZAA5
ADUAOAA4AGIAZgAwADQAMQA3ADMAOQA2ADgAMwAxADcAOABhADMAMQAyAGQAMQA2AGUAMgAuAGQA
bABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBo
AHQAIABAACAAIAAyADAAMQA5AAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0A
ZQAAAFMAVABfAGIAOAAyADMAZAA5ADUAOAA4AGIAZgAwADQAMQA3ADMAOQA2ADgAMwAxADcAOABh
ADMAMQAyAGQAMQA2AGUAMgAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAA
AABTAFQAXwAwAGMAMAAyADgAOQBhAGIANwA4ADgAYwA0ADMAMwBlAGEANQA5AGUAOQBkAGEAMAA5
ADQAMABkAGMAYQA5ADAAAABEAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4A
MAAuADcAMQAwADAALgAyADQAMQAzADUAAAAAAEgADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQBy
AHMAaQBvAG4AAAAxAC4AMAAuADcAMQAwADAALgAyADQAMQAzADUAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAMAAAAEDQAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
                    </ScriptProject>
                  </DTS:ObjectData>
                </DTS:Executable>
              </DTS:Executables>
              <DTS:ForEachVariableMappings>
                <DTS:ForEachVariableMapping
                  DTS:CreationName=""
                  DTS:DTSID="{34d855b7-9242-45ed-ab80-379688c01f26}"
                  DTS:ObjectName="{2C30602C-E881-4659-89AC-A5E2466C10B7}"
                  DTS:ValueIndex="0"
                  DTS:VariableName="User::intRigId" />
                <DTS:ForEachVariableMapping
                  DTS:CreationName=""
                  DTS:DTSID="{5554def3-34b4-4971-afae-86870c1f574a}"
                  DTS:ObjectName="{32912499-E941-408A-BBFF-A8A5CB047B5C}"
                  DTS:ValueIndex="1"
                  DTS:VariableName="User::strRigName" />
              </DTS:ForEachVariableMappings>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Well Loop\Well Predecessor Container.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:DTSID="{9e524f1d-ffd9-4ed5-ac4c-d75657e3f3f9}"
              DTS:From="Package\Well Loop\Well Predecessor Container\BlackGold Customer Query"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\Well Loop\Well Predecessor Container\Customer Loop" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\Well Loop\Well Predecessor Container.PrecedenceConstraints[Constraint 17]"
              DTS:CreationName=""
              DTS:DTSID="{1d711695-a252-4e01-87b3-c0a172ac4bc5}"
              DTS:From="Package\Well Loop\Well Predecessor Container\BlackGold Rig Query"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 17"
              DTS:To="Package\Well Loop\Well Predecessor Container\Rig Loop" />
          </DTS:PrecedenceConstraints>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Well Loop.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{b2243a25-bbb1-4909-b2d3-687f6d86d9a4}"
          DTS:From="Package\Well Loop\Well Predecessor Container"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\Well Loop\C# Script to Call Data Gumbo Well API" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Well Loop.PrecedenceConstraints[Constraint 1]"
          DTS:CreationName=""
          DTS:DTSID="{E02F4CD8-9C4D-4F1D-AE0B-FBAB4B6AAF01}"
          DTS:From="Package\Well Loop\C# Script to Call Data Gumbo Well API"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 1"
          DTS:To="Package\Well Loop\BlackGold Tripping Speeds Min Max ID Query" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Well Loop.PrecedenceConstraints[Constraint 10]"
          DTS:CreationName=""
          DTS:DTSID="{2f67a159-1325-4b9a-8126-a029a07e3ee4}"
          DTS:From="Package\Well Loop\BlackGold Tripping Speeds Query"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 10"
          DTS:To="Package\Well Loop\Tripping Speeds Loop" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Well Loop.PrecedenceConstraints[Constraint 11]"
          DTS:CreationName=""
          DTS:DTSID="{1a629da6-da35-4801-96fb-a88db37c644e}"
          DTS:From="Package\Well Loop\Do Formation Queries"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 11"
          DTS:To="Package\Well Loop\Tour Sheet Loop" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Well Loop.PrecedenceConstraints[Constraint 12]"
          DTS:CreationName=""
          DTS:DTSID="{71fbb008-f56c-4c92-9b1a-6f31cbaf358a}"
          DTS:From="Package\Well Loop\Drilling Assembly Loop"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 12"
          DTS:To="Package\Well Loop\Drilling Assembly Component Loop" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Well Loop.PrecedenceConstraints[Constraint 13]"
          DTS:CreationName=""
          DTS:DTSID="{92018E3F-7DE6-477F-94FC-CC2A470CE2CD}"
          DTS:From="Package\Well Loop\Connect Times Min Max Loop"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 13"
          DTS:To="Package\Well Loop\BlackGold Connect Times Query" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Well Loop.PrecedenceConstraints[Constraint 14]"
          DTS:CreationName=""
          DTS:DTSID="{94B60724-058F-418C-B85A-6DCD6275062F}"
          DTS:From="Package\Well Loop\BlackGold Connect Time Min Max ID Query"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 14"
          DTS:To="Package\Well Loop\Connect Times Min Max Loop" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Well Loop.PrecedenceConstraints[Constraint 15]"
          DTS:CreationName=""
          DTS:DTSID="{28B0C0B9-9C8A-4D63-ADA3-8B28B0403136}"
          DTS:From="Package\Well Loop\Reset WAP ID List"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 15"
          DTS:To="Package\Well Loop\Well Activity Period Query" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Well Loop.PrecedenceConstraints[Constraint 16]"
          DTS:CreationName=""
          DTS:DTSID="{7ED0AE9F-1E01-4AB2-AFA2-F15030BB18EB}"
          DTS:From="Package\Well Loop\Well Activity Period Query"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 16"
          DTS:To="Package\Well Loop\Well Activity Period Loop" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Well Loop.PrecedenceConstraints[Constraint 17]"
          DTS:CreationName=""
          DTS:DTSID="{A7F568C2-32EC-4EF3-8A79-B1E183521CE3}"
          DTS:From="Package\Well Loop\C# Script to Call Data Gumbo Well API"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 17"
          DTS:To="Package\Well Loop\Reset WAP ID List" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Well Loop.PrecedenceConstraints[Constraint 18]"
          DTS:CreationName=""
          DTS:DTSID="{4ECD7FCF-745E-46E8-9BA3-844A813A86DD}"
          DTS:From="Package\Well Loop\Well Activity Period Loop"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 18"
          DTS:To="Package\Well Loop\C# Script to Clean Up Old WAPS" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Well Loop.PrecedenceConstraints[Constraint 19]"
          DTS:CreationName=""
          DTS:DTSID="{D5C12E85-F55E-47C6-90F3-A65E536A5079}"
          DTS:From="Package\Well Loop\C# Script for Timezone Conversion"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 19"
          DTS:To="Package\Well Loop\Well Predecessor Container" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Well Loop.PrecedenceConstraints[Constraint 2]"
          DTS:CreationName=""
          DTS:DTSID="{1EFAA78F-0BEA-4E5A-AF33-4273D0232DF5}"
          DTS:From="Package\Well Loop\C# Script to Call Data Gumbo Well API"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 2"
          DTS:To="Package\Well Loop\BlackGold Connect Time Min Max ID Query" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Well Loop.PrecedenceConstraints[Constraint 20]"
          DTS:CreationName=""
          DTS:DTSID="{86FD8FCA-9968-4302-A3D4-381D1C3DDF22}"
          DTS:EvalOp="1"
          DTS:Expression="@[User::boolIsChildWell] == False"
          DTS:From="Package\Well Loop\Expression Task"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 20"
          DTS:To="Package\Well Loop\C# Script for Timezone Conversion" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Well Loop.PrecedenceConstraints[Constraint 21]"
          DTS:CreationName=""
          DTS:DTSID="{EC54020F-1E83-415D-B0CF-DB5F7801988F}"
          DTS:EvalOp="1"
          DTS:Expression="@[User::boolIsChildWell] == True"
          DTS:From="Package\Well Loop\Expression Task"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 21"
          DTS:To="Package\Well Loop\C# Script to Delete Child Well" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Well Loop.PrecedenceConstraints[Constraint 3]"
          DTS:CreationName=""
          DTS:DTSID="{f6084b71-8e83-4120-828f-36d531f95d34}"
          DTS:From="Package\Well Loop\C# Script to Call Data Gumbo Well API"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 3"
          DTS:To="Package\Well Loop\Do Formation Queries" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Well Loop.PrecedenceConstraints[Constraint 4]"
          DTS:CreationName=""
          DTS:DTSID="{20cf431b-6d2b-4eaf-b785-d0430b6993b4}"
          DTS:From="Package\Well Loop\Tour Sheet Loop"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 4"
          DTS:To="Package\Well Loop\Formation Loop" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Well Loop.PrecedenceConstraints[Constraint 5]"
          DTS:CreationName=""
          DTS:DTSID="{443136B2-3BD1-40C6-824C-91013E4AF304}"
          DTS:From="Package\Well Loop\Tour Sheet Loop"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 5"
          DTS:To="Package\Well Loop\Tour Sheet Remark Loop" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Well Loop.PrecedenceConstraints[Constraint 6]"
          DTS:CreationName=""
          DTS:DTSID="{5A9A88A8-A10C-44D2-9E29-AA3031E4DC45}"
          DTS:From="Package\Well Loop\BlackGold Tripping Speeds Min Max ID Query"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 6"
          DTS:To="Package\Well Loop\Tripping Speeds Min Max Loop" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Well Loop.PrecedenceConstraints[Constraint 7]"
          DTS:CreationName=""
          DTS:DTSID="{52286B5B-C260-4634-84F5-992D897D1B84}"
          DTS:From="Package\Well Loop\Tripping Speeds Min Max Loop"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 7"
          DTS:To="Package\Well Loop\BlackGold Tripping Speeds Query" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Well Loop.PrecedenceConstraints[Constraint 8]"
          DTS:CreationName=""
          DTS:DTSID="{D18DDF05-89F4-40EA-A447-B6CD37EF0CA5}"
          DTS:From="Package\Well Loop\BlackGold Connect Times Query"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 8"
          DTS:To="Package\Well Loop\Connect Time Loop" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Well Loop.PrecedenceConstraints[Constraint 9]"
          DTS:CreationName=""
          DTS:DTSID="{9eceab85-33c3-4b92-aaa4-f92528303423}"
          DTS:From="Package\Well Loop\Tour Sheet Loop"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 9"
          DTS:To="Package\Well Loop\Drilling Assembly Loop" />
      </DTS:PrecedenceConstraints>
      <DTS:ForEachVariableMappings>
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{BA988460-8AB2-4C98-B076-C4D4CB04DB47}"
          DTS:ObjectName="{BA988460-8AB2-4C98-B076-C4D4CB04DB47}"
          DTS:ValueIndex="0"
          DTS:VariableName="User::intWellId" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{1D257630-F0C4-440D-A767-53337FE16CCE}"
          DTS:ObjectName="{1D257630-F0C4-440D-A767-53337FE16CCE}"
          DTS:ValueIndex="1"
          DTS:VariableName="User::strWellName" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{159B7810-A3DC-43C9-A94E-E1A3CB1F53F2}"
          DTS:ObjectName="{159B7810-A3DC-43C9-A94E-E1A3CB1F53F2}"
          DTS:ValueIndex="2"
          DTS:VariableName="User::objUwi" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{BB039A63-EA81-4437-BAF7-542F20CC6099}"
          DTS:ObjectName="{BB039A63-EA81-4437-BAF7-542F20CC6099}"
          DTS:ValueIndex="3"
          DTS:VariableName="User::intCustomerIdForWell" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{0EE8E188-CD58-4B84-97BD-5F5B89A7B639}"
          DTS:ObjectName="{0EE8E188-CD58-4B84-97BD-5F5B89A7B639}"
          DTS:ValueIndex="4"
          DTS:VariableName="User::objJobNum" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{EC9D9D4E-3AA0-40E8-89DB-866A1C93C6E0}"
          DTS:ObjectName="{EC9D9D4E-3AA0-40E8-89DB-866A1C93C6E0}"
          DTS:ValueIndex="5"
          DTS:VariableName="User::objWellNum" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{C8A7CC42-4CD9-485E-8A78-2D98EF31EF78}"
          DTS:ObjectName="{C8A7CC42-4CD9-485E-8A78-2D98EF31EF78}"
          DTS:ValueIndex="6"
          DTS:VariableName="User::objSpudDate" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{D97085E7-5FD5-434F-B522-BCF0F11622A1}"
          DTS:ObjectName="{D97085E7-5FD5-434F-B522-BCF0F11622A1}"
          DTS:ValueIndex="7"
          DTS:VariableName="User::objRigReleaseDate" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{E75E04E0-C627-467A-BF79-E3FAE7B6F31E}"
          DTS:ObjectName="{E75E04E0-C627-467A-BF79-E3FAE7B6F31E}"
          DTS:ValueIndex="8"
          DTS:VariableName="User::strProvinceState" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{00EB7C77-8E96-46E5-A2D3-A26FDE95A247}"
          DTS:ObjectName="{00EB7C77-8E96-46E5-A2D3-A26FDE95A247}"
          DTS:ValueIndex="9"
          DTS:VariableName="User::strCountry" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{67BC8E3D-F1EB-476C-A997-60C72394A7F7}"
          DTS:ObjectName="{67BC8E3D-F1EB-476C-A997-60C72394A7F7}"
          DTS:ValueIndex="10"
          DTS:VariableName="User::dblLatitude" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{D8A36936-9F41-4174-B008-60B2287D88EF}"
          DTS:ObjectName="{D8A36936-9F41-4174-B008-60B2287D88EF}"
          DTS:ValueIndex="11"
          DTS:VariableName="User::dblLongitude" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{11B67D09-4C1D-4F93-B232-D797F03CBFE2}"
          DTS:ObjectName="{11B67D09-4C1D-4F93-B232-D797F03CBFE2}"
          DTS:ValueIndex="12"
          DTS:VariableName="User::boolActiveInd" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{A9FCAE46-AC19-4E3A-8F1C-12E896B65619}"
          DTS:ObjectName="{A9FCAE46-AC19-4E3A-8F1C-12E896B65619}"
          DTS:ValueIndex="13"
          DTS:VariableName="User::intRigIdForWell" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{42B37B3C-CB23-4D59-8E32-330F5FD73F54}"
          DTS:ObjectName="{42B37B3C-CB23-4D59-8E32-330F5FD73F54}"
          DTS:ValueIndex="14"
          DTS:VariableName="User::strTimeZone" />
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{06FB61D3-C81C-453C-8084-C78937BB0CE8}"
          DTS:ObjectName="{06FB61D3-C81C-453C-8084-C78937BB0CE8}"
          DTS:ValueIndex="15"
          DTS:VariableName="User::boolIsChildWell" />
      </DTS:ForEachVariableMappings>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{7BC67593-6EBD-4298-91A8-1BB254AB4E6D}"
      DTS:From="Package\BlackGold Well Query 1"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Foreach Loop Container" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{5343454F-82ED-4335-9272-115717FEF831}"
      DTS:From="Package\Log Variables"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\BlackGold Well Query" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 18]"
      DTS:CreationName=""
      DTS:DTSID="{0342da07-1242-4652-96fa-96aec147d5e5}"
      DTS:From="Package\BlackGold Well Query"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 18"
      DTS:To="Package\Well Loop" />
  </DTS:PrecedenceConstraints>
  <DTS:EventHandlers>
    <DTS:EventHandler
      DTS:refId="Package.EventHandlers[OnError]"
      DTS:CreationName="OnError"
      DTS:DTSID="{EE03C0E3-2E13-49E7-BE95-55BD7EB521FF}"
      DTS:EventID="209681588"
      DTS:EventName="OnError"
      DTS:LocaleID="-1">
      <DTS:Variables>
        <DTS:Variable
          DTS:CreationName=""
          DTS:Description="The propagate property of the event"
          DTS:DTSID="{18432E8F-A905-444D-B919-8CE2CB153D98}"
          DTS:IncludeInDebugDump="6789"
          DTS:Namespace="System"
          DTS:ObjectName="Propagate">
          <DTS:VariableValue
            DTS:DataType="11">-1</DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package.EventHandlers[OnError]\Send Mail Task"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.SendMailTask.SendMailTask, Microsoft.SqlServer.SendMailTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Send Mail Task"
          DTS:DTSID="{B9DF7161-EC7D-4512-A2C1-6A53399CB7A3}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.SendMailTask.SendMailTask, Microsoft.SqlServer.SendMailTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="Send Mail Task"
          DTS:TaskContact="Send Mail Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
          <DTS:Variables />
          <DTS:PropertyExpression
            DTS:Name="MessageSource">"On server " + @[System::MachineName] + "(" + @[User::strEnv]  +"/ " + @[User::strServerName]  + ") - Error: " +  @[System::ErrorDescription]</DTS:PropertyExpression>
          <DTS:PropertyExpression
            DTS:Name="Subject">"DataGumbo SSIS Error (" +  @[System::MachineName] + ")"</DTS:PropertyExpression>
          <DTS:ObjectData>
            <SendMailTask:SendMailTaskData
              SendMailTask:SMTPServer="{4CE84D4F-0D35-4217-AAB1-B0B0E27437D7}"
              SendMailTask:From="donotreply@ensignenergy.com"
              SendMailTask:To="greg.duggleby@ensignenergy.com"
              SendMailTask:Subject="DataGumbo SSIS Error (CAL0-79ZKL12)"
              SendMailTask:MessageSource="On server CAL0-79ZKL12(UAT/ ensign-api.azurewebsites.net) - Error: " xmlns:SendMailTask="www.microsoft.com/sqlserver/dts/tasks/sendmailtask" />
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
    </DTS:EventHandler>
  </DTS:EventHandlers>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql11">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="128" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="182,42"
          Id="Package\BlackGold Well Query"
          TopLeft="1058,98" />
        <NodeLayout
          Size="182,42"
          Id="Package\BlackGold Well Query 1"
          TopLeft="2371.88888888889,97" />
        <NodeLayout
          Size="133,42"
          Id="Package\Foreach Loop Container\Script Task"
          TopLeft="56.6666666666665,36" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="329,193"
          Size="329,236"
          Id="Package\Foreach Loop Container"
          TopLeft="2291,210.111111111111" />
        <NodeLayout
          Size="144,42"
          Id="Package\Log Variables"
          TopLeft="841,102" />
        <NodeLayout
          Size="283,42"
          Id="Package\Well Loop\BlackGold Connect Time Min Max ID Query"
          TopLeft="529,593.333333333333" />
        <NodeLayout
          Size="231,42"
          Id="Package\Well Loop\BlackGold Connect Times Query"
          TopLeft="564.111111111112,878.888888888889" />
        <NodeLayout
          Size="294,42"
          Id="Package\Well Loop\BlackGold Tripping Speeds Min Max ID Query"
          TopLeft="113,592.66666666666" />
        <NodeLayout
          Size="237,42"
          Id="Package\Well Loop\BlackGold Tripping Speeds Query"
          TopLeft="141.833333333334,896" />
        <NodeLayout
          Size="245,42"
          Id="Package\Well Loop\C# Script for Timezone Conversion"
          TopLeft="934,191" />
        <NodeLayout
          Size="263,42"
          Id="Package\Well Loop\C# Script to Call Data Gumbo Well API"
          TopLeft="311,482" />
        <NodeLayout
          Size="234,42"
          Id="Package\Well Loop\C# Script to Clean Up Old WAPS"
          TopLeft="805,1659" />
        <NodeLayout
          Size="221,42"
          Id="Package\Well Loop\C# Script to Delete Child Well"
          TopLeft="1252,192" />
        <NodeLayout
          Size="308,42"
          Id="Package\Well Loop\Connect Time Loop\C# Script to Call Data Gumbo Connect Time API"
          TopLeft="21,19" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="350,116"
          Size="350,159"
          Id="Package\Well Loop\Connect Time Loop"
          TopLeft="499.333333333334,995.000000000001" />
        <NodeLayout
          Size="299,42"
          Id="Package\Well Loop\Connect Times Min Max Loop\C# Script to Delete Old Connect Time Records"
          TopLeft="33,25" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="361,123"
          Size="361,166"
          Id="Package\Well Loop\Connect Times Min Max Loop"
          TopLeft="492.111111111111,681.444444444438" />
        <NodeLayout
          Size="299,42"
          Id="Package\Well Loop\Do Formation Queries\BlackGold Drilling Assembly Component Query"
          TopLeft="29.3333333333328,31.8888888888896" />
        <NodeLayout
          Size="242,42"
          Id="Package\Well Loop\Do Formation Queries\BlackGold Drilling Assembly Query"
          TopLeft="48.8888888888914,97.6666666666666" />
        <NodeLayout
          Size="209,42"
          Id="Package\Well Loop\Do Formation Queries\BlackGold Formation Query"
          TopLeft="48.2777777777767,238.499999999999" />
        <NodeLayout
          Size="214,42"
          Id="Package\Well Loop\Do Formation Queries\BlackGold Tour Sheet Query"
          TopLeft="52.3333333333335,310.555555555556" />
        <NodeLayout
          Size="253,42"
          Id="Package\Well Loop\Do Formation Queries\BlackGold Tour Sheet Remark Query"
          TopLeft="40.3333333333369,167.833333333333" />
        <EdgeLayout
          Id="Package\Well Loop\Do Formation Queries.PrecedenceConstraints[Constraint]"
          TopLeft="178.833333333333,73.8888888888896">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-8.94444444444139,23.777777777777"
              Start="0,0"
              End="-8.94444444444139,16.277777777777">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,7.88888888888852" />
                  <mssgle:CubicBezierSegment
                    Point1="0,7.88888888888852"
                    Point2="0,11.8888888888885"
                    Point3="-4,11.8888888888885" />
                  <mssgle:LineSegment
                    End="-4.94444444444139,11.8888888888885" />
                  <mssgle:CubicBezierSegment
                    Point1="-4.94444444444139,11.8888888888885"
                    Point2="-8.94444444444139,11.8888888888885"
                    Point3="-8.94444444444139,15.8888888888885" />
                  <mssgle:LineSegment
                    End="-8.94444444444139,16.277777777777" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Well Loop\Do Formation Queries.PrecedenceConstraints[Constraint 1]"
          TopLeft="166.833333333337,209.833333333333">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-14.0555555555602,28.666666666666"
              Start="0,0"
              End="-14.0555555555602,21.166666666666">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,10.333333333333" />
                  <mssgle:CubicBezierSegment
                    Point1="0,10.333333333333"
                    Point2="0,14.333333333333"
                    Point3="-4,14.333333333333" />
                  <mssgle:LineSegment
                    End="-10.0555555555602,14.333333333333" />
                  <mssgle:CubicBezierSegment
                    Point1="-10.0555555555602,14.333333333333"
                    Point2="-14.0555555555602,14.333333333333"
                    Point3="-14.0555555555602,18.333333333333" />
                  <mssgle:LineSegment
                    End="-14.0555555555602,21.166666666666" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Well Loop\Do Formation Queries.PrecedenceConstraints[Constraint 2]"
          TopLeft="168.361111111114,139.666666666667">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,28.1666666666667"
              Start="0,0"
              End="0,20.6666666666667">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.6666666666667" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Well Loop\Do Formation Queries.PrecedenceConstraints[Constraint 3]"
          TopLeft="156.055555555555,280.499999999999">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,30.055555555557"
              Start="0,0"
              End="0,22.555555555557">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,22.555555555557" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="390,408"
          Size="390,451"
          Id="Package\Well Loop\Do Formation Queries"
          TopLeft="959.277777777778,281.888888888889" />
        <NodeLayout
          Size="381,42"
          Id="Package\Well Loop\Drilling Assembly Component Loop\C# Script to Call Data Gumbo Drilling Assembly Component API"
          TopLeft="22,11" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="408,112"
          Size="408,155"
          Id="Package\Well Loop\Drilling Assembly Component Loop"
          TopLeft="1378.83333333334,1197.66666666666" />
        <NodeLayout
          Size="323,42"
          Id="Package\Well Loop\Drilling Assembly Loop\C# Script to Call Data Gumbo Drilling Assembly API"
          TopLeft="20,15" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="375,112"
          Size="375,155"
          Id="Package\Well Loop\Drilling Assembly Loop"
          TopLeft="1391.22222222223,1012.61111111111" />
        <NodeLayout
          Size="157,42"
          Id="Package\Well Loop\Expression Task"
          TopLeft="1134,28" />
        <NodeLayout
          Size="291,42"
          Id="Package\Well Loop\Formation Loop\C# Script to Call Data Gumbo Formation API"
          TopLeft="18.1111111111111,18.1111111111112" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="351,115"
          Size="351,158"
          Id="Package\Well Loop\Formation Loop"
          TopLeft="1659.22222222222,807.05555555556" />
        <NodeLayout
          Size="166,42"
          Id="Package\Well Loop\Reset WAP ID List"
          TopLeft="365,1348" />
        <NodeLayout
          Size="295,42"
          Id="Package\Well Loop\Tour Sheet Loop\C# Script to Call Data Gumbo Tour Sheet API"
          TopLeft="25,14.7777777777778" />
        <NodeLayout
          Size="247,42"
          Id="Package\Well Loop\Tour Sheet Loop\C# Script to Clean Up Old Remarks"
          TopLeft="57.4444444444443,170.111111111111" />
        <NodeLayout
          Size="213,42"
          Id="Package\Well Loop\Tour Sheet Loop\Get List of Valid Remark Ids"
          TopLeft="73.0000000000005,90.1111111111113" />
        <EdgeLayout
          Id="Package\Well Loop\Tour Sheet Loop.PrecedenceConstraints[Constraint]"
          TopLeft="176,56.7777777777778">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,33.3333333333335"
              Start="0,0"
              End="0,25.8333333333335">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,25.8333333333335" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Well Loop\Tour Sheet Loop.PrecedenceConstraints[Constraint 1]"
          TopLeft="180.222222222222,132.111111111111">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,37.9999999999997"
              Start="0,0"
              End="0,30.4999999999997">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,30.4999999999997" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="363,267"
          Size="363,310"
          Id="Package\Well Loop\Tour Sheet Loop"
          TopLeft="967.222222222222,799" />
        <NodeLayout
          Size="334,42"
          Id="Package\Well Loop\Tour Sheet Remark Loop\C# Script to Call Data Gumbo Tour Sheet Remark API"
          TopLeft="36,21" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="375,118"
          Size="375,161"
          Id="Package\Well Loop\Tour Sheet Remark Loop"
          TopLeft="967.55555555556,1312.16666666667" />
        <NodeLayout
          Size="314,42"
          Id="Package\Well Loop\Tripping Speeds Loop\C# Script to Call Data Gumbo Tripping Speed API"
          TopLeft="26.4444444444445,15.5555555555557" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="350,113"
          Size="350,156"
          Id="Package\Well Loop\Tripping Speeds Loop"
          TopLeft="86.5,1000.66666666667" />
        <NodeLayout
          Size="305,42"
          Id="Package\Well Loop\Tripping Speeds Min Max Loop\C# Script to Delete Old Tripping Speed Records"
          TopLeft="39,24" />
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="361,121"
          Size="361,164"
          Id="Package\Well Loop\Tripping Speeds Min Max Loop"
          TopLeft="79.7777777777777,683.66666666666" />
        <NodeLayout
          Size="189,42"
          Id="Package\Well Loop\Well Activity Period Loop\Append to WAP ID List"
          TopLeft="93,102" />
        <NodeLayout
          Size="334,42"
          Id="Package\Well Loop\Well Activity Period Loop\C# Script to Call Data Gumbo Well Activity Period API"
          TopLeft="17,13" />
        <EdgeLayout
          Id="Package\Well Loop\Well Activity Period Loop.PrecedenceConstraints[Constraint]"
          TopLeft="185.75,55">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,47"
              Start="0,0"
              End="0,39.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,39.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="396,212"
          Size="396,255"
          Id="Package\Well Loop\Well Activity Period Loop"
          TopLeft="252,1547" />
        <NodeLayout
          Size="203,42"
          Id="Package\Well Loop\Well Activity Period Query"
          TopLeft="345,1463" />
        <NodeLayout
          Size="207,42"
          Id="Package\Well Loop\Well Predecessor Container\BlackGold Customer Query"
          TopLeft="78,10" />
        <NodeLayout
          Size="177,42"
          Id="Package\Well Loop\Well Predecessor Container\BlackGold Rig Query"
          TopLeft="498.833333333334,14" />
        <NodeLayout
          Size="288,42"
          Id="Package\Well Loop\Well Predecessor Container\Customer Loop\C# Script to Call Data Gumbo Customer API"
          TopLeft="28,18" />
        <ContainerLayout
          HeaderHeight="51"
          IsExpanded="True"
          PanelSize="335,115"
          Size="335,166"
          Id="Package\Well Loop\Well Predecessor Container\Customer Loop"
          TopLeft="17,105.5" />
        <NodeLayout
          Size="258,42"
          Id="Package\Well Loop\Well Predecessor Container\Rig Loop\C# Script to Call Data Gumbo Rig API"
          TopLeft="22,17" />
        <ContainerLayout
          HeaderHeight="51"
          IsExpanded="True"
          PanelSize="335,114"
          Size="335,165"
          Id="Package\Well Loop\Well Predecessor Container\Rig Loop"
          TopLeft="423,99.666666666667" />
        <EdgeLayout
          Id="Package\Well Loop\Well Predecessor Container.PrecedenceConstraints[Constraint]"
          TopLeft="183,52">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,53.5"
              Start="0,0"
              End="0,46">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,46" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Well Loop\Well Predecessor Container.PrecedenceConstraints[Constraint 17]"
          TopLeft="588.916666666667,56">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,43.666666666667"
              Start="0,0"
              End="0,36.166666666667">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,36.166666666667" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="762,339"
          Size="762,382"
          Id="Package\Well Loop\Well Predecessor Container"
          TopLeft="58,25" />
        <EdgeLayout
          Id="Package\Well Loop.PrecedenceConstraints[Constraint]"
          TopLeft="440.75,407">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,75"
              Start="0,0"
              End="0,67.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,67.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Well Loop.PrecedenceConstraints[Constraint 1]"
          TopLeft="378.75,524">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-118.75,68.66666666666"
              Start="0,0"
              End="-118.75,61.16666666666">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,19.3483897950626" />
                  <mssgle:CubicBezierSegment
                    Point1="0,19.3483897950626"
                    Point2="0,23.3483897950626"
                    Point3="-4,23.3483897950626" />
                  <mssgle:LineSegment
                    End="-114.75,23.3483897950626" />
                  <mssgle:CubicBezierSegment
                    Point1="-114.75,23.3483897950626"
                    Point2="-118.75,23.3483897950626"
                    Point3="-118.75,27.3483897950626" />
                  <mssgle:LineSegment
                    End="-118.75,61.16666666666" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Well Loop.PrecedenceConstraints[Constraint 10]"
          TopLeft="260.916666666667,938">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,62.6666666666679"
              Start="0,0"
              End="0,55.1666666666679">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,55.1666666666679" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Well Loop.PrecedenceConstraints[Constraint 11]"
          TopLeft="1151.5,732.888888888889">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,66.111111111111"
              Start="0,0"
              End="0,58.611111111111">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,58.611111111111" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Well Loop.PrecedenceConstraints[Constraint 12]"
          TopLeft="1580.77777777778,1167.61111111111">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,30.0555555555534"
              Start="0,0"
              End="0,22.5555555555534">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,22.5555555555534" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Well Loop.PrecedenceConstraints[Constraint 13]"
          TopLeft="676.111111111112,847.444444444438">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,31.4444444444512"
              Start="0,0"
              End="0,23.9444444444512">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,23.9444444444512" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Well Loop.PrecedenceConstraints[Constraint 14]"
          TopLeft="671.555555555556,635.333333333333">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,46.1111111111047"
              Start="0,0"
              End="0,38.6111111111047">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,38.6111111111047" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Well Loop.PrecedenceConstraints[Constraint 15]"
          TopLeft="447.25,1390">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,73"
              Start="0,0"
              End="0,65.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,65.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Well Loop.PrecedenceConstraints[Constraint 16]"
          TopLeft="448.25,1505">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,42"
              Start="0,0"
              End="0,34.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,34.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Well Loop.PrecedenceConstraints[Constraint 17]"
          TopLeft="445.25,524">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,824"
              Start="0,0"
              End="0,816.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,816.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Well Loop.PrecedenceConstraints[Constraint 18]"
          TopLeft="648,1677.25">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="157,0"
              Start="0,0"
              End="149.5,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="149.5,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Well Loop.PrecedenceConstraints[Constraint 19]"
          TopLeft="934,214">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-114,0"
              Start="0,0"
              End="-106.5,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="-106.5,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Well Loop.PrecedenceConstraints[Constraint 2]"
          TopLeft="506.25,524">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="164.25,69.333333333333"
              Start="0,0"
              End="164.25,61.833333333333">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,19.5750731911333" />
                  <mssgle:CubicBezierSegment
                    Point1="0,19.5750731911333"
                    Point2="0,23.5750731911333"
                    Point3="4,23.5750731911333" />
                  <mssgle:LineSegment
                    End="160.25,23.5750731911333" />
                  <mssgle:CubicBezierSegment
                    Point1="160.25,23.5750731911333"
                    Point2="164.25,23.5750731911333"
                    Point3="164.25,27.5750731911333" />
                  <mssgle:LineSegment
                    End="164.25,61.833333333333" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Well Loop.PrecedenceConstraints[Constraint 20]"
          TopLeft="1187.66666666667,70">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-131.166666666667,121"
              Start="0,0"
              End="-131.166666666667,113.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,45.1324085750316" />
                  <mssgle:CubicBezierSegment
                    Point1="0,45.1324085750316"
                    Point2="0,49.1324085750316"
                    Point3="-4,49.1324085750316" />
                  <mssgle:LineSegment
                    End="-127.166666666667,49.1324085750316" />
                  <mssgle:CubicBezierSegment
                    Point1="-127.166666666667,49.1324085750316"
                    Point2="-131.166666666667,49.1324085750316"
                    Point3="-131.166666666667,53.1324085750316" />
                  <mssgle:LineSegment
                    End="-131.166666666667,113.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-73.5833333333334,54.1324085750316,16,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Well Loop.PrecedenceConstraints[Constraint 21]"
          TopLeft="1237.33333333333,70">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="125.166666666667,122"
              Start="0,0"
              End="125.166666666667,114.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,45.5384615384616" />
                  <mssgle:CubicBezierSegment
                    Point1="0,45.5384615384616"
                    Point2="0,49.5384615384616"
                    Point3="4,49.5384615384616" />
                  <mssgle:LineSegment
                    End="121.166666666667,49.5384615384616" />
                  <mssgle:CubicBezierSegment
                    Point1="121.166666666667,49.5384615384616"
                    Point2="125.166666666667,49.5384615384616"
                    Point3="125.166666666667,53.5384615384616" />
                  <mssgle:LineSegment
                    End="125.166666666667,114.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="54.5833333333334,54.5384615384616,16,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Well Loop.PrecedenceConstraints[Constraint 3]"
          TopLeft="574,505.194444444445">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="385.277777777778,0"
              Start="0,0"
              End="377.777777777778,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="377.777777777778,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Well Loop.PrecedenceConstraints[Constraint 4]"
          TopLeft="1330.22222222222,889.694444444447">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="328.999999999998,0"
              Start="0,0"
              End="321.499999999998,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="321.499999999998,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Well Loop.PrecedenceConstraints[Constraint 5]"
          TopLeft="1151.88888888889,1078">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,234.16666666667"
              Start="0,0"
              End="0,226.66666666667">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,226.66666666667" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Well Loop.PrecedenceConstraints[Constraint 6]"
          TopLeft="260.138888888889,634.66666666666">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,49.0000000000003"
              Start="0,0"
              End="0,41.5000000000003">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,41.5000000000003" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Well Loop.PrecedenceConstraints[Constraint 7]"
          TopLeft="260.305555555556,847.66666666666">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,48.3333333333397"
              Start="0,0"
              End="0,40.8333333333397">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,40.8333333333397" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Well Loop.PrecedenceConstraints[Constraint 8]"
          TopLeft="676.972222222223,920.888888888889">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,74.1111111111118"
              Start="0,0"
              End="0,66.6111111111118">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,66.6111111111118" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Well Loop.PrecedenceConstraints[Constraint 9]"
          TopLeft="1330.22222222222,983.666666666667">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="61.000000000008,106.444444444443"
              Start="0,0"
              End="53.500000000008,106.444444444443">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="20.6086956521771,0" />
                  <mssgle:CubicBezierSegment
                    Point1="20.6086956521771,0"
                    Point2="24.6086956521771,0"
                    Point3="24.6086956521771,4" />
                  <mssgle:LineSegment
                    End="24.6086956521771,102.444444444443" />
                  <mssgle:CubicBezierSegment
                    Point1="24.6086956521771,102.444444444443"
                    Point2="24.6086956521771,106.444444444443"
                    Point3="28.6086956521771,106.444444444443" />
                  <mssgle:LineSegment
                    End="53.500000000008,106.444444444443" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="2114,1874"
          Size="2114,1917"
          Id="Package\Well Loop"
          TopLeft="91,235" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="2459.19444444445,139">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,71.111111111111"
              Start="0,0"
              End="0,63.611111111111">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,63.611111111111" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="985,121">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="73,0"
              Start="0,0"
              End="65.5,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="65.5,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 18]"
          TopLeft="1148.5,140">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,95"
              Start="0,0"
              End="0,87.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,87.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <DtsEventHandler
    design-time-name="Package.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="NaN,NaN"
          Id="Package.EventHandlers[OnError]\Send Mail Task"
          TopLeft="NaN,NaN" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>